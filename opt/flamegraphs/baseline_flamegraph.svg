<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="549.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="549.00"> </text><svg id="frames" x="10" width="1180" total_samples="853"><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.12%)</title><rect x="7.5029%" y="277" width="0.1172%" height="15" fill="rgb(227,0,7)" fg:x="64" fg:w="1"/><text x="7.7529%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.12%)</title><rect x="7.5029%" y="261" width="0.1172%" height="15" fill="rgb(217,0,24)" fg:x="64" fg:w="1"/><text x="7.7529%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.35%)</title><rect x="7.6202%" y="277" width="0.3517%" height="15" fill="rgb(221,193,54)" fg:x="65" fg:w="3"/><text x="7.8702%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (41 samples, 4.81%)</title><rect x="3.8687%" y="293" width="4.8066%" height="15" fill="rgb(248,212,6)" fg:x="33" fg:w="41"/><text x="4.1187%" y="303.50">&lt;alloc..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (6 samples, 0.70%)</title><rect x="7.9719%" y="277" width="0.7034%" height="15" fill="rgb(208,68,35)" fg:x="68" fg:w="6"/><text x="8.2219%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (6 samples, 0.70%)</title><rect x="7.9719%" y="261" width="0.7034%" height="15" fill="rgb(232,128,0)" fg:x="68" fg:w="6"/><text x="8.2219%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.35%)</title><rect x="8.3236%" y="245" width="0.3517%" height="15" fill="rgb(207,160,47)" fg:x="71" fg:w="3"/><text x="8.5736%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (8 samples, 0.94%)</title><rect x="8.6753%" y="293" width="0.9379%" height="15" fill="rgb(228,23,34)" fg:x="74" fg:w="8"/><text x="8.9253%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.35%)</title><rect x="10.9027%" y="261" width="0.3517%" height="15" fill="rgb(218,30,26)" fg:x="93" fg:w="3"/><text x="11.1527%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.23%)</title><rect x="11.0199%" y="245" width="0.2345%" height="15" fill="rgb(220,122,19)" fg:x="94" fg:w="2"/><text x="11.2699%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.12%)</title><rect x="11.2544%" y="261" width="0.1172%" height="15" fill="rgb(250,228,42)" fg:x="96" fg:w="1"/><text x="11.5044%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (84 samples, 9.85%)</title><rect x="2.2274%" y="309" width="9.8476%" height="15" fill="rgb(240,193,28)" fg:x="19" fg:w="84"/><text x="2.4774%" y="319.50">&lt;alloc::collec..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (21 samples, 2.46%)</title><rect x="9.6131%" y="293" width="2.4619%" height="15" fill="rgb(216,20,37)" fg:x="82" fg:w="21"/><text x="9.8631%" y="303.50">&lt;a..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (19 samples, 2.23%)</title><rect x="9.8476%" y="277" width="2.2274%" height="15" fill="rgb(206,188,39)" fg:x="84" fg:w="19"/><text x="10.0976%" y="287.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (6 samples, 0.70%)</title><rect x="11.3716%" y="261" width="0.7034%" height="15" fill="rgb(217,207,13)" fg:x="97" fg:w="6"/><text x="11.6216%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (6 samples, 0.70%)</title><rect x="11.3716%" y="245" width="0.7034%" height="15" fill="rgb(231,73,38)" fg:x="97" fg:w="6"/><text x="11.6216%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.35%)</title><rect x="11.7233%" y="229" width="0.3517%" height="15" fill="rgb(225,20,46)" fg:x="100" fg:w="3"/><text x="11.9733%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.12%)</title><rect x="12.0750%" y="309" width="0.1172%" height="15" fill="rgb(210,31,41)" fg:x="103" fg:w="1"/><text x="12.3250%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (103 samples, 12.08%)</title><rect x="0.2345%" y="325" width="12.0750%" height="15" fill="rgb(221,200,47)" fg:x="2" fg:w="103"/><text x="0.4845%" y="335.50">&lt;alloc::collection..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.12%)</title><rect x="12.1923%" y="309" width="0.1172%" height="15" fill="rgb(226,26,5)" fg:x="104" fg:w="1"/><text x="12.4423%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.12%)</title><rect x="12.1923%" y="293" width="0.1172%" height="15" fill="rgb(249,33,26)" fg:x="104" fg:w="1"/><text x="12.4423%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.12%)</title><rect x="12.1923%" y="277" width="0.1172%" height="15" fill="rgb(235,183,28)" fg:x="104" fg:w="1"/><text x="12.4423%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.35%)</title><rect x="12.3095%" y="325" width="0.3517%" height="15" fill="rgb(221,5,38)" fg:x="105" fg:w="3"/><text x="12.5595%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (109 samples, 12.78%)</title><rect x="0.0000%" y="373" width="12.7784%" height="15" fill="rgb(247,18,42)" fg:x="0" fg:w="109"/><text x="0.2500%" y="383.50">&lt;alloc::collections..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (109 samples, 12.78%)</title><rect x="0.0000%" y="357" width="12.7784%" height="15" fill="rgb(241,131,45)" fg:x="0" fg:w="109"/><text x="0.2500%" y="367.50">&lt;alloc::vec::Vec&lt;T,..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (109 samples, 12.78%)</title><rect x="0.0000%" y="341" width="12.7784%" height="15" fill="rgb(249,31,29)" fg:x="0" fg:w="109"/><text x="0.2500%" y="351.50">&lt;alloc::collections..</text></g><g><title>__kernelrpc_mach_vm_allocate_trap (1 samples, 0.12%)</title><rect x="12.6612%" y="325" width="0.1172%" height="15" fill="rgb(225,111,53)" fg:x="108" fg:w="1"/><text x="12.9112%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (26 samples, 3.05%)</title><rect x="13.3646%" y="245" width="3.0481%" height="15" fill="rgb(238,160,17)" fg:x="114" fg:w="26"/><text x="13.6146%" y="255.50">all..</text></g><g><title>___workq_open (1 samples, 0.12%)</title><rect x="16.2954%" y="229" width="0.1172%" height="15" fill="rgb(214,148,48)" fg:x="139" fg:w="1"/><text x="16.5454%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.23%)</title><rect x="16.4127%" y="245" width="0.2345%" height="15" fill="rgb(232,36,49)" fg:x="140" fg:w="2"/><text x="16.6627%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.35%)</title><rect x="17.4678%" y="229" width="0.3517%" height="15" fill="rgb(209,103,24)" fg:x="149" fg:w="3"/><text x="17.7178%" y="239.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (4 samples, 0.47%)</title><rect x="21.4537%" y="213" width="0.4689%" height="15" fill="rgb(229,88,8)" fg:x="183" fg:w="4"/><text x="21.7037%" y="223.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.35%)</title><rect x="22.7433%" y="181" width="0.3517%" height="15" fill="rgb(213,181,19)" fg:x="194" fg:w="3"/><text x="22.9933%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.12%)</title><rect x="23.0950%" y="181" width="0.1172%" height="15" fill="rgb(254,191,54)" fg:x="197" fg:w="1"/><text x="23.3450%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.35%)</title><rect x="23.3294%" y="149" width="0.3517%" height="15" fill="rgb(241,83,37)" fg:x="199" fg:w="3"/><text x="23.5794%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.12%)</title><rect x="23.5639%" y="133" width="0.1172%" height="15" fill="rgb(233,36,39)" fg:x="201" fg:w="1"/><text x="23.8139%" y="143.50"></text></g><g><title>___workq_open (1 samples, 0.12%)</title><rect x="23.5639%" y="117" width="0.1172%" height="15" fill="rgb(226,3,54)" fg:x="201" fg:w="1"/><text x="23.8139%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (11 samples, 1.29%)</title><rect x="22.5088%" y="197" width="1.2896%" height="15" fill="rgb(245,192,40)" fg:x="192" fg:w="11"/><text x="22.7588%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.59%)</title><rect x="23.2122%" y="181" width="0.5862%" height="15" fill="rgb(238,167,29)" fg:x="198" fg:w="5"/><text x="23.4622%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.59%)</title><rect x="23.2122%" y="165" width="0.5862%" height="15" fill="rgb(232,182,51)" fg:x="198" fg:w="5"/><text x="23.4622%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.12%)</title><rect x="23.6811%" y="149" width="0.1172%" height="15" fill="rgb(231,60,39)" fg:x="202" fg:w="1"/><text x="23.9311%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.12%)</title><rect x="23.6811%" y="133" width="0.1172%" height="15" fill="rgb(208,69,12)" fg:x="202" fg:w="1"/><text x="23.9311%" y="143.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.12%)</title><rect x="23.6811%" y="117" width="0.1172%" height="15" fill="rgb(235,93,37)" fg:x="202" fg:w="1"/><text x="23.9311%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;octofhir_fhirpath::evaluator::context::EvaluationContext&gt; (101 samples, 11.84%)</title><rect x="12.7784%" y="373" width="11.8406%" height="15" fill="rgb(213,116,39)" fg:x="109" fg:w="101"/><text x="13.0284%" y="383.50">core::ptr::drop_in..</text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (101 samples, 11.84%)</title><rect x="12.7784%" y="357" width="11.8406%" height="15" fill="rgb(222,207,29)" fg:x="109" fg:w="101"/><text x="13.0284%" y="367.50">alloc::sync::Arc&lt;T..</text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (101 samples, 11.84%)</title><rect x="12.7784%" y="341" width="11.8406%" height="15" fill="rgb(206,96,30)" fg:x="109" fg:w="101"/><text x="13.0284%" y="351.50">alloc::sync::Arc&lt;T..</text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (101 samples, 11.84%)</title><rect x="12.7784%" y="325" width="11.8406%" height="15" fill="rgb(218,138,4)" fg:x="109" fg:w="101"/><text x="13.0284%" y="335.50">core::ptr::drop_in..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (101 samples, 11.84%)</title><rect x="12.7784%" y="309" width="11.8406%" height="15" fill="rgb(250,191,14)" fg:x="109" fg:w="101"/><text x="13.0284%" y="319.50">core::ptr::drop_in..</text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (101 samples, 11.84%)</title><rect x="12.7784%" y="293" width="11.8406%" height="15" fill="rgb(239,60,40)" fg:x="109" fg:w="101"/><text x="13.0284%" y="303.50">core::ptr::drop_in..</text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (101 samples, 11.84%)</title><rect x="12.7784%" y="277" width="11.8406%" height="15" fill="rgb(206,27,48)" fg:x="109" fg:w="101"/><text x="13.0284%" y="287.50">core::ptr::drop_in..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (101 samples, 11.84%)</title><rect x="12.7784%" y="261" width="11.8406%" height="15" fill="rgb(225,35,8)" fg:x="109" fg:w="101"/><text x="13.0284%" y="271.50">core::ptr::drop_in..</text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (68 samples, 7.97%)</title><rect x="16.6471%" y="245" width="7.9719%" height="15" fill="rgb(250,213,24)" fg:x="142" fg:w="68"/><text x="16.8971%" y="255.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (58 samples, 6.80%)</title><rect x="17.8195%" y="229" width="6.7995%" height="15" fill="rgb(247,123,22)" fg:x="152" fg:w="58"/><text x="18.0695%" y="239.50">core::ptr..</text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (23 samples, 2.70%)</title><rect x="21.9226%" y="213" width="2.6964%" height="15" fill="rgb(231,138,38)" fg:x="187" fg:w="23"/><text x="22.1726%" y="223.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.82%)</title><rect x="23.7984%" y="197" width="0.8206%" height="15" fill="rgb(231,145,46)" fg:x="203" fg:w="7"/><text x="24.0484%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.82%)</title><rect x="23.7984%" y="181" width="0.8206%" height="15" fill="rgb(251,118,11)" fg:x="203" fg:w="7"/><text x="24.0484%" y="191.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (32 samples, 3.75%)</title><rect x="26.3775%" y="197" width="3.7515%" height="15" fill="rgb(217,147,25)" fg:x="225" fg:w="32"/><text x="26.6275%" y="207.50">allo..</text></g><g><title>___workq_open (5 samples, 0.59%)</title><rect x="29.5428%" y="181" width="0.5862%" height="15" fill="rgb(247,81,37)" fg:x="252" fg:w="5"/><text x="29.7928%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.12%)</title><rect x="30.1290%" y="197" width="0.1172%" height="15" fill="rgb(209,12,38)" fg:x="257" fg:w="1"/><text x="30.3790%" y="207.50"></text></g><g><title>___workq_open (3 samples, 0.35%)</title><rect x="31.5358%" y="181" width="0.3517%" height="15" fill="rgb(227,1,9)" fg:x="269" fg:w="3"/><text x="31.7858%" y="191.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (9 samples, 1.06%)</title><rect x="31.8875%" y="181" width="1.0551%" height="15" fill="rgb(248,47,43)" fg:x="272" fg:w="9"/><text x="32.1375%" y="191.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.23%)</title><rect x="32.7081%" y="165" width="0.2345%" height="15" fill="rgb(221,10,30)" fg:x="279" fg:w="2"/><text x="32.9581%" y="175.50"></text></g><g><title>___workq_open (1 samples, 0.12%)</title><rect x="33.2943%" y="149" width="0.1172%" height="15" fill="rgb(210,229,1)" fg:x="284" fg:w="1"/><text x="33.5443%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.35%)</title><rect x="33.4115%" y="149" width="0.3517%" height="15" fill="rgb(222,148,37)" fg:x="285" fg:w="3"/><text x="33.6615%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.35%)</title><rect x="33.9977%" y="117" width="0.3517%" height="15" fill="rgb(234,67,33)" fg:x="290" fg:w="3"/><text x="34.2477%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (12 samples, 1.41%)</title><rect x="33.0598%" y="165" width="1.4068%" height="15" fill="rgb(247,98,35)" fg:x="282" fg:w="12"/><text x="33.3098%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.70%)</title><rect x="33.7632%" y="149" width="0.7034%" height="15" fill="rgb(247,138,52)" fg:x="288" fg:w="6"/><text x="34.0132%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.47%)</title><rect x="33.9977%" y="133" width="0.4689%" height="15" fill="rgb(213,79,30)" fg:x="290" fg:w="4"/><text x="34.2477%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.12%)</title><rect x="34.3494%" y="117" width="0.1172%" height="15" fill="rgb(246,177,23)" fg:x="293" fg:w="1"/><text x="34.5994%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.12%)</title><rect x="34.3494%" y="101" width="0.1172%" height="15" fill="rgb(230,62,27)" fg:x="293" fg:w="1"/><text x="34.5994%" y="111.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.12%)</title><rect x="34.3494%" y="85" width="0.1172%" height="15" fill="rgb(216,154,8)" fg:x="293" fg:w="1"/><text x="34.5994%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.82%)</title><rect x="34.4666%" y="149" width="0.8206%" height="15" fill="rgb(244,35,45)" fg:x="294" fg:w="7"/><text x="34.7166%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.12%)</title><rect x="35.1700%" y="133" width="0.1172%" height="15" fill="rgb(251,115,12)" fg:x="300" fg:w="1"/><text x="35.4200%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;octofhir_fhirpath::evaluator::context::EvaluationContext&gt; (92 samples, 10.79%)</title><rect x="24.6190%" y="293" width="10.7855%" height="15" fill="rgb(240,54,50)" fg:x="210" fg:w="92"/><text x="24.8690%" y="303.50">core::ptr::drop_..</text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (92 samples, 10.79%)</title><rect x="24.6190%" y="277" width="10.7855%" height="15" fill="rgb(233,84,52)" fg:x="210" fg:w="92"/><text x="24.8690%" y="287.50">alloc::sync::Arc..</text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (92 samples, 10.79%)</title><rect x="24.6190%" y="261" width="10.7855%" height="15" fill="rgb(207,117,47)" fg:x="210" fg:w="92"/><text x="24.8690%" y="271.50">alloc::sync::Arc..</text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (91 samples, 10.67%)</title><rect x="24.7362%" y="245" width="10.6682%" height="15" fill="rgb(249,43,39)" fg:x="211" fg:w="91"/><text x="24.9862%" y="255.50">alloc::sync::Arc..</text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (91 samples, 10.67%)</title><rect x="24.7362%" y="229" width="10.6682%" height="15" fill="rgb(209,38,44)" fg:x="211" fg:w="91"/><text x="24.9862%" y="239.50">core::ptr::drop_..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (91 samples, 10.67%)</title><rect x="24.7362%" y="213" width="10.6682%" height="15" fill="rgb(236,212,23)" fg:x="211" fg:w="91"/><text x="24.9862%" y="223.50">core::ptr::drop_..</text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (44 samples, 5.16%)</title><rect x="30.2462%" y="197" width="5.1583%" height="15" fill="rgb(242,79,21)" fg:x="258" fg:w="44"/><text x="30.4962%" y="207.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (21 samples, 2.46%)</title><rect x="32.9426%" y="181" width="2.4619%" height="15" fill="rgb(211,96,35)" fg:x="281" fg:w="21"/><text x="33.1926%" y="191.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.94%)</title><rect x="34.4666%" y="165" width="0.9379%" height="15" fill="rgb(253,215,40)" fg:x="294" fg:w="8"/><text x="34.7166%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.12%)</title><rect x="35.2872%" y="149" width="0.1172%" height="15" fill="rgb(211,81,21)" fg:x="301" fg:w="1"/><text x="35.5372%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.12%)</title><rect x="35.2872%" y="133" width="0.1172%" height="15" fill="rgb(208,190,38)" fg:x="301" fg:w="1"/><text x="35.5372%" y="143.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.12%)</title><rect x="35.2872%" y="117" width="0.1172%" height="15" fill="rgb(235,213,38)" fg:x="301" fg:w="1"/><text x="35.5372%" y="127.50"></text></g><g><title>&lt;octofhir_fhirpath::registry::functions::filtering::where::WhereFunction as octofhir_fhirpath::registry::function::LambdaFunction&gt;::evaluate_with_lambda::{{closure}} (1 samples, 0.12%)</title><rect x="35.5217%" y="245" width="0.1172%" height="15" fill="rgb(237,122,38)" fg:x="303" fg:w="1"/><text x="35.7717%" y="255.50"></text></g><g><title>octofhir_fhirpath::evaluator::engine::FhirPathEngine::evaluate_lambda_function_async::{{closure}}::{{closure}} (2 samples, 0.23%)</title><rect x="35.6389%" y="245" width="0.2345%" height="15" fill="rgb(244,218,35)" fg:x="304" fg:w="2"/><text x="35.8889%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;octofhir_fhirpath::evaluator::context::EvaluationContext&gt; (3 samples, 0.35%)</title><rect x="35.8734%" y="165" width="0.3517%" height="15" fill="rgb(240,68,47)" fg:x="306" fg:w="3"/><text x="36.1234%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;octofhir_fhirpath::evaluator::context::EvaluationContext&gt; (1 samples, 0.12%)</title><rect x="36.1079%" y="149" width="0.1172%" height="15" fill="rgb(210,16,53)" fg:x="308" fg:w="1"/><text x="36.3579%" y="159.50"></text></g><g><title>octofhir_fhirpath::evaluator::engine::FhirPathEngine::evaluate_method_call_direct_async::{{closure}} (1 samples, 0.12%)</title><rect x="36.2251%" y="165" width="0.1172%" height="15" fill="rgb(235,124,12)" fg:x="309" fg:w="1"/><text x="36.4751%" y="175.50"></text></g><g><title>octofhir_fhirpath::evaluator::context::EvaluationContext::with_input (1 samples, 0.12%)</title><rect x="36.2251%" y="149" width="0.1172%" height="15" fill="rgb(224,169,11)" fg:x="309" fg:w="1"/><text x="36.4751%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.12%)</title><rect x="36.2251%" y="133" width="0.1172%" height="15" fill="rgb(250,166,2)" fg:x="309" fg:w="1"/><text x="36.4751%" y="143.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.12%)</title><rect x="36.2251%" y="117" width="0.1172%" height="15" fill="rgb(242,216,29)" fg:x="309" fg:w="1"/><text x="36.4751%" y="127.50"></text></g><g><title>&lt;octofhir_fhirpath::model::value::FhirPathValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (2 samples, 0.23%)</title><rect x="36.3423%" y="117" width="0.2345%" height="15" fill="rgb(230,116,27)" fg:x="310" fg:w="2"/><text x="36.5923%" y="127.50"></text></g><g><title>chrono::naive::date::NaiveDate::parse_from_str (2 samples, 0.23%)</title><rect x="36.3423%" y="101" width="0.2345%" height="15" fill="rgb(228,99,48)" fg:x="310" fg:w="2"/><text x="36.5923%" y="111.50"></text></g><g><title>chrono::format::parse::parse_internal (2 samples, 0.23%)</title><rect x="36.3423%" y="85" width="0.2345%" height="15" fill="rgb(253,11,6)" fg:x="310" fg:w="2"/><text x="36.5923%" y="95.50"></text></g><g><title>chrono::format::parse::parse_internal (1 samples, 0.12%)</title><rect x="36.4596%" y="69" width="0.1172%" height="15" fill="rgb(247,143,39)" fg:x="311" fg:w="1"/><text x="36.7096%" y="79.50"></text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (1 samples, 0.12%)</title><rect x="36.5768%" y="117" width="0.1172%" height="15" fill="rgb(236,97,10)" fg:x="312" fg:w="1"/><text x="36.8268%" y="127.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.12%)</title><rect x="36.5768%" y="101" width="0.1172%" height="15" fill="rgb(233,208,19)" fg:x="312" fg:w="1"/><text x="36.8268%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.12%)</title><rect x="36.6940%" y="117" width="0.1172%" height="15" fill="rgb(216,164,2)" fg:x="313" fg:w="1"/><text x="36.9440%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.12%)</title><rect x="36.6940%" y="101" width="0.1172%" height="15" fill="rgb(220,129,5)" fg:x="313" fg:w="1"/><text x="36.9440%" y="111.50"></text></g><g><title>octofhir_fhirpath::evaluator::engine::FhirPathEngine::evaluate_identifier (153 samples, 17.94%)</title><rect x="36.8113%" y="117" width="17.9367%" height="15" fill="rgb(242,17,10)" fg:x="314" fg:w="153"/><text x="37.0613%" y="127.50">octofhir_fhirpath::evaluator..</text></g><g><title>octofhir_fhirpath::evaluator::engine::FhirPathEngine::evaluate_identifier (180 samples, 21.10%)</title><rect x="36.3423%" y="133" width="21.1020%" height="15" fill="rgb(242,107,0)" fg:x="310" fg:w="180"/><text x="36.5923%" y="143.50">octofhir_fhirpath::evaluator::eng..</text></g><g><title>octofhir_fhirpath::model::resource::FhirResource::get_property_with_name (23 samples, 2.70%)</title><rect x="54.7479%" y="117" width="2.6964%" height="15" fill="rgb(251,28,31)" fg:x="467" fg:w="23"/><text x="54.9979%" y="127.50">oc..</text></g><g><title>octofhir_fhirpath::evaluator::engine::FhirPathEngine::evaluate_literal (1 samples, 0.12%)</title><rect x="57.4443%" y="133" width="0.1172%" height="15" fill="rgb(233,223,10)" fg:x="490" fg:w="1"/><text x="57.6943%" y="143.50"></text></g><g><title>octofhir_fhirpath::evaluator::engine::FhirPathEngine::evaluate_literal (1 samples, 0.12%)</title><rect x="57.4443%" y="117" width="0.1172%" height="15" fill="rgb(215,21,27)" fg:x="490" fg:w="1"/><text x="57.6943%" y="127.50"></text></g><g><title>octofhir_fhirpath::evaluator::engine::FhirPathEngine::evaluate_method_call_direct_async::{{closure}} (214 samples, 25.09%)</title><rect x="35.4045%" y="293" width="25.0879%" height="15" fill="rgb(232,23,21)" fg:x="302" fg:w="214"/><text x="35.6545%" y="303.50">octofhir_fhirpath::evaluator::engine::Fh..</text></g><g><title>octofhir_fhirpath::evaluator::engine::FhirPathEngine::evaluate_function_call_async::{{closure}} (214 samples, 25.09%)</title><rect x="35.4045%" y="277" width="25.0879%" height="15" fill="rgb(244,5,23)" fg:x="302" fg:w="214"/><text x="35.6545%" y="287.50">octofhir_fhirpath::evaluator::engine::Fh..</text></g><g><title>&lt;octofhir_fhirpath::registry::functions::filtering::where::WhereFunction as octofhir_fhirpath::registry::function::LambdaFunction&gt;::evaluate_with_lambda::{{closure}} (214 samples, 25.09%)</title><rect x="35.4045%" y="261" width="25.0879%" height="15" fill="rgb(226,81,46)" fg:x="302" fg:w="214"/><text x="35.6545%" y="271.50">&lt;octofhir_fhirpath::registry::functions:..</text></g><g><title>octofhir_fhirpath::evaluator::engine::FhirPathEngine::evaluate_lambda_function_async::{{closure}}::{{closure}}::{{closure}} (210 samples, 24.62%)</title><rect x="35.8734%" y="245" width="24.6190%" height="15" fill="rgb(247,70,30)" fg:x="306" fg:w="210"/><text x="36.1234%" y="255.50">octofhir_fhirpath::evaluator::engine::F..</text></g><g><title>octofhir_fhirpath::evaluator::engine::FhirPathEngine::evaluate_with_context_threaded_async::{{closure}} (210 samples, 24.62%)</title><rect x="35.8734%" y="229" width="24.6190%" height="15" fill="rgb(212,68,19)" fg:x="306" fg:w="210"/><text x="36.1234%" y="239.50">octofhir_fhirpath::evaluator::engine::F..</text></g><g><title>octofhir_fhirpath::evaluator::engine::FhirPathEngine::evaluate_with_context_old_async::{{closure}} (210 samples, 24.62%)</title><rect x="35.8734%" y="213" width="24.6190%" height="15" fill="rgb(240,187,13)" fg:x="306" fg:w="210"/><text x="36.1234%" y="223.50">octofhir_fhirpath::evaluator::engine::F..</text></g><g><title>octofhir_fhirpath::evaluator::engine::FhirPathEngine::evaluate_with_context::{{closure}} (210 samples, 24.62%)</title><rect x="35.8734%" y="197" width="24.6190%" height="15" fill="rgb(223,113,26)" fg:x="306" fg:w="210"/><text x="36.1234%" y="207.50">octofhir_fhirpath::evaluator::engine::F..</text></g><g><title>octofhir_fhirpath::evaluator::engine::FhirPathEngine::evaluate_with_context_old_async::{{closure}} (210 samples, 24.62%)</title><rect x="35.8734%" y="181" width="24.6190%" height="15" fill="rgb(206,192,2)" fg:x="306" fg:w="210"/><text x="36.1234%" y="191.50">octofhir_fhirpath::evaluator::engine::F..</text></g><g><title>octofhir_fhirpath::evaluator::engine::FhirPathEngine::evaluate_with_context::{{closure}} (206 samples, 24.15%)</title><rect x="36.3423%" y="165" width="24.1501%" height="15" fill="rgb(241,108,4)" fg:x="310" fg:w="206"/><text x="36.5923%" y="175.50">octofhir_fhirpath::evaluator::engine::..</text></g><g><title>octofhir_fhirpath::evaluator::engine::FhirPathEngine::evaluate_with_context_old_async::{{closure}} (206 samples, 24.15%)</title><rect x="36.3423%" y="149" width="24.1501%" height="15" fill="rgb(247,173,49)" fg:x="310" fg:w="206"/><text x="36.5923%" y="159.50">octofhir_fhirpath::evaluator::engine::..</text></g><g><title>octofhir_fhirpath::evaluator::engine::FhirPathEngine::evaluate_with_context::{{closure}} (25 samples, 2.93%)</title><rect x="57.5615%" y="133" width="2.9308%" height="15" fill="rgb(224,114,35)" fg:x="491" fg:w="25"/><text x="57.8115%" y="143.50">oc..</text></g><g><title>octofhir_fhirpath::evaluator::engine::FhirPathEngine::evaluate_with_context_old_async::{{closure}} (25 samples, 2.93%)</title><rect x="57.5615%" y="117" width="2.9308%" height="15" fill="rgb(245,159,27)" fg:x="491" fg:w="25"/><text x="57.8115%" y="127.50">oc..</text></g><g><title>octofhir_fhirpath::evaluator::engine::FhirPathEngine::evaluate_identifier (25 samples, 2.93%)</title><rect x="57.5615%" y="101" width="2.9308%" height="15" fill="rgb(245,172,44)" fg:x="491" fg:w="25"/><text x="57.8115%" y="111.50">oc..</text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (25 samples, 2.93%)</title><rect x="57.5615%" y="85" width="2.9308%" height="15" fill="rgb(236,23,11)" fg:x="491" fg:w="25"/><text x="57.8115%" y="95.50">&lt;s..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (25 samples, 2.93%)</title><rect x="57.5615%" y="69" width="2.9308%" height="15" fill="rgb(205,117,38)" fg:x="491" fg:w="25"/><text x="57.8115%" y="79.50">&lt;a..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.12%)</title><rect x="60.3751%" y="53" width="0.1172%" height="15" fill="rgb(237,72,25)" fg:x="515" fg:w="1"/><text x="60.6251%" y="63.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (16 samples, 1.88%)</title><rect x="61.1958%" y="165" width="1.8757%" height="15" fill="rgb(244,70,9)" fg:x="522" fg:w="16"/><text x="61.4458%" y="175.50">a..</text></g><g><title>___workq_open (3 samples, 0.35%)</title><rect x="62.7198%" y="149" width="0.3517%" height="15" fill="rgb(217,125,39)" fg:x="535" fg:w="3"/><text x="62.9698%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.35%)</title><rect x="64.7128%" y="149" width="0.3517%" height="15" fill="rgb(235,36,10)" fg:x="552" fg:w="3"/><text x="64.9628%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (6 samples, 0.70%)</title><rect x="67.7608%" y="133" width="0.7034%" height="15" fill="rgb(251,123,47)" fg:x="578" fg:w="6"/><text x="68.0108%" y="143.50"></text></g><g><title>___workq_open (3 samples, 0.35%)</title><rect x="68.1125%" y="117" width="0.3517%" height="15" fill="rgb(221,13,13)" fg:x="581" fg:w="3"/><text x="68.3625%" y="127.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.12%)</title><rect x="69.6366%" y="101" width="0.1172%" height="15" fill="rgb(238,131,9)" fg:x="594" fg:w="1"/><text x="69.8866%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.12%)</title><rect x="69.7538%" y="101" width="0.1172%" height="15" fill="rgb(211,50,8)" fg:x="595" fg:w="1"/><text x="70.0038%" y="111.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.23%)</title><rect x="70.2227%" y="53" width="0.2345%" height="15" fill="rgb(245,182,24)" fg:x="599" fg:w="2"/><text x="70.4727%" y="63.50"></text></g><g><title>___workq_open (1 samples, 0.12%)</title><rect x="70.3400%" y="37" width="0.1172%" height="15" fill="rgb(242,14,37)" fg:x="600" fg:w="1"/><text x="70.5900%" y="47.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (12 samples, 1.41%)</title><rect x="69.1676%" y="117" width="1.4068%" height="15" fill="rgb(246,228,12)" fg:x="590" fg:w="12"/><text x="69.4176%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.70%)</title><rect x="69.8710%" y="101" width="0.7034%" height="15" fill="rgb(213,55,15)" fg:x="596" fg:w="6"/><text x="70.1210%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.59%)</title><rect x="69.9883%" y="85" width="0.5862%" height="15" fill="rgb(209,9,3)" fg:x="597" fg:w="5"/><text x="70.2383%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.59%)</title><rect x="69.9883%" y="69" width="0.5862%" height="15" fill="rgb(230,59,30)" fg:x="597" fg:w="5"/><text x="70.2383%" y="79.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.12%)</title><rect x="70.4572%" y="53" width="0.1172%" height="15" fill="rgb(209,121,21)" fg:x="601" fg:w="1"/><text x="70.7072%" y="63.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.12%)</title><rect x="71.2778%" y="85" width="0.1172%" height="15" fill="rgb(220,109,13)" fg:x="608" fg:w="1"/><text x="71.5278%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (8 samples, 0.94%)</title><rect x="70.5744%" y="101" width="0.9379%" height="15" fill="rgb(232,18,1)" fg:x="602" fg:w="8"/><text x="70.8244%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.12%)</title><rect x="71.3951%" y="85" width="0.1172%" height="15" fill="rgb(215,41,42)" fg:x="609" fg:w="1"/><text x="71.6451%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;octofhir_fhirpath::evaluator::context::EvaluationContext&gt; (96 samples, 11.25%)</title><rect x="60.4924%" y="261" width="11.2544%" height="15" fill="rgb(224,123,36)" fg:x="516" fg:w="96"/><text x="60.7424%" y="271.50">core::ptr::drop_i..</text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (96 samples, 11.25%)</title><rect x="60.4924%" y="245" width="11.2544%" height="15" fill="rgb(240,125,3)" fg:x="516" fg:w="96"/><text x="60.7424%" y="255.50">alloc::sync::Arc&lt;..</text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (95 samples, 11.14%)</title><rect x="60.6096%" y="229" width="11.1372%" height="15" fill="rgb(205,98,50)" fg:x="517" fg:w="95"/><text x="60.8596%" y="239.50">alloc::sync::Arc..</text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (93 samples, 10.90%)</title><rect x="60.8441%" y="213" width="10.9027%" height="15" fill="rgb(205,185,37)" fg:x="519" fg:w="93"/><text x="61.0941%" y="223.50">alloc::sync::Arc..</text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (93 samples, 10.90%)</title><rect x="60.8441%" y="197" width="10.9027%" height="15" fill="rgb(238,207,15)" fg:x="519" fg:w="93"/><text x="61.0941%" y="207.50">core::ptr::drop_..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (93 samples, 10.90%)</title><rect x="60.8441%" y="181" width="10.9027%" height="15" fill="rgb(213,199,42)" fg:x="519" fg:w="93"/><text x="61.0941%" y="191.50">core::ptr::drop_..</text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (74 samples, 8.68%)</title><rect x="63.0715%" y="165" width="8.6753%" height="15" fill="rgb(235,201,11)" fg:x="538" fg:w="74"/><text x="63.3215%" y="175.50">core::ptr::d..</text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (57 samples, 6.68%)</title><rect x="65.0645%" y="149" width="6.6823%" height="15" fill="rgb(207,46,11)" fg:x="555" fg:w="57"/><text x="65.3145%" y="159.50">core::ptr..</text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (28 samples, 3.28%)</title><rect x="68.4642%" y="133" width="3.2825%" height="15" fill="rgb(241,35,35)" fg:x="584" fg:w="28"/><text x="68.7142%" y="143.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (10 samples, 1.17%)</title><rect x="70.5744%" y="117" width="1.1723%" height="15" fill="rgb(243,32,47)" fg:x="602" fg:w="10"/><text x="70.8244%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.23%)</title><rect x="71.5123%" y="101" width="0.2345%" height="15" fill="rgb(247,202,23)" fg:x="610" fg:w="2"/><text x="71.7623%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.23%)</title><rect x="71.5123%" y="85" width="0.2345%" height="15" fill="rgb(219,102,11)" fg:x="610" fg:w="2"/><text x="71.7623%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.12%)</title><rect x="71.6295%" y="69" width="0.1172%" height="15" fill="rgb(243,110,44)" fg:x="611" fg:w="1"/><text x="71.8795%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.12%)</title><rect x="71.8640%" y="245" width="0.1172%" height="15" fill="rgb(222,74,54)" fg:x="613" fg:w="1"/><text x="72.1140%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.12%)</title><rect x="71.8640%" y="229" width="0.1172%" height="15" fill="rgb(216,99,12)" fg:x="613" fg:w="1"/><text x="72.1140%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (3 samples, 0.35%)</title><rect x="73.7397%" y="197" width="0.3517%" height="15" fill="rgb(226,22,26)" fg:x="629" fg:w="3"/><text x="73.9897%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.35%)</title><rect x="73.7397%" y="181" width="0.3517%" height="15" fill="rgb(217,163,10)" fg:x="629" fg:w="3"/><text x="73.9897%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.12%)</title><rect x="73.9742%" y="165" width="0.1172%" height="15" fill="rgb(213,25,53)" fg:x="631" fg:w="1"/><text x="74.2242%" y="175.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (1 samples, 0.12%)</title><rect x="73.9742%" y="149" width="0.1172%" height="15" fill="rgb(252,105,26)" fg:x="631" fg:w="1"/><text x="74.2242%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.12%)</title><rect x="73.9742%" y="133" width="0.1172%" height="15" fill="rgb(220,39,43)" fg:x="631" fg:w="1"/><text x="74.2242%" y="143.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (6 samples, 0.70%)</title><rect x="77.8429%" y="149" width="0.7034%" height="15" fill="rgb(229,68,48)" fg:x="664" fg:w="6"/><text x="78.0929%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (6 samples, 0.70%)</title><rect x="77.8429%" y="133" width="0.7034%" height="15" fill="rgb(252,8,32)" fg:x="664" fg:w="6"/><text x="78.0929%" y="143.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (16 samples, 1.88%)</title><rect x="76.7878%" y="181" width="1.8757%" height="15" fill="rgb(223,20,43)" fg:x="655" fg:w="16"/><text x="77.0378%" y="191.50">&lt;..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (15 samples, 1.76%)</title><rect x="76.9050%" y="165" width="1.7585%" height="15" fill="rgb(229,81,49)" fg:x="656" fg:w="15"/><text x="77.1550%" y="175.50"></text></g><g><title>__kernelrpc_mach_vm_allocate_trap (1 samples, 0.12%)</title><rect x="78.5463%" y="149" width="0.1172%" height="15" fill="rgb(236,28,36)" fg:x="670" fg:w="1"/><text x="78.7963%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (8 samples, 0.94%)</title><rect x="82.2978%" y="149" width="0.9379%" height="15" fill="rgb(249,185,26)" fg:x="702" fg:w="8"/><text x="82.5478%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.35%)</title><rect x="82.8839%" y="133" width="0.3517%" height="15" fill="rgb(249,174,33)" fg:x="707" fg:w="3"/><text x="83.1339%" y="143.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (11 samples, 1.29%)</title><rect x="82.1805%" y="165" width="1.2896%" height="15" fill="rgb(233,201,37)" fg:x="701" fg:w="11"/><text x="82.4305%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.23%)</title><rect x="83.2356%" y="149" width="0.2345%" height="15" fill="rgb(221,78,26)" fg:x="710" fg:w="2"/><text x="83.4856%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (44 samples, 5.16%)</title><rect x="78.6635%" y="181" width="5.1583%" height="15" fill="rgb(250,127,30)" fg:x="671" fg:w="44"/><text x="78.9135%" y="191.50">&lt;alloc..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.35%)</title><rect x="83.4701%" y="165" width="0.3517%" height="15" fill="rgb(230,49,44)" fg:x="712" fg:w="3"/><text x="83.7201%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (104 samples, 12.19%)</title><rect x="71.9812%" y="213" width="12.1923%" height="15" fill="rgb(229,67,23)" fg:x="614" fg:w="104"/><text x="72.2312%" y="223.50">&lt;alloc::collection..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (86 samples, 10.08%)</title><rect x="74.0914%" y="197" width="10.0821%" height="15" fill="rgb(249,83,47)" fg:x="632" fg:w="86"/><text x="74.3414%" y="207.50">&lt;alloc::collect..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.35%)</title><rect x="83.8218%" y="181" width="0.3517%" height="15" fill="rgb(215,43,3)" fg:x="715" fg:w="3"/><text x="84.0718%" y="191.50"></text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (119 samples, 13.95%)</title><rect x="71.9812%" y="229" width="13.9508%" height="15" fill="rgb(238,154,13)" fg:x="614" fg:w="119"/><text x="72.2312%" y="239.50">&lt;serde_json::value::V..</text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (15 samples, 1.76%)</title><rect x="84.1735%" y="213" width="1.7585%" height="15" fill="rgb(219,56,2)" fg:x="718" fg:w="15"/><text x="84.4235%" y="223.50"></text></g><g><title>octofhir_fhirpath::evaluator::engine::FhirPathEngine::evaluate_identifier (126 samples, 14.77%)</title><rect x="71.7468%" y="261" width="14.7714%" height="15" fill="rgb(233,0,4)" fg:x="612" fg:w="126"/><text x="71.9968%" y="271.50">octofhir_fhirpath::eval..</text></g><g><title>octofhir_fhirpath::evaluator::engine::FhirPathEngine::evaluate_identifier (124 samples, 14.54%)</title><rect x="71.9812%" y="245" width="14.5369%" height="15" fill="rgb(235,30,7)" fg:x="614" fg:w="124"/><text x="72.2312%" y="255.50">octofhir_fhirpath::eva..</text></g><g><title>octofhir_fhirpath::evaluator::engine::FhirPathEngine::evaluate_identifier (5 samples, 0.59%)</title><rect x="85.9320%" y="229" width="0.5862%" height="15" fill="rgb(250,79,13)" fg:x="733" fg:w="5"/><text x="86.1820%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (2 samples, 0.23%)</title><rect x="88.9801%" y="181" width="0.2345%" height="15" fill="rgb(211,146,34)" fg:x="759" fg:w="2"/><text x="89.2301%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.23%)</title><rect x="88.9801%" y="165" width="0.2345%" height="15" fill="rgb(228,22,38)" fg:x="759" fg:w="2"/><text x="89.2301%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.12%)</title><rect x="89.0973%" y="149" width="0.1172%" height="15" fill="rgb(235,168,5)" fg:x="760" fg:w="1"/><text x="89.3473%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.12%)</title><rect x="89.0973%" y="133" width="0.1172%" height="15" fill="rgb(221,155,16)" fg:x="760" fg:w="1"/><text x="89.3473%" y="143.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (7 samples, 0.82%)</title><rect x="93.5522%" y="133" width="0.8206%" height="15" fill="rgb(215,215,53)" fg:x="798" fg:w="7"/><text x="93.8022%" y="143.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (6 samples, 0.70%)</title><rect x="93.6694%" y="117" width="0.7034%" height="15" fill="rgb(223,4,10)" fg:x="799" fg:w="6"/><text x="93.9194%" y="127.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.23%)</title><rect x="94.1383%" y="101" width="0.2345%" height="15" fill="rgb(234,103,6)" fg:x="803" fg:w="2"/><text x="94.3883%" y="111.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.23%)</title><rect x="94.3728%" y="133" width="0.2345%" height="15" fill="rgb(227,97,0)" fg:x="805" fg:w="2"/><text x="94.6228%" y="143.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.12%)</title><rect x="94.4900%" y="117" width="0.1172%" height="15" fill="rgb(234,150,53)" fg:x="806" fg:w="1"/><text x="94.7400%" y="127.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (28 samples, 3.28%)</title><rect x="91.9109%" y="149" width="3.2825%" height="15" fill="rgb(228,201,54)" fg:x="784" fg:w="28"/><text x="92.1609%" y="159.50">&lt;al..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (5 samples, 0.59%)</title><rect x="94.6073%" y="133" width="0.5862%" height="15" fill="rgb(222,22,37)" fg:x="807" fg:w="5"/><text x="94.8573%" y="143.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (29 samples, 3.40%)</title><rect x="91.9109%" y="165" width="3.3998%" height="15" fill="rgb(237,53,32)" fg:x="784" fg:w="29"/><text x="92.1609%" y="175.50">&lt;T ..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.12%)</title><rect x="95.1934%" y="149" width="0.1172%" height="15" fill="rgb(233,25,53)" fg:x="812" fg:w="1"/><text x="95.4434%" y="159.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (7 samples, 0.82%)</title><rect x="97.6553%" y="149" width="0.8206%" height="15" fill="rgb(210,40,34)" fg:x="833" fg:w="7"/><text x="97.9053%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (7 samples, 0.82%)</title><rect x="97.6553%" y="133" width="0.8206%" height="15" fill="rgb(241,220,44)" fg:x="833" fg:w="7"/><text x="97.9053%" y="143.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (4 samples, 0.47%)</title><rect x="98.0070%" y="117" width="0.4689%" height="15" fill="rgb(235,28,35)" fg:x="836" fg:w="4"/><text x="98.2570%" y="127.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.12%)</title><rect x="98.4760%" y="149" width="0.1172%" height="15" fill="rgb(210,56,17)" fg:x="840" fg:w="1"/><text x="98.7260%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.35%)</title><rect x="98.5932%" y="149" width="0.3517%" height="15" fill="rgb(224,130,29)" fg:x="841" fg:w="3"/><text x="98.8432%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (33 samples, 3.87%)</title><rect x="95.3107%" y="165" width="3.8687%" height="15" fill="rgb(235,212,8)" fg:x="813" fg:w="33"/><text x="95.5607%" y="175.50">&lt;all..</text></g><g><title>__kernelrpc_mach_vm_allocate_trap (2 samples, 0.23%)</title><rect x="98.9449%" y="149" width="0.2345%" height="15" fill="rgb(223,33,50)" fg:x="844" fg:w="2"/><text x="99.1949%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (90 samples, 10.55%)</title><rect x="89.2145%" y="181" width="10.5510%" height="15" fill="rgb(219,149,13)" fg:x="761" fg:w="90"/><text x="89.4645%" y="191.50">&lt;alloc::collect..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (5 samples, 0.59%)</title><rect x="99.1794%" y="165" width="0.5862%" height="15" fill="rgb(250,156,29)" fg:x="846" fg:w="5"/><text x="99.4294%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (114 samples, 13.36%)</title><rect x="86.5182%" y="213" width="13.3646%" height="15" fill="rgb(216,193,19)" fg:x="738" fg:w="114"/><text x="86.7682%" y="223.50">&lt;alloc::collections:..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (107 samples, 12.54%)</title><rect x="87.3388%" y="197" width="12.5440%" height="15" fill="rgb(216,135,14)" fg:x="745" fg:w="107"/><text x="87.5888%" y="207.50">&lt;alloc::collections..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.12%)</title><rect x="99.7655%" y="181" width="0.1172%" height="15" fill="rgb(241,47,5)" fg:x="851" fg:w="1"/><text x="100.0155%" y="191.50"></text></g><g><title>all (853 samples, 100%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(233,42,35)" fg:x="0" fg:w="853"/><text x="0.2500%" y="527.50"></text></g><g><title>8688393984 (853 samples, 100.00%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(231,13,6)" fg:x="0" fg:w="853"/><text x="0.2500%" y="511.50">8688393984</text></g><g><title>_main (853 samples, 100.00%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(207,181,40)" fg:x="0" fg:w="853"/><text x="0.2500%" y="495.50">_main</text></g><g><title>std::rt::lang_start_internal (853 samples, 100.00%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(254,173,49)" fg:x="0" fg:w="853"/><text x="0.2500%" y="479.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (853 samples, 100.00%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(221,1,38)" fg:x="0" fg:w="853"/><text x="0.2500%" y="463.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (853 samples, 100.00%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(206,124,46)" fg:x="0" fg:w="853"/><text x="0.2500%" y="447.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>flamegraph_baseline::main (853 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(249,21,11)" fg:x="0" fg:w="853"/><text x="0.2500%" y="431.50">flamegraph_baseline::main</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (853 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(222,201,40)" fg:x="0" fg:w="853"/><text x="0.2500%" y="415.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (853 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(235,61,29)" fg:x="0" fg:w="853"/><text x="0.2500%" y="399.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>octofhir_fhirpath::evaluator::engine::FhirPathEngine::evaluate_with_context_old_async::{{closure}} (643 samples, 75.38%)</title><rect x="24.6190%" y="373" width="75.3810%" height="15" fill="rgb(219,207,3)" fg:x="210" fg:w="643"/><text x="24.8690%" y="383.50">octofhir_fhirpath::evaluator::engine::FhirPathEngine::evaluate_with_context_old_async::{{closure}}</text></g><g><title>octofhir_fhirpath::evaluator::engine::FhirPathEngine::evaluate_with_context::{{closure}} (643 samples, 75.38%)</title><rect x="24.6190%" y="357" width="75.3810%" height="15" fill="rgb(222,56,46)" fg:x="210" fg:w="643"/><text x="24.8690%" y="367.50">octofhir_fhirpath::evaluator::engine::FhirPathEngine::evaluate_with_context::{{closure}}</text></g><g><title>octofhir_fhirpath::evaluator::engine::FhirPathEngine::evaluate_with_context_old_async::{{closure}} (643 samples, 75.38%)</title><rect x="24.6190%" y="341" width="75.3810%" height="15" fill="rgb(239,76,54)" fg:x="210" fg:w="643"/><text x="24.8690%" y="351.50">octofhir_fhirpath::evaluator::engine::FhirPathEngine::evaluate_with_context_old_async::{{closure}}</text></g><g><title>octofhir_fhirpath::evaluator::engine::FhirPathEngine::evaluate_with_context::{{closure}} (643 samples, 75.38%)</title><rect x="24.6190%" y="325" width="75.3810%" height="15" fill="rgb(231,124,27)" fg:x="210" fg:w="643"/><text x="24.8690%" y="335.50">octofhir_fhirpath::evaluator::engine::FhirPathEngine::evaluate_with_context::{{closure}}</text></g><g><title>octofhir_fhirpath::evaluator::engine::FhirPathEngine::evaluate_with_context_old_async::{{closure}} (643 samples, 75.38%)</title><rect x="24.6190%" y="309" width="75.3810%" height="15" fill="rgb(249,195,6)" fg:x="210" fg:w="643"/><text x="24.8690%" y="319.50">octofhir_fhirpath::evaluator::engine::FhirPathEngine::evaluate_with_context_old_async::{{closure}}</text></g><g><title>octofhir_fhirpath::evaluator::engine::FhirPathEngine::evaluate_with_context::{{closure}} (337 samples, 39.51%)</title><rect x="60.4924%" y="293" width="39.5076%" height="15" fill="rgb(237,174,47)" fg:x="516" fg:w="337"/><text x="60.7424%" y="303.50">octofhir_fhirpath::evaluator::engine::FhirPathEngine::evaluate_w..</text></g><g><title>octofhir_fhirpath::evaluator::engine::FhirPathEngine::evaluate_with_context_old_async::{{closure}} (337 samples, 39.51%)</title><rect x="60.4924%" y="277" width="39.5076%" height="15" fill="rgb(206,201,31)" fg:x="516" fg:w="337"/><text x="60.7424%" y="287.50">octofhir_fhirpath::evaluator::engine::FhirPathEngine::evaluate_w..</text></g><g><title>octofhir_fhirpath::evaluator::engine::FhirPathEngine::evaluate_with_context::{{closure}} (115 samples, 13.48%)</title><rect x="86.5182%" y="261" width="13.4818%" height="15" fill="rgb(231,57,52)" fg:x="738" fg:w="115"/><text x="86.7682%" y="271.50">octofhir_fhirpath::e..</text></g><g><title>octofhir_fhirpath::evaluator::engine::FhirPathEngine::evaluate_with_context_old_async::{{closure}} (115 samples, 13.48%)</title><rect x="86.5182%" y="245" width="13.4818%" height="15" fill="rgb(248,177,22)" fg:x="738" fg:w="115"/><text x="86.7682%" y="255.50">octofhir_fhirpath::e..</text></g><g><title>octofhir_fhirpath::evaluator::engine::FhirPathEngine::evaluate_identifier (115 samples, 13.48%)</title><rect x="86.5182%" y="229" width="13.4818%" height="15" fill="rgb(215,211,37)" fg:x="738" fg:w="115"/><text x="86.7682%" y="239.50">octofhir_fhirpath::e..</text></g><g><title>octofhir_fhirpath::model::resource::FhirResource::from_json (1 samples, 0.12%)</title><rect x="99.8828%" y="213" width="0.1172%" height="15" fill="rgb(241,128,51)" fg:x="852" fg:w="1"/><text x="100.1328%" y="223.50"></text></g></svg></svg>