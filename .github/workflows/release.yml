name: Release

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

env:
  CARGO_TERM_COLOR: always

jobs:
  # Step 1: Build binaries first
  build-binaries:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            postfix: linux-x64
          - os: macos-latest
            target: x86_64-apple-darwin
            postfix: macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            postfix: macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            postfix: windows-x64

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          # Configure git for Windows line endings
          autocrlf: false

      - name: Install Node.js and pnpm
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "release-binary"
          shared-key: "binary-${{ matrix.target }}"
          cache-targets: true
          cache-on-failure: true

      - name: Configure Windows build (avoid LNK1318)
        if: matrix.os == 'windows-latest'
        run: |
          echo "CARGO_PROFILE_DEV_DEBUG=0" >> $env:GITHUB_ENV
          echo "CARGO_PROFILE_TEST_DEBUG=0" >> $env:GITHUB_ENV
          echo "CARGO_PROFILE_RELEASE_DEBUG=0" >> $env:GITHUB_ENV
          echo "CARGO_PROFILE_DEV_STRIP=symbols" >> $env:GITHUB_ENV
          echo "CARGO_PROFILE_TEST_STRIP=symbols" >> $env:GITHUB_ENV
          echo "CARGO_PROFILE_RELEASE_STRIP=symbols" >> $env:GITHUB_ENV
          echo "RUSTFLAGS=-C debuginfo=0 -C strip=symbols -C link-arg=/DEBUG:NONE" >> $env:GITHUB_ENV
          echo "CARGO_TARGET_X86_64_PC_WINDOWS_MSVC_RUSTFLAGS=-C debuginfo=0 -C strip=symbols -C link-arg=/DEBUG:NONE" >> $env:GITHUB_ENV

      - name: Install build dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --workspace --all-targets --all-features --exclude fhirpath-dev-tools
        env:
          # Windows-specific: Completely disable debug info to avoid LNK1318 errors
          CARGO_PROFILE_DEV_DEBUG: ${{ matrix.os == 'windows-latest' && '0' || '2' }}
          CARGO_PROFILE_TEST_DEBUG: ${{ matrix.os == 'windows-latest' && '0' || '2' }}
          CARGO_PROFILE_DEV_STRIP: ${{ matrix.os == 'windows-latest' && 'symbols' || 'none' }}
          CARGO_PROFILE_TEST_STRIP: ${{ matrix.os == 'windows-latest' && 'symbols' || 'none' }}
          CARGO_TARGET_X86_64_PC_WINDOWS_MSVC_RUSTFLAGS: ${{ matrix.os == 'windows-latest' && '-C debuginfo=0 -C strip=symbols -C link-arg=/DEBUG:NONE' || '' }}
          RUSTFLAGS: ${{ matrix.os == 'windows-latest' && '-C debuginfo=0 -C strip=symbols -C link-arg=/DEBUG:NONE' || '' }}

      - name: Run tests (Windows - no doctests)
        if: matrix.os == 'windows-latest'
        run: cargo test --workspace --all-features --exclude fhirpath-dev-tools --lib --bins
        env:
          # Windows-specific: Completely disable debug info to avoid LNK1318 errors
          CARGO_PROFILE_DEV_DEBUG: ${{ matrix.os == 'windows-latest' && '0' || '2' }}
          CARGO_PROFILE_TEST_DEBUG: ${{ matrix.os == 'windows-latest' && '0' || '2' }}
          CARGO_PROFILE_DEV_STRIP: ${{ matrix.os == 'windows-latest' && 'symbols' || 'none' }}
          CARGO_PROFILE_TEST_STRIP: ${{ matrix.os == 'windows-latest' && 'symbols' || 'none' }}
          CARGO_TARGET_X86_64_PC_WINDOWS_MSVC_RUSTFLAGS: ${{ matrix.os == 'windows-latest' && '-C debuginfo=0 -C strip=symbols -C link-arg=/DEBUG:NONE' || '' }}
          RUSTFLAGS: ${{ matrix.os == 'windows-latest' && '-C debuginfo=0 -C strip=symbols -C link-arg=/DEBUG:NONE' || '' }}

      - name: Run tests (Non-Windows - with doctests)
        if: matrix.os != 'windows-latest'
        run: cargo test --workspace --all-features --exclude fhirpath-dev-tools

      - name: Build fhirpath-cli binary
        run: |
          cargo build --release --target ${{ matrix.target }} --package fhirpath-cli
        env:
          # Windows-specific: Completely disable debug info to avoid LNK1318 errors
          CARGO_PROFILE_DEV_DEBUG: ${{ matrix.os == 'windows-latest' && '0' || '2' }}
          CARGO_PROFILE_RELEASE_DEBUG: ${{ matrix.os == 'windows-latest' && '0' || '2' }}
          CARGO_PROFILE_DEV_STRIP: ${{ matrix.os == 'windows-latest' && 'symbols' || 'none' }}
          CARGO_PROFILE_RELEASE_STRIP: ${{ matrix.os == 'windows-latest' && 'symbols' || 'none' }}
          CARGO_TARGET_X86_64_PC_WINDOWS_MSVC_RUSTFLAGS: ${{ matrix.os == 'windows-latest' && '-C debuginfo=0 -C strip=symbols -C link-arg=/DEBUG:NONE' || '' }}
          RUSTFLAGS: ${{ matrix.os == 'windows-latest' && '-C debuginfo=0 -C strip=symbols -C link-arg=/DEBUG:NONE' || '' }}

      - name: Prepare binary for release (Unix)
        if: runner.os != 'Windows'
        run: |
          mkdir -p release-artifacts
          cp target/${{ matrix.target }}/release/octofhir-fhirpath release-artifacts/octofhir-fhirpath-${{ matrix.postfix }}
          chmod +x release-artifacts/octofhir-fhirpath-${{ matrix.postfix }}

      - name: Prepare binary for release (Windows)
        if: runner.os == 'Windows'
        run: |
          mkdir release-artifacts
          copy target\${{ matrix.target }}\release\octofhir-fhirpath.exe release-artifacts\octofhir-fhirpath-${{ matrix.postfix }}.exe

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.postfix }}
          path: release-artifacts/*

  # Step 2: Create GitHub release with binaries
  create-github-release:
    needs: build-binaries
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      release-id: ${{ steps.create-release.outputs.id }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          # Configure git for Windows line endings
          autocrlf: false

      - name: Configure git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Bump version
        id: version
        run: |
          # Get current version before bumping
          CURRENT_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          echo "Current version: $CURRENT_VERSION"

          # Calculate new version based on input
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          case "${{ github.event.inputs.version_bump }}" in
            "major")
              NEW_MAJOR=$((MAJOR + 1))
              NEW_VERSION="${NEW_MAJOR}.0.0"
              ;;
            "minor")
              NEW_MINOR=$((MINOR + 1))
              NEW_VERSION="${MAJOR}.${NEW_MINOR}.0"
              ;;
            "patch")
              NEW_PATCH=$((PATCH + 1))
              NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
              ;;
          esac

          # Update version in workspace Cargo.toml
          sed -i "s/^version = \".*\"/version = \"$NEW_VERSION\"/" Cargo.toml

          echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "Bumped version from $CURRENT_VERSION to $NEW_VERSION"

      - name: Download all binary artifacts
        uses: actions/download-artifact@v5
        with:
          pattern: binary-*
          merge-multiple: true
          path: release-artifacts

      - name: Create GitHub release
        id: create-release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body: |
            🚀 **Release ${{ steps.version.outputs.version }}** - Manual release from main branch

            **Commit:** ${{ github.sha }}
            **Version:** ${{ steps.version.outputs.version }}
            **Branch:** ${{ github.ref_name }}
            **Bump Type:** ${{ github.event.inputs.version_bump }}

            ## Available Binaries
            - `octofhir-fhirpath-linux-x64` - Linux x86_64 (glibc)
            - `octofhir-fhirpath-macos-x64` - macOS Intel
            - `octofhir-fhirpath-macos-arm64` - macOS Apple Silicon
            - `octofhir-fhirpath-windows-x64.exe` - Windows x86_64

            ## Crates.io
            The `octofhir-fhirpath` crate will be published to crates.io with version `${{ steps.version.outputs.version }}`
          prerelease: false
          generate_release_notes: false
          files: |
            release-artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Step 3: Try to publish to crates.io - if this fails, cleanup will run
  publish-crate:
    needs: create-github-release
    runs-on: ubuntu-latest
    outputs:
      publish-success: ${{ steps.publish.outputs.success }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          # Configure git for Windows line endings
          autocrlf: false

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install Node.js and pnpm
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "release-publish"
          shared-key: "publish-crate"
          cache-targets: true
          cache-on-failure: true

      - name: Configure git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Update version for publishing
        run: |
          # Update version in workspace Cargo.toml
          sed -i "s/^version = \".*\"/version = \"${{ needs.create-github-release.outputs.version }}\"/" Cargo.toml

      - name: Build octofhir-fhirpath crate
        run: cargo build --release --package octofhir-fhirpath
        env:
          # Windows-specific: Completely disable debug info to avoid LNK1318 errors
          CARGO_PROFILE_DEV_DEBUG: ${{ runner.os == 'Windows' && '0' || '2' }}
          CARGO_PROFILE_RELEASE_DEBUG: ${{ runner.os == 'Windows' && '0' || '2' }}
          CARGO_PROFILE_DEV_STRIP: ${{ runner.os == 'Windows' && 'symbols' || 'none' }}
          CARGO_PROFILE_RELEASE_STRIP: ${{ runner.os == 'Windows' && 'symbols' || 'none' }}
          CARGO_TARGET_X86_64_PC_WINDOWS_MSVC_RUSTFLAGS: ${{ runner.os == 'Windows' && '-C debuginfo=0 -C strip=symbols -C link-arg=/DEBUG:NONE' || '' }}
          RUSTFLAGS: ${{ runner.os == 'Windows' && '-C debuginfo=0 -C strip=symbols -C link-arg=/DEBUG:NONE' || '' }}

      - name: Test publishing octofhir-fhirpath (dry run)
        run: |
          echo "🧪 Testing publishing octofhir-fhirpath with dry run..."
          cd crates/octofhir-fhirpath
          cargo publish --dry-run

      - name: Publish octofhir-fhirpath to crates.io
        id: publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          echo "🚀 Publishing octofhir-fhirpath to crates.io..."
          echo "Version: ${{ needs.create-github-release.outputs.version }}"
          echo "Current commit: $(git rev-parse HEAD)"
          echo "Current branch: $(git branch --show-current)"

          # Publish octofhir-fhirpath crate only (allow dirty since we modified version)
          cd crates/octofhir-fhirpath

          # Try to publish - capture exit code
          if cargo publish --token $CARGO_REGISTRY_TOKEN --allow-dirty; then
            echo "✅ Publishing successful!"
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Publishing failed!"
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Commit and push version bump (only on success)
        if: steps.publish.outputs.success == 'true'
        run: |
          echo "📝 Committing version bump to ${{ needs.create-github-release.outputs.version }}"
          git add -A
          git commit -m "chore: bump version to ${{ needs.create-github-release.outputs.version }} for release [ci skip]"

          echo "📤 Pushing version bump to remote"
          git push origin main

  # Step 4: Cleanup on failure - remove GitHub release and binaries
  cleanup-on-failure:
    needs: [create-github-release, publish-crate]
    runs-on: ubuntu-latest
    if: always() && needs.publish-crate.result == 'failure'

    steps:
      - name: Delete GitHub release on publish failure
        uses: actions/github-script@v7
        with:
          script: |
            console.log('Publishing failed, cleaning up GitHub release...');

            try {
              // Delete the release
              await github.rest.repos.deleteRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: '${{ needs.create-github-release.outputs.release-id }}'
              });
              console.log('✅ Successfully deleted GitHub release');

              // Delete the tag
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'tags/v${{ needs.create-github-release.outputs.version }}'
              });
              console.log('✅ Successfully deleted tag');

            } catch (error) {
              console.error('❌ Error during cleanup:', error);
              core.setFailed(`Cleanup failed: ${error.message}`);
            }

  # Final status job
  release-status:
    needs: [create-github-release, publish-crate, cleanup-on-failure]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Report release status
        run: |
          if [[ "${{ needs.publish-crate.result }}" == "success" ]]; then
            echo "🎉 Release ${{ needs.create-github-release.outputs.version }} completed successfully!"
            echo "✅ GitHub release created with binaries"
            echo "✅ Crate published to crates.io"
            echo "✅ Version bump committed to repository"
          else
            echo "❌ Release ${{ needs.create-github-release.outputs.version }} failed"
            if [[ "${{ needs.cleanup-on-failure.result }}" == "success" ]]; then
              echo "✅ Cleanup completed - GitHub release and tag removed"
            else
              echo "⚠️  Cleanup may have failed - manual intervention might be needed"
            fi
          fi