name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable, beta]
        exclude:
          # Reduce CI load - only test stable on non-Linux platforms
          - os: windows-latest
            rust: beta
          - os: macos-latest
            rust: beta

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          # Cache key prefix for this workflow
          prefix-key: "ci-${{ matrix.os }}-${{ matrix.rust }}"
          # Additional cache key components
          key: ${{ hashFiles('**/Cargo.lock') }}
          # Cache all target dirs, registry, and git repos
          cache-targets: true
          cache-on-failure: true

      - name: Check formatting
        if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
        run: cargo fmt --all -- --check

      - name: Run clippy
        if: matrix.rust == 'stable'
        run: cargo clippy --workspace --all-targets --all-features

      - name: Build workspace
        run: cargo build --verbose --workspace

      - name: Run tests
        run: cargo test --verbose --workspace --all-features

      - name: Run tests (release mode)
        run: cargo test --release --verbose --workspace

      - name: Run benchmarks (quick check)
        if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
        run: |
          echo "🚀 Running quick benchmark check..."
          timeout 300 cargo bench --package fhirpath-benchmarks || echo "⚠️ Benchmark timed out after 5 minutes"

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          # Cache key prefix for this workflow
          prefix-key: "coverage"
          # Additional cache key components
          key: ${{ hashFiles('**/Cargo.lock') }}
          # Cache all target dirs, registry, and git repos
          cache-targets: true
          cache-on-failure: true

      - name: Cache cargo tools
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin
          key: ${{ runner.os }}-cargo-tools-tarpaulin-${{ hashFiles('~/.cargo/bin/cargo-tarpaulin') }}
          restore-keys: |
            ${{ runner.os }}-cargo-tools-tarpaulin-
            ${{ runner.os }}-cargo-tools-

      - name: Install cargo-tarpaulin
        run: |
          if ! command -v cargo-tarpaulin &> /dev/null; then
            cargo install cargo-tarpaulin
          else
            echo "cargo-tarpaulin already installed"
          fi

      - name: Generate code coverage
        run: |
          cargo tarpaulin --all-features --workspace --timeout 300 --out html
          echo "Code coverage report generated in target/tarpaulin/tarpaulin-report.html"

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          # Cache key prefix for this workflow
          prefix-key: "security"
          # Additional cache key components
          key: ${{ hashFiles('**/Cargo.lock') }}
          # Cache all target dirs, registry, and git repos
          cache-targets: true
          cache-on-failure: true

      - name: Cache cargo tools
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin
          key: ${{ runner.os }}-cargo-tools-audit-${{ hashFiles('~/.cargo/bin/cargo-audit') }}
          restore-keys: |
            ${{ runner.os }}-cargo-tools-audit-
            ${{ runner.os }}-cargo-tools-

      - name: Install cargo-audit
        run: |
          if ! command -v cargo-audit &> /dev/null; then
            cargo install cargo-audit
          else
            echo "cargo-audit already installed"
          fi

      - name: Run security audit
        run: cargo audit

