name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, beta]
        exclude:
          # Reduce CI load - only test stable on non-Linux platforms
          - os: windows-latest
            rust: beta
          - os: macos-latest
            rust: beta

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          # Configure git for Windows line endings
          autocrlf: false

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      - name: Install Node.js and pnpm
        uses: actions/setup-node@v6
        with:
          node-version: "22"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Configure Windows build (avoid LNK1318)
        if: matrix.os == 'windows-latest'
        run: |
          echo "CARGO_PROFILE_DEV_DEBUG=0" >> $env:GITHUB_ENV
          echo "CARGO_PROFILE_TEST_DEBUG=0" >> $env:GITHUB_ENV
          echo "CARGO_PROFILE_RELEASE_DEBUG=0" >> $env:GITHUB_ENV
          echo "CARGO_PROFILE_DEV_STRIP=symbols" >> $env:GITHUB_ENV
          echo "CARGO_PROFILE_TEST_STRIP=symbols" >> $env:GITHUB_ENV
          echo "CARGO_PROFILE_RELEASE_STRIP=symbols" >> $env:GITHUB_ENV
          echo "RUSTFLAGS=-C debuginfo=0 -C strip=symbols -C link-arg=/DEBUG:NONE" >> $env:GITHUB_ENV
          echo "CARGO_TARGET_X86_64_PC_WINDOWS_MSVC_RUSTFLAGS=-C debuginfo=0 -C strip=symbols -C link-arg=/DEBUG:NONE" >> $env:GITHUB_ENV

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          # Use stable cache keys that will match across similar builds
          prefix-key: "ci-test"
          # Share cache across similar configurations
          shared-key: "${{ matrix.os }}-${{ matrix.rust }}"
          # Cache all target dirs, registry, and git repos
          cache-targets: true
          cache-on-failure: true

      - name: Check formatting
        if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
        run: cargo fmt --all -- --check

      - name: Run clippy
        if: matrix.rust == 'stable'
        run: cargo clippy --workspace --all-targets --all-features --exclude fhirpath-dev-tools
        env:
          # Windows-specific: Completely disable debug info to avoid LNK1318 errors
          CARGO_PROFILE_DEV_DEBUG: ${{ matrix.os == 'windows-latest' && '0' || '2' }}
          CARGO_PROFILE_DEV_STRIP: ${{ matrix.os == 'windows-latest' && 'symbols' || 'none' }}
          CARGO_TARGET_X86_64_PC_WINDOWS_MSVC_RUSTFLAGS: ${{ matrix.os == 'windows-latest' && '-C debuginfo=0 -C strip=symbols -C link-arg=/DEBUG:NONE' || '' }}
          RUSTFLAGS: ${{ matrix.os == 'windows-latest' && '-C debuginfo=0 -C strip=symbols -C link-arg=/DEBUG:NONE' || '' }}

      - name: Build workspace
        run: cargo build --verbose --workspace --exclude fhirpath-dev-tools
        env:
          # Windows-specific: Completely disable debug info to avoid LNK1318 errors
          CARGO_PROFILE_DEV_DEBUG: ${{ matrix.os == 'windows-latest' && '0' || '2' }}
          CARGO_PROFILE_DEV_STRIP: ${{ matrix.os == 'windows-latest' && 'symbols' || 'none' }}
          CARGO_TARGET_X86_64_PC_WINDOWS_MSVC_RUSTFLAGS: ${{ matrix.os == 'windows-latest' && '-C debuginfo=0 -C strip=symbols -C link-arg=/DEBUG:NONE' || '' }}
          RUSTFLAGS: ${{ matrix.os == 'windows-latest' && '-C debuginfo=0 -C strip=symbols -C link-arg=/DEBUG:NONE' || '' }}

      - name: Build CLI binary
        run: cargo build --verbose --package fhirpath-cli
        env:
          # Windows-specific: Completely disable debug info to avoid LNK1318 errors
          CARGO_PROFILE_DEV_DEBUG: ${{ matrix.os == 'windows-latest' && '0' || '2' }}
          CARGO_PROFILE_DEV_STRIP: ${{ matrix.os == 'windows-latest' && 'symbols' || 'none' }}
          CARGO_TARGET_X86_64_PC_WINDOWS_MSVC_RUSTFLAGS: ${{ matrix.os == 'windows-latest' && '-C debuginfo=0 -C strip=symbols -C link-arg=/DEBUG:NONE' || '' }}
          RUSTFLAGS: ${{ matrix.os == 'windows-latest' && '-C debuginfo=0 -C strip=symbols -C link-arg=/DEBUG:NONE' || '' }}

      - name: Run tests (Windows - no doctests)
        if: matrix.os == 'windows-latest'
        run: cargo test --verbose --workspace --all-features --exclude fhirpath-dev-tools --lib --bins
        env:
          # Windows-specific: Completely disable debug info to avoid LNK1318 errors
          CARGO_PROFILE_DEV_DEBUG: ${{ matrix.os == 'windows-latest' && '0' || '2' }}
          CARGO_PROFILE_DEV_STRIP: ${{ matrix.os == 'windows-latest' && 'symbols' || 'none' }}
          CARGO_PROFILE_TEST_DEBUG: ${{ matrix.os == 'windows-latest' && '0' || '2' }}
          CARGO_PROFILE_TEST_STRIP: ${{ matrix.os == 'windows-latest' && 'symbols' || 'none' }}
          # Additional Windows-specific settings
          CARGO_TARGET_X86_64_PC_WINDOWS_MSVC_RUSTFLAGS: ${{ matrix.os == 'windows-latest' && '-C debuginfo=0 -C strip=symbols -C link-arg=/DEBUG:NONE' || '' }}
          RUSTFLAGS: ${{ matrix.os == 'windows-latest' && '-C debuginfo=0 -C strip=symbols -C link-arg=/DEBUG:NONE' || '' }}

      - name: Run tests (Non-Windows - with doctests)
        if: matrix.os != 'windows-latest'
        run: cargo test --verbose --workspace --all-features --exclude fhirpath-dev-tools

      - name: Run tests (release mode - Windows no doctests)
        if: matrix.os == 'windows-latest'
        run: cargo test --release --verbose --workspace --exclude fhirpath-dev-tools --lib --bins

      - name: Run tests (release mode - Non-Windows with doctests)
        if: matrix.os != 'windows-latest'
        run: cargo test --release --verbose --workspace --exclude fhirpath-dev-tools

      - name: Run benchmarks (quick check)
        if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
        run: |
          echo "🚀 Running quick benchmark check..."
          timeout 300 cargo run --package fhirpath-dev-tools --bin octofhir-fhirpath-bench list || echo "⚠️ Benchmark timed out after 5 minutes"

  cli-features:
    name: CLI Feature Combinations
    runs-on: ubuntu-latest
    strategy:
      matrix:
        features:
          - name: "minimal"
            flags: "--no-default-features --features cli"
          - name: "default"
            flags: ""
          - name: "cli+repl"
            flags: "--no-default-features --features cli,repl"
          - name: "cli+tui"
            flags: "--no-default-features --features cli,tui"
          - name: "cli+server"
            flags: "--no-default-features --features cli,server"
          - name: "cli+watch"
            flags: "--no-default-features --features cli,watch"
          - name: "all"
            flags: "--all-features"

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "ci-features"
          shared-key: "cli-features-${{ matrix.features.name }}"
          cache-targets: true

      - name: Check CLI with ${{ matrix.features.name }} features
        run: |
          echo "🔍 Testing CLI with ${{ matrix.features.name }} features"
          cargo check --package fhirpath-cli ${{ matrix.features.flags }}

      - name: Build CLI with ${{ matrix.features.name }} features
        run: |
          echo "🏗️ Building CLI with ${{ matrix.features.name }} features"
          cargo build --package fhirpath-cli ${{ matrix.features.flags }}

      - name: Test CLI with ${{ matrix.features.name }} features
        run: |
          echo "🧪 Testing CLI with ${{ matrix.features.name }} features"
          cargo test --package fhirpath-cli ${{ matrix.features.flags }} --lib

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          # Configure git for Windows line endings
          autocrlf: false

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          # Use stable cache key for coverage builds
          prefix-key: "ci-coverage"
          # Share cache across coverage runs
          shared-key: "coverage"
          # Cache all target dirs, registry, and git repos
          cache-targets: true
          cache-on-failure: true

      - name: Cache cargo tools
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin
          key: ${{ runner.os }}-cargo-tools-tarpaulin-${{ hashFiles('~/.cargo/bin/cargo-tarpaulin') }}
          restore-keys: |
            ${{ runner.os }}-cargo-tools-tarpaulin-
            ${{ runner.os }}-cargo-tools-

      - name: Install cargo-tarpaulin
        run: |
          if ! command -v cargo-tarpaulin &> /dev/null; then
            cargo install cargo-tarpaulin
          else
            echo "cargo-tarpaulin already installed"
          fi

      - name: Generate code coverage
        run: |
          cargo tarpaulin --all-features --workspace --timeout 300 --out html
          echo "Code coverage report generated in target/tarpaulin/tarpaulin-report.html"

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          # Configure git for Windows line endings
          autocrlf: false

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          # Use stable cache key for security builds
          prefix-key: "ci-security"
          # Share cache across security runs
          shared-key: "security"
          # Cache all target dirs, registry, and git repos
          cache-targets: true
          cache-on-failure: true

      - name: Cache cargo tools
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin
          key: ${{ runner.os }}-cargo-tools-audit-${{ hashFiles('~/.cargo/bin/cargo-audit') }}
          restore-keys: |
            ${{ runner.os }}-cargo-tools-audit-
            ${{ runner.os }}-cargo-tools-

      - name: Install cargo-audit
        run: |
          if ! command -v cargo-audit &> /dev/null; then
            cargo install cargo-audit
          else
            echo "cargo-audit already installed"
          fi

      - name: Run security audit
        run: cargo audit
