name: Canary Release

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  # Crates.io publishing job (runs once)
  publish-crates:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          # Cache key prefix for this workflow
          prefix-key: "canary"
          # Additional cache key components
          key: ${{ hashFiles('**/Cargo.lock') }}
          # Cache all target dirs, registry, and git repos
          cache-targets: true
          cache-on-failure: true

      - name: Run quality assurance
        run: |
          cargo fmt --all -- --check
          cargo clippy --workspace --all-targets --all-features
          cargo test --workspace --all-features

      - name: Install cargo-workspaces
        run: cargo install cargo-workspaces

      - name: Configure git early
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git config --global http.sslVerify false
          git config --global http.version HTTP/1.1

      - name: Bump patch version
        id: version
        run: |
          # Get current version before bumping
          CURRENT_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          echo "Current version: $CURRENT_VERSION"

          # Use cargo-workspaces to bump patch version (force for canary)
          cargo workspaces version --no-git-commit --force "*" patch -y

          # Get new version after bumping
          NEW_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "Bumped version from $CURRENT_VERSION to $NEW_VERSION"

      - name: Prepare dependencies for publishing
        run: |
          echo "🔧 Preparing workspace dependencies for publishing..."
          chmod +x ./scripts/prepare-canary-release.sh
          # Always run the script to ensure dependencies have version specifications
          ./scripts/prepare-canary-release.sh ${{ steps.version.outputs.version }}

      - name: Build release
        run: cargo build --release --workspace

      - name: Test publishing (dry run)
        run: |
          echo "🧪 Testing publishing with dry run..."

          if output=$(cargo workspaces publish --dry-run 2>&1); then
            echo "✅ Dry run completed successfully"
            echo "$output"
          else
            exit_code=$?
            echo "❌ Dry run failed with exit code: $exit_code"
            echo "📋 Full dry run output:"
            echo "$output"
            exit 1
          fi

      - name: Publish to crates.io
        if: github.ref == 'refs/heads/main'
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          echo "🚀 Publishing workspace to crates.io..."
          echo "Version: ${{ steps.version.outputs.version }}"
          echo "Current commit: $(git rev-parse HEAD)"
          echo "Current branch: $(git branch --show-current)"

          # Publish to crates.io (force for canary)
          cargo workspaces publish --token $CARGO_REGISTRY_TOKEN --force "*" -y --publish-as-is  --allow-dirty

          echo "✅ Publishing successful!"

      - name: Restore development dependencies
        run: |
          echo "🔄 Restoring development dependencies..."
          chmod +x ./scripts/restore-dev-dependencies.sh
          ./scripts/restore-dev-dependencies.sh

      - name: Commit and push version bump
        if: github.ref == 'refs/heads/main'
        run: |
          echo "📝 Committing version bump to ${{ steps.version.outputs.version }}"
          git add -A
          git commit -m "chore: bump version to ${{ steps.version.outputs.version }} for canary release"

          echo "📤 Pushing version bump to remote"
          git push origin main

      # Export version for binary jobs
      - name: Export version for binary jobs
        run: |
          echo "${{ steps.version.outputs.version }}" > release-version.txt

      - name: Upload version artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-version
          path: release-version.txt

  # Binary release job (matrix for multiple targets)
  release-binaries:
    needs: publish-crates
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            postfix: linux-x64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            postfix: linux-x64-musl
          - os: macos-latest
            target: x86_64-apple-darwin
            postfix: macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            postfix: macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            postfix: windows-x64

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download version artifact
        uses: actions/download-artifact@v5
        with:
          name: release-version

      - name: Read release version
        id: version
        shell: bash
        run: |
          VERSION=$(cat release-version.txt)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Using release version: ${VERSION}"

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          # Cache key prefix for this workflow
          prefix-key: "canary-${{ matrix.target }}"
          # Additional cache key components
          key: ${{ hashFiles('**/Cargo.lock') }}
          # Cache all target dirs, registry, and git repos
          cache-targets: true
          cache-on-failure: true

      - name: Install build dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config

      - name: Install musl tools (Linux musl only)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get install -y musl-tools musl-dev

      - name: Build octofhir-fhirpath binary
        run: |
          cargo build --release --target ${{ matrix.target }} --package octofhir-fhirpath --bin octofhir-fhirpath

      - name: Prepare binary for release (Unix)
        if: runner.os != 'Windows'
        run: |
          mkdir -p release-artifacts
          cp target/${{ matrix.target }}/release/octofhir-fhirpath release-artifacts/octofhir-fhirpath-${{ matrix.postfix }}
          chmod +x release-artifacts/octofhir-fhirpath-${{ matrix.postfix }}

      - name: Prepare binary for release (Windows)
        if: runner.os == 'Windows'
        run: |
          mkdir release-artifacts
          copy target\${{ matrix.target }}\release\octofhir-fhirpath.exe release-artifacts\octofhir-fhirpath-${{ matrix.postfix }}.exe

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.postfix }}
          path: release-artifacts/*

  # Create GitHub release with all binaries
  create-release:
    needs: [publish-crates, release-binaries]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download version artifact
        uses: actions/download-artifact@v5
        with:
          name: release-version

      - name: Read release version
        id: version
        run: |
          VERSION=$(cat release-version.txt)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Using release version: ${VERSION}"

      - name: Download all binary artifacts
        uses: actions/download-artifact@v5
        with:
          pattern: binary-*
          merge-multiple: true
          path: release-artifacts

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body: |
            🚀 **Release ${{ steps.version.outputs.version }}** - Automated build from main branch

            **Commit:** ${{ github.sha }}
            **Version:** ${{ steps.version.outputs.version }}
            **Branch:** ${{ github.ref_name }}

            ## Recent Changes
            ${{ github.event.head_commit.message }}

            **Author:** ${{ github.event.head_commit.author.name }} <${{ github.event.head_commit.author.email }}>
            **Timestamp:** ${{ github.event.head_commit.timestamp }}

            ## Available Binaries
            - `octofhir-fhirpath-linux-x64` - Linux x86_64 (glibc)
            - `octofhir-fhirpath-linux-x64-musl` - Linux x86_64 (musl, static)
            - `octofhir-fhirpath-macos-x64` - macOS Intel
            - `octofhir-fhirpath-macos-arm64` - macOS Apple Silicon
            - `octofhir-fhirpath-windows-x64.exe` - Windows x86_64

            ## Crates.io
            All workspace crates are also published to crates.io with version `${{ steps.version.outputs.version }}`
          prerelease: false
          generate_release_notes: false
          files: |
            release-artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
