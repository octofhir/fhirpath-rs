name: Canary Release

on:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  # Crates.io publishing job (only octofhir-fhirpath)
  publish-crate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install Node.js and pnpm
        uses: actions/setup-node@v5
        with:
          node-version: '22'
      
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          # Use a more stable cache key that will match across commits
          prefix-key: "canary-publish"
          # Share cache with other jobs
          shared-key: "publish-crate"
          # Cache all target dirs, registry, and git repos
          cache-targets: true
          cache-on-failure: true

      - name: Run quality assurance
        run: |
          cargo fmt --all -- --check
          cargo clippy --workspace --all-targets --all-features
          cargo test --workspace --all-features

      - name: Configure git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Bump patch version
        id: version
        run: |
          # Get current version before bumping
          CURRENT_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          echo "Current version: $CURRENT_VERSION"

          # Calculate new patch version
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"

          # Update version in workspace Cargo.toml
          sed -i "s/^version = \".*\"/version = \"$NEW_VERSION\"/" Cargo.toml
          
          echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "Bumped version from $CURRENT_VERSION to $NEW_VERSION"

      - name: Build octofhir-fhirpath crate
        run: cargo build --release --package octofhir-fhirpath

      - name: Test publishing octofhir-fhirpath (dry run)
        run: |
          echo "🧪 Testing publishing octofhir-fhirpath with dry run..."
          cd crates/octofhir-fhirpath
          cargo publish --dry-run

      - name: Publish octofhir-fhirpath to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          echo "🚀 Publishing octofhir-fhirpath to crates.io..."
          echo "Version: ${{ steps.version.outputs.version }}"
          echo "Current commit: $(git rev-parse HEAD)"
          echo "Current branch: $(git branch --show-current)"

          # Publish octofhir-fhirpath crate only (allow dirty since we modified version)
          cd crates/octofhir-fhirpath
          cargo publish --token $CARGO_REGISTRY_TOKEN --allow-dirty

          echo "✅ Publishing successful!"

      - name: Commit and push version bump
        run: |
          echo "📝 Committing version bump to ${{ steps.version.outputs.version }}"
          git add -A
          git commit -m "chore: bump version to ${{ steps.version.outputs.version }} for canary release"

          echo "📤 Pushing version bump to remote"
          git push origin main

      # Export version for CLI release job
      - name: Export version for CLI release job
        run: |
          echo "${{ steps.version.outputs.version }}" > release-version.txt

      - name: Upload version artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-version
          path: release-version.txt

  # CLI binary release job (matrix for multiple targets)
  release-cli-binaries:
    needs: publish-crate
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            postfix: linux-x64
          - os: macos-latest
            target: x86_64-apple-darwin
            postfix: macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            postfix: macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            postfix: windows-x64

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Download version artifact
        uses: actions/download-artifact@v5
        with:
          name: release-version

      - name: Read release version
        id: version
        shell: bash
        run: |
          VERSION=$(cat release-version.txt)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Using release version: ${VERSION}"

      - name: Install Node.js and pnpm
        uses: actions/setup-node@v5
        with:
          node-version: '22'
      
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          # Use a stable cache key with target-specific suffix
          prefix-key: "canary-binary"
          # Share cache across binary builds but separate from publish
          shared-key: "binary-${{ matrix.target }}"
          # Cache all target dirs, registry, and git repos
          cache-targets: true
          cache-on-failure: true

      - name: Install build dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config


      - name: Build fhirpath-cli binary
        run: |
          cargo build --release --target ${{ matrix.target }} --package fhirpath-cli

      - name: Prepare binary for release (Unix)
        if: runner.os != 'Windows'
        run: |
          mkdir -p release-artifacts
          cp target/${{ matrix.target }}/release/octofhir-fhirpath release-artifacts/octofhir-fhirpath-${{ matrix.postfix }}
          chmod +x release-artifacts/octofhir-fhirpath-${{ matrix.postfix }}

      - name: Prepare binary for release (Windows)
        if: runner.os == 'Windows'
        run: |
          mkdir release-artifacts
          copy target\${{ matrix.target }}\release\octofhir-fhirpath.exe release-artifacts\octofhir-fhirpath-${{ matrix.postfix }}.exe

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.postfix }}
          path: release-artifacts/*

  # Create GitHub release with CLI binaries
  create-release:
    needs: [publish-crate, release-cli-binaries]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download version artifact
        uses: actions/download-artifact@v5
        with:
          name: release-version

      - name: Read release version
        id: version
        run: |
          VERSION=$(cat release-version.txt)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Using release version: ${VERSION}"

      - name: Download all binary artifacts
        uses: actions/download-artifact@v5
        with:
          pattern: binary-*
          merge-multiple: true
          path: release-artifacts

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body: |
            🚀 **Release ${{ steps.version.outputs.version }}** - Automated build from main branch

            **Commit:** ${{ github.sha }}
            **Version:** ${{ steps.version.outputs.version }}
            **Branch:** ${{ github.ref_name }}

            ## Recent Changes
            ${{ github.event.head_commit.message }}

            **Author:** ${{ github.event.head_commit.author.name }} <${{ github.event.head_commit.author.email }}>
            **Timestamp:** ${{ github.event.head_commit.timestamp }}

            ## Available Binaries
            - `octofhir-fhirpath-linux-x64` - Linux x86_64 (glibc)
            - `octofhir-fhirpath-macos-x64` - macOS Intel
            - `octofhir-fhirpath-macos-arm64` - macOS Apple Silicon
            - `octofhir-fhirpath-windows-x64.exe` - Windows x86_64

            ## Crates.io
            The `octofhir-fhirpath` crate is published to crates.io with version `${{ steps.version.outputs.version }}`
          prerelease: false
          generate_release_notes: false
          files: |
            release-artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
