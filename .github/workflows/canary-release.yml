name: Canary Release

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  canary-release:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          # Cache key prefix for this workflow
          prefix-key: "canary"
          # Additional cache key components
          key: ${{ hashFiles('**/Cargo.lock') }}
          # Cache all target dirs, registry, and git repos
          cache-targets: true
          cache-on-failure: true

      - name: Run quality assurance
        run: |
          cargo fmt --all -- --check
          cargo clippy --workspace --all-targets --all-features
          cargo test --workspace --all-features

      - name: Run benchmarks (quick)
        run: |
          echo "üöÄ Running quick benchmark for canary release..."
          timeout 180 cargo bench --package fhirpath-benchmarks || echo "‚ö†Ô∏è Benchmark timed out after 3 minutes"

      - name: Install cargo-workspaces
        run: cargo install cargo-workspaces

      - name: Configure git early
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git config --global http.sslVerify true
          git config --global http.version HTTP/1.1

      - name: Generate canary version
        id: version
        run: |
          # Extract base version from workspace Cargo.toml
          BASE_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          SHORT_SHA=$(git rev-parse --short HEAD)
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          CANARY_VERSION="${BASE_VERSION}-canary.${TIMESTAMP}.${SHORT_SHA}"
          echo "version=${CANARY_VERSION}" >> $GITHUB_OUTPUT
          echo "Generated canary version: ${CANARY_VERSION} (base: ${BASE_VERSION})"

      - name: Prepare workspace for canary release
        run: |
          ./scripts/prepare-canary-release.sh "${{ steps.version.outputs.version }}"

      - name: Build release
        run: cargo build --release --workspace

      - name: Create canary release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: canary-${{ steps.version.outputs.version }}
          name: Canary Release ${{ steps.version.outputs.version }}
          body: |
            üöÄ **Canary Release** - Automated build from main branch

            **Commit:** ${{ github.sha }}
            **Version:** ${{ steps.version.outputs.version }}
            **Branch:** ${{ github.ref_name }}

            > ‚ö†Ô∏è This is a canary release for testing purposes. Use at your own risk.

            ## Recent Changes
            ${{ github.event.head_commit.message }}

            **Author:** ${{ github.event.head_commit.author.name }} <${{ github.event.head_commit.author.email }}>
            **Timestamp:** ${{ github.event.head_commit.timestamp }}
          prerelease: true
          generate_release_notes: false
          files: |
            target/release/octofhir-fhirpath*
            target/release/test-runner*
            target/release/benchmark-runner*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Test canary publishing (dry run)
        run: |
          echo "üß™ Testing canary publishing with dry run..."
          echo "Note: Dry run may show 'not published' errors for canary versions - this is expected"
          
          # Capture the output and check for specific error patterns
          if output=$(cargo workspaces publish --dry-run --allow-dirty --force "*" --no-git-tag 2>&1); then
            echo "‚úÖ Dry run completed successfully"
            echo "$output"
          else
            echo "üìã Dry run output:"
            echo "$output"
            
            # Check if the error is just about packages not being published yet
            if echo "$output" | grep -q "not published yet\|not found in registry"; then
              echo "‚úÖ This is expected for new canary versions with unique timestamps"
            else
              echo "‚ö†Ô∏è There may be other issues to investigate"
              echo "However, continuing with canary release..."
            fi
          fi

      - name: Publish canary to crates.io
        if: github.ref == 'refs/heads/main'
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          echo "üöÄ Publishing canary workspace to crates.io..."
          echo "Current commit: $(git rev-parse HEAD)"
          echo "Current branch: $(git branch --show-current)"
          echo "Force publishing canary versions even if commit seems already released..."
          cargo workspaces publish --allow-dirty --force "*" --no-git-tag --token $CARGO_REGISTRY_TOKEN
        continue-on-error: true

      - name: Restore development dependencies
        if: always()
        run: |
          echo "üîÑ Restoring development dependencies..."
          ./scripts/restore-dev-dependencies.sh || echo "‚ö†Ô∏è Failed to restore dependencies (may not exist yet)"
