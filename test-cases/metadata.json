{
  "generated_at": "2025-09-25T22:04:32.408432+00:00",
  "total_suites": 13,
  "total_tests": 1135,
  "suites": {
    "other_operations": {
      "name": "other_operations",
      "file_path": "groups/other/other_operations.json",
      "category": "other",
      "description": "Other FHIRPath operation tests including type checking, literals, navigation, and miscellaneous functions",
      "source": "fhir-test-cases r5",
      "test_count": 366,
      "test_names": [
        "testEscapeHtmlBasic",
        "testEscapeHtmlQuotes",
        "testEscapeHtmlAmpersand",
        "testEscapeHtmlComplex",
        "testUnescapeHtmlBasic",
        "testUnescapeHtmlQuotes",
        "testUnescapeHtmlAmpersand",
        "testEscapeUnescapeRoundTrip",
        "testExtractBirthDate",
        "testPatientHasBirthDate",
        "testPatientTelecomTypes",
        "testCombine1",
        "testCombine2",
        "testCombine3",
        "testCase1",
        "testCase2",
        "testCase3",
        "testCase4",
        "testExtension1",
        "testExtension2",
        "testExtension3",
        "testType1",
        "testType1a",
        "testType2",
        "testType2a",
        "testType3",
        "testType4",
        "testType5",
        "testType6",
        "testType7",
        "testType8",
        "testType9",
        "testType10",
        "testType11",
        "testType12",
        "testType13",
        "testType14",
        "testType15",
        "testType16",
        "testType17",
        "testType18",
        "testType19",
        "testType20",
        "testType21",
        "testType22",
        "testType23",
        "testTypeA1",
        "testTypeA2",
        "testTypeA3",
        "testTypeA4",
        "testTypeA",
        "testStringYearConvertsToDate",
        "testStringMonthConvertsToDate",
        "testStringDayConvertsToDate",
        "testStringYearConvertsToDateTime",
        "testStringMonthConvertsToDateTime",
        "testStringDayConvertsToDateTime",
        "testStringHourConvertsToDateTime",
        "testStringMinuteConvertsToDateTime",
        "testStringSecondConvertsToDateTime",
        "testStringMillisecondConvertsToDateTime",
        "testStringUTCConvertsToDateTime",
        "testStringTZConvertsToDateTime",
        "testStringHourConvertsToTime",
        "testStringMinuteConvertsToTime",
        "testStringSecondConvertsToTime",
        "testStringMillisecondConvertsToTime",
        "testIntegerLiteralConvertsToInteger",
        "testIntegerLiteralIsInteger",
        "testIntegerLiteralIsSystemInteger",
        "testStringLiteralConvertsToInteger",
        "testStringLiteralConvertsToIntegerFalse",
        "testStringDecimalConvertsToIntegerFalse",
        "testStringLiteralIsNotInteger",
        "testBooleanLiteralConvertsToInteger",
        "testBooleanLiteralIsNotInteger",
        "testDateIsNotInteger",
        "testIntegerLiteralToInteger",
        "testStringIntegerLiteralToInteger",
        "testDecimalLiteralToInteger",
        "testDecimalLiteralToIntegerIsEmpty",
        "testBooleanLiteralToInteger",
        "testIntegerLiteralConvertsToDecimal",
        "testIntegerLiteralIsNotDecimal",
        "testDecimalLiteralConvertsToDecimal",
        "testDecimalLiteralIsDecimal",
        "testStringIntegerLiteralConvertsToDecimal",
        "testStringIntegerLiteralIsNotDecimal",
        "testStringLiteralConvertsToDecimalFalse",
        "testStringDecimalLiteralConvertsToDecimal",
        "testStringDecimalLiteralIsNotDecimal",
        "testBooleanLiteralConvertsToDecimal",
        "testBooleanLiteralIsNotDecimal",
        "testIntegerLiteralToDecimal",
        "testIntegerLiteralToDeciamlEquivalent",
        "testDecimalLiteralToDecimal",
        "testDecimalLiteralToDecimalEqual",
        "testBooleanLiteralToDecimal",
        "testIntegerLiteralConvertsToQuantity",
        "testIntegerLiteralIsNotQuantity",
        "testDecimalLiteralConvertsToQuantity",
        "testDecimalLiteralIsNotQuantity",
        "testStringIntegerLiteralConvertsToQuantity",
        "testStringIntegerLiteralIsNotQuantity",
        "testStringQuantityLiteralConvertsToQuantity",
        "testStringQuantityWeekConvertsToQuantity",
        "testStringQuantityWeekConvertsToQuantityFalse",
        "testStringDecimalLiteralConvertsToQuantityFalse",
        "testStringDecimalLiteralConvertsToQuantity",
        "testStringDecimalLiteralIsNotSystemQuantity",
        "testBooleanLiteralConvertsToQuantity",
        "testBooleanLiteralIsNotSystemQuantity",
        "testIntegerLiteralToQuantity",
        "testDecimalLiteralToQuantity",
        "testStringIntegerLiteralToQuantity",
        "testStringQuantityLiteralToQuantity",
        "testStringQuantityDayLiteralToQuantity",
        "testStringQuantityWeekLiteralToQuantity",
        "testStringQuantityMonthLiteralToQuantity",
        "testStringQuantityYearLiteralToQuantity",
        "testStringDecimalLiteralToQuantity",
        "testIntegerLiteralConvertsToBoolean",
        "testIntegerLiteralConvertsToBooleanFalse",
        "testNegativeIntegerLiteralConvertsToBooleanFalse",
        "testIntegerLiteralFalseConvertsToBoolean",
        "testDecimalLiteralConvertsToBoolean",
        "testStringTrueLiteralConvertsToBoolean",
        "testStringFalseLiteralConvertsToBoolean",
        "testStringFalseLiteralAlsoConvertsToBoolean",
        "testTrueLiteralConvertsToBoolean",
        "testFalseLiteralConvertsToBoolean",
        "testIntegerLiteralToBoolean",
        "testIntegerLiteralToBooleanEmpty",
        "testIntegerLiteralToBooleanFalse",
        "testStringTrueToBoolean",
        "testStringFalseToBoolean",
        "testIntegerLiteralConvertsToString",
        "testIntegerLiteralIsNotString",
        "testNegativeIntegerLiteralConvertsToString",
        "testDecimalLiteralConvertsToString",
        "testStringLiteralConvertsToString",
        "testBooleanLiteralConvertsToString",
        "testQuantityLiteralConvertsToString",
        "testIntegerLiteralToString",
        "testNegativeIntegerLiteralToString",
        "testDecimalLiteralToString",
        "testStringLiteralToString",
        "testBooleanLiteralToString",
        "testQuantityLiteralWkToString",
        "testQuantityLiteralWeekToString",
        "testTrace1",
        "testTrace2",
        "testPrecedence1",
        "testPrecedence2",
        "testPrecedence3",
        "testPrecedence4",
        "testPrecedence5",
        "testPrecedence6",
        "testRepeat1",
        "testRepeat2",
        "testRepeat3",
        "testRepeat4",
        "testRepeat5",
        "testJoin",
        "testLiteralTrue",
        "testLiteralFalse",
        "testLiteralString1",
        "testLiteralInteger1",
        "testLiteralInteger0",
        "testLiteralIntegerNegative1",
        "testLiteralIntegerNegative1Invalid",
        "testLiteralIntegerMax",
        "testLiteralString2",
        "testLiteralStringEscapes",
        "testLiteralBooleanTrue",
        "testLiteralBooleanFalse",
        "testLiteralDecimal10",
        "testLiteralDecimal01",
        "testLiteralDecimal00",
        "testLiteralDecimalNegative01",
        "testLiteralDecimalNegative01Invalid",
        "testLiteralDecimalMax",
        "testLiteralDecimalStep",
        "testLiteralDateYear",
        "testLiteralDateMonth",
        "testLiteralDateDay",
        "testLiteralDateTimeYear",
        "testLiteralDateTimeMonth",
        "testLiteralDateTimeDay",
        "testLiteralDateTimeHour",
        "testLiteralDateTimeMinute",
        "testLiteralDateTimeSecond",
        "testLiteralDateTimeMillisecond",
        "testLiteralDateTimeUTC",
        "testLiteralDateTimeTimezoneOffset",
        "testLiteralTimeHour",
        "testLiteralTimeMinute",
        "testLiteralTimeSecond",
        "testLiteralTimeMillisecond",
        "testLiteralTimeUTC",
        "testLiteralTimeTimezoneOffset",
        "testLiteralQuantityDecimal",
        "testLiteralQuantityInteger",
        "testLiteralQuantityDay",
        "testLiteralIntegerNotEqual",
        "testLiteralIntegerEqual",
        "testPolarityPrecedence",
        "testLiteralIntegerGreaterThan",
        "testLiteralIntegerCountNotEqual",
        "testLiteralIntegerLessThanTrue",
        "testLiteralIntegerLessThanFalse",
        "testLiteralIntegerLessThanPolarityTrue",
        "testLiteralIntegerLessThanPolarityFalse",
        "testLiteralDecimalGreaterThanNonZeroTrue",
        "testLiteralDecimalGreaterThanZeroTrue",
        "testLiteralDecimalGreaterThanIntegerTrue",
        "testLiteralDecimalLessThanInteger",
        "testLiteralDecimalLessThanInvalid",
        "testDateEqual",
        "testDateNotEqual",
        "testDateNotEqualTimezoneOffsetBefore",
        "testDateNotEqualTimezoneOffsetAfter",
        "testDateNotEqualUTC",
        "testDateNotEqualTimeSecond",
        "testDateNotEqualTimeMinute",
        "testDateNotEqualToday",
        "testDateTimeGreaterThanDate1",
        "testDateGreaterThanDate",
        "testDateTimeGreaterThanDate2",
        "testLiteralDateTimeTZGreater",
        "testLiteralDateTimeTZLess",
        "testLiteralDateTimeTZEqualFalse",
        "testLiteralDateTimeTZEqualTrue",
        "testLiteralUnicode",
        "testCollectionNotEmpty",
        "testCollectionNotEqualEmpty",
        "testExpressions",
        "testExpressionsEqual",
        "testNotEmpty",
        "testEmpty",
        "testLiteralNotOnEmpty",
        "testLiteralNotTrue",
        "testLiteralNotFalse",
        "testIntegerBooleanNotTrue",
        "testIntegerBooleanNotFalse",
        "testNotInvalid",
        "testIn1",
        "testIn2",
        "testIn3",
        "testIn4",
        "testIn5",
        "testInEmptyCollection",
        "testInEmptyValue",
        "testInEmptyBoth",
        "testFHIRPathIsFunction1",
        "testFHIRPathIsFunction2",
        "testFHIRPathIsFunction3",
        "testFHIRPathIsFunction4",
        "testFHIRPathIsFunction5",
        "testFHIRPathIsFunction6",
        "testFHIRPathIsFunction7",
        "testFHIRPathIsFunction8",
        "testFHIRPathIsFunction9",
        "testFHIRPathIsFunction10",
        "testFHIRPathAsFunction11",
        "testFHIRPathAsFunction12",
        "testFHIRPathAsFunction13",
        "testFHIRPathAsFunction14",
        "testFHIRPathAsFunction15",
        "testFHIRPathAsFunction16",
        "testFHIRPathAsFunction17",
        "testFHIRPathAsFunction18",
        "testFHIRPathAsFunction19",
        "testFHIRPathAsFunction20",
        "testFHIRPathAsFunction21",
        "testFHIRPathAsFunction22",
        "testFHIRPathAsFunction23",
        "testFHIRPathAsFunction24",
        "testSimple",
        "testSimpleNone",
        "testEscapedIdentifier",
        "testSimpleBackTick1",
        "testSimpleWithContext",
        "testPolymorphismA",
        "testPolymorphismIsA1",
        "testPolymorphismIsA2",
        "testPolymorphismIsA3",
        "testPolymorphismIsB",
        "testPolymorphismAsA",
        "testPolymorphismAsAFunction",
        "testPolymorphismAsBFunction",
        "testDollarThis1",
        "testDollarThis2",
        "testDollarOrderAllowed",
        "testDollarOrderAllowedA",
        "testConformsTo1",
        "testConformsTo2",
        "testConformsTo3",
        "testQuantity1",
        "testQuantity2",
        "testQuantity3",
        "testQuantity4",
        "testQuantity5",
        "testQuantity6",
        "testQuantity7",
        "testQuantity8",
        "testQuantity9",
        "testQuantity10",
        "testQuantity11",
        "testVariables1",
        "testVariables2",
        "testVariables3",
        "testVariables4",
        "testPlus1",
        "testPlus2",
        "testPlus3",
        "testPlus4",
        "testPlus5",
        "testPlusEmpty1",
        "testPlusEmpty2",
        "testPlusEmpty3",
        "testMinus1",
        "testMinus2",
        "testMinus3",
        "testMinus4",
        "testMinus6",
        "testMinusEmpty1",
        "testMinusEmpty2",
        "testMinusEmpty3",
        "testIif1",
        "testIif2",
        "testIif3",
        "testIif4",
        "testIif5",
        "testIif7",
        "testIif8",
        "testIif9",
        "testIif10",
        "testIif11",
        "testIif12",
        "defineVariable1",
        "defineVariable2",
        "defineVariable3",
        "defineVariable4",
        "defineVariable5",
        "defineVariable6",
        "defineVariable7",
        "defineVariable8",
        "defineVariable13",
        "defineVariable14",
        "defineVariable15",
        "dvConceptMapExample",
        "defineVariable19",
        "dvParametersDontColide",
        "txTest01",
        "txTest02",
        "txTest03",
        "testHasTemplateId1",
        "testHasTemplateId2",
        "testHasTemplateId3",
        "testIndex",
        "testContainedId",
        "testMultipleResolve",
        "testResolveBundle",
        "testResolveBundleFirst",
        "testResolveContained"
      ]
    },
    "string_operations": {
      "name": "string_operations",
      "file_path": "groups/string/string_operations.json",
      "category": "string",
      "description": "String operations including search, manipulation, and conversion functions",
      "source": "fhir-test-cases r5",
      "test_count": 98,
      "test_names": [
        "testStartsWith1",
        "testStartsWith2",
        "testStartsWith3",
        "testStartsWith4",
        "testStartsWith5",
        "testStartsWith6",
        "testStartsWith7",
        "testStartsWith8",
        "testStartsWith9",
        "testStartsWith10",
        "testStartsWith11",
        "testStartsWith12",
        "testEndsWith1",
        "testEndsWith2",
        "testEndsWith3",
        "testEndsWith4",
        "testEndsWith5",
        "testEndsWith6",
        "testEndsWith7",
        "testEndsWith8",
        "testEndsWith9",
        "testEndsWith10",
        "testContainsString1",
        "testContainsString2",
        "testContainsString3",
        "testContainsString4",
        "testContainsString5",
        "testContainsString6",
        "testContainsString7",
        "testContainsString8",
        "testContainsString9",
        "testContainsString10",
        "testIndexOf1",
        "testIndexOf2",
        "testIndexOf3",
        "testIndexOf4",
        "testIndexOf5",
        "testIndexOf6",
        "testMatchesCaseSensitive1",
        "testMatchesCaseSensitive2",
        "testMatchesEmpty",
        "testMatchesEmpty2",
        "testMatchesEmpty3",
        "testMatchesSingleLineMode1",
        "testMatchesWithinUrl1",
        "testMatchesWithinUrl2",
        "testMatchesWithinUrl3",
        "testMatchesWithinUrl1a",
        "testMatchesWithinUrl4",
        "testMatchesFullWithinUrl1",
        "testMatchesFullWithinUrl3",
        "testMatchesFullWithinUrl4",
        "testMatchesFullWithinUrl1a",
        "testMatchesFullWithinUrl2",
        "testSubstring1",
        "testSubstring2",
        "testSubstring3",
        "testSubstring4",
        "testSubstring5",
        "testSubstring7",
        "testSubstring8",
        "testSubstring9",
        "testSubstring10",
        "testSubstring11",
        "testSubstring12",
        "testReplace1",
        "testReplace2",
        "testReplace3",
        "testReplace4",
        "testReplace5",
        "testReplace6",
        "testReplaceMatches1",
        "testReplaceMatches2",
        "testReplaceMatches3",
        "testReplaceMatches4",
        "testReplaceMatches5",
        "testReplaceMatches6",
        "testReplaceMatches7",
        "testTrim1",
        "testTrim2",
        "testTrim3",
        "testTrim4",
        "testTrim5",
        "testTrim6",
        "testSplit1",
        "testSplit2",
        "testSplit3",
        "testSplit4",
        "testLength1",
        "testLength2",
        "testLength3",
        "testLength4",
        "testLength5",
        "testLength6",
        "testToChars1",
        "testConcatenate1",
        "testConcatenate2",
        "testConcatenate3"
      ]
    },
    "boolean_operations": {
      "name": "boolean_operations",
      "file_path": "groups/boolean/boolean_operations.json",
      "category": "boolean",
      "description": "Boolean logic operation tests including and, or, xor, implies operations",
      "source": "fhir-test-cases r5",
      "test_count": 44,
      "test_names": [
        "testBooleanLogicAnd1",
        "testBooleanLogicAnd2",
        "testBooleanLogicAnd3",
        "testBooleanLogicAnd4",
        "testBooleanLogicAnd5",
        "testBooleanLogicAnd6",
        "testBooleanLogicAnd7",
        "testBooleanLogicAnd8",
        "testBooleanLogicAnd9",
        "testBooleanLogicOr1",
        "testBooleanLogicOr2",
        "testBooleanLogicOr3",
        "testBooleanLogicOr4",
        "testBooleanLogicOr5",
        "testBooleanLogicOr6",
        "testBooleanLogicOr7",
        "testBooleanLogicOr8",
        "testBooleanLogicOr9",
        "testBooleanLogicXOr1",
        "testBooleanLogicXOr2",
        "testBooleanLogicXOr3",
        "testBooleanLogicXOr4",
        "testBooleanLogicXOr5",
        "testBooleanLogicXOr6",
        "testBooleanLogicXOr7",
        "testBooleanLogicXOr8",
        "testBooleanLogicXOr9",
        "testBooleanImplies1",
        "testBooleanImplies2",
        "testBooleanImplies3",
        "testBooleanImplies4",
        "testBooleanImplies5",
        "testBooleanImplies6",
        "testBooleanImplies7",
        "testBooleanImplies8",
        "testBooleanImplies9",
        "testCollectionBoolean1",
        "testCollectionBoolean2",
        "testCollectionBoolean3",
        "testCollectionBoolean4",
        "testCollectionBoolean5",
        "testCollectionBoolean6",
        "from-zulip-1",
        "from-zulip-2"
      ]
    },
    "advanced_features": {
      "name": "advanced_features",
      "file_path": "groups/other/advanced_features.json",
      "category": "other",
      "description": "Advanced FHIRPath features including variables, resolution, and tracing",
      "source": "fhir-test-cases r5",
      "test_count": 2,
      "test_names": [
        "defineVariable1",
        "defineVariable2"
      ]
    },
    "analyzer": {
      "name": "analyzer",
      "file_path": "groups/analyzer/analyzer.json",
      "category": "analyzer",
      "description": "Test cases for semantic analysis and validation failures",
      "source": "fhir-test-cases r5",
      "test_count": 28,
      "test_names": [
        "testPlus6",
        "testStartsWith12a",
        "testStartsWithNonString1",
        "defineVariable9",
        "defineVariable10",
        "dvRedefiningVariableThrowsError",
        "defineVariable12",
        "defineVariable16",
        "dvCantOverwriteSystemVar",
        "dvUsageOutsideScopeThrows",
        "testIif6",
        "testSimpleFail",
        "testSimpleWithWrongContext",
        "testPolymorphismB",
        "testPolymorphismAsB",
        "testDollarOrderNotAllowed",
        "testPlus6",
        "testComment1",
        "testComment2",
        "testComment3",
        "testComment4",
        "testComment5",
        "testComment6",
        "testComment7",
        "testComment8",
        "testComment9",
        "testPolymorphicsA",
        "testPolymorphicsB"
      ]
    },
    "date_time_operations": {
      "name": "date_time_operations",
      "file_path": "groups/dates/date_time_operations.json",
      "category": "dates",
      "description": "Date and time operations including extraction, conversion, and period operations",
      "source": "fhir-test-cases r5",
      "test_count": 85,
      "test_names": [
        "testToDateInvalid",
        "testToDateFromDate",
        "testToDateFromString",
        "testToDateFromStringPartial",
        "testToDateFromStringYear",
        "testToDateTimeFromDate",
        "testToDateTimeFromString",
        "testToDateTimeFromDateTime",
        "testToDateTimeInvalid",
        "testToDateTimeEmpty",
        "toDateFullDateTimString",
        "testNow1",
        "testNow2",
        "testToday1",
        "testToday2",
        "testDayOfDateFirstOfMonth",
        "testDayOfDateMiddleOfMonth",
        "testDayOfDateEndOfMonth",
        "testDayOfDateTime",
        "testDayOfLeapYear",
        "testDayOfCollectionOfDates",
        "testDayOfPatientBirthDate",
        "testHourOfDateTime",
        "testHourOfDateTimeMidnight",
        "testHourOfDateTimeNoon",
        "testHourOfDateTimeWithTimezone",
        "testHourOfCollectionOfDateTimes",
        "testMinuteOfDateTime",
        "testMinuteOfDateTimeZero",
        "testMinuteOfDateTimeMax",
        "testMinuteOfDateTimeWithTimezone",
        "testMinuteOfCollectionOfDateTimes",
        "testMonthOfDateJanuary",
        "testMonthOfDateDecember",
        "testMonthOfDateTime",
        "testMonthOfDateTimeWithTimezone",
        "testMonthOfLeapYearFebruary",
        "testMonthOfCollectionOfDates",
        "testMonthOfObservationDate",
        "testSecondOfDateTime",
        "testSecondOfDateTimeZero",
        "testSecondOfDateTimeMax",
        "testSecondOfDateTimeWithTimezone",
        "testSecondOfCollectionOfDateTimes",
        "yearOfDate",
        "yearOfDateTime",
        "yearOfDateTimeWithTimezone",
        "yearOfLeapYear",
        "yearOfOldDate",
        "yearOfFutureDate",
        "yearOfEmptyCollection",
        "yearOfCollectionOfDates",
        "yearOfPatientBirthDate",
        "testTimezoneOffsetOfDateTimeUTC",
        "testTimezoneOffsetOfDateTimePositive",
        "testTimezoneOffsetOfDateTimeNegative",
        "testTimezoneOffsetOfDateTimePositiveMinutes",
        "testTimezoneOffsetOfCollectionOfDateTimes",
        "testPeriodInvariantOld",
        "testPeriodInvariantNew",
        "testPlusDate1",
        "testPlusDate2",
        "testPlusDate3",
        "testPlusDate4",
        "testPlusDate5",
        "testPlusDate6",
        "testPlusDate7",
        "testPlusDate8",
        "testPlusDate9",
        "testPlusDate10",
        "testPlusDate11",
        "testPlusDate12",
        "testPlusDate13",
        "testPlusDate15",
        "testPlusDate18",
        "testPlusDate19",
        "testPlusDate20",
        "testPlusDate21",
        "testPlusDate22",
        "testPlusTime1",
        "testPlusTime2",
        "testPlusTime3",
        "testMinus5",
        "testMinus7",
        "testMinus8"
      ]
    },
    "type_operations": {
      "name": "type_operations",
      "file_path": "groups/conversion/type_operations.json",
      "category": "conversion",
      "description": "Type operations including conversion, validation, and encoding functions",
      "source": "fhir-test-cases r5",
      "test_count": 3,
      "test_names": [
        "testToString1",
        "testToString2",
        "testToInteger1"
      ]
    },
    "integration_tests": {
      "name": "integration_tests",
      "file_path": "groups/other/integration_tests.json",
      "category": "other",
      "description": "Integration tests for FHIR resources, inheritance, and extensions",
      "source": "fhir-test-cases r5",
      "test_count": 2,
      "test_names": [
        "testObservation1",
        "testPatientName"
      ]
    },
    "boolean_logic": {
      "name": "boolean_logic",
      "file_path": "groups/boolean/boolean_logic.json",
      "category": "boolean",
      "description": "Boolean logic operations including operators, comparison, and conditional functions",
      "source": "fhir-test-cases r5",
      "test_count": 3,
      "test_names": [
        "testBooleanLogicAnd1",
        "testBooleanLogicOr1",
        "testEquality1"
      ]
    },
    "collection_operations": {
      "name": "collection_operations",
      "file_path": "groups/collection/collection_operations.json",
      "category": "collection",
      "description": "Collection operation tests including filtering, selection, aggregation, set operations, and ordering",
      "source": "fhir-test-cases r5",
      "test_count": 112,
      "test_names": [
        "testAllTrue1",
        "testAllTrue2",
        "testAllTrue3",
        "testAllTrue4",
        "testSelect1",
        "testSelect2",
        "testSelect3",
        "testWhere1",
        "testWhere2",
        "testWhere3",
        "testWhere4",
        "testDistinct1",
        "testDistinct2",
        "testDistinct3",
        "testDistinct4",
        "testDistinct5",
        "testDistinct6",
        "testUnion1",
        "testUnion2",
        "testUnion3",
        "testUnion4",
        "testUnion5",
        "testUnion6",
        "testUnion7",
        "testUnion8",
        "testUnion9",
        "testUnion10",
        "testUnion11",
        "testUnion12",
        "testIntersect1",
        "testIntersect2",
        "testIntersect3",
        "testIntersect4",
        "testExclude1",
        "testExclude2",
        "testExclude3",
        "testExclude4",
        "testSort1",
        "testSort2",
        "testSort3",
        "testSort4",
        "testSort5",
        "testSort6",
        "testSort7",
        "testSort8",
        "testSort9",
        "testSort10",
        "testCount1",
        "testCount2",
        "testCount3",
        "testCount4",
        "testExists1",
        "testExists2",
        "testExists3",
        "testExists4",
        "testExists5",
        "testFirstLast1",
        "testFirstLast2",
        "testTail1",
        "testTail2",
        "testTake1",
        "testTake2",
        "testTake3",
        "testTake4",
        "testTake5",
        "testTake6",
        "testTake7",
        "testSkip1",
        "testSkip2",
        "testSkip3",
        "testSkip4",
        "testSingle1",
        "testSingle2",
        "testAggregate1",
        "testAggregate2",
        "testAggregate3",
        "testAggregate4",
        "testSubSetOf1",
        "testSubSetOf2",
        "testSubSetOf3",
        "testSuperSetOf1",
        "testSuperSetOf2",
        "testContainsCollection1",
        "testContainsCollection2",
        "testContainsCollection3",
        "testContainsCollection4",
        "testContainsCollectionEmpty1",
        "testContainsCollectionEmpty2",
        "testContainsCollectionEmpty3",
        "testContainsCollectionEmpty4",
        "testContainsCollectionEmptyDateTime",
        "testIndexer1",
        "testIndexer2",
        "testRepeatBasic",
        "testRepeatAllBasic",
        "testRepeatDeduplication",
        "testRepeatEmpty",
        "testRepeatAllEmpty",
        "testRepeatIncompatibleArithmetic",
        "testRepeatAllIncompatibleArithmetic",
        "testRepeatSingleArgument",
        "testRepeatAllSingleArgument",
        "testRepeatNoArguments",
        "testRepeatAllNoArguments",
        "testRepeatSimpleProjection",
        "testRepeatAllSimpleProjection",
        "testRepeatFiniteSequence",
        "testRepeatAllFiniteSequence",
        "testRepeatInfiniteLoop",
        "testRepeatAllInfiniteLoop",
        "testRepeatInfiniteConstant",
        "testRepeatAllInfiniteConstant"
      ]
    },
    "comparison_operations": {
      "name": "comparison_operations",
      "file_path": "groups/comparison/comparison_operations.json",
      "category": "comparison",
      "description": "Comparison operation tests including greater than, less than, equality, equivalence operations",
      "source": "fhir-test-cases r5",
      "test_count": 218,
      "test_names": [
        "testGreaterThan1",
        "testGreaterThan2",
        "testGreaterThan3",
        "testGreaterThan4",
        "testGreaterThan5",
        "testGreaterThan6",
        "testGreaterThan7",
        "testGreaterThan8",
        "testGreaterThan9",
        "testGreaterThan10",
        "testGreaterThan11",
        "testGreaterThan12",
        "testGreaterThan13",
        "testGreaterThan14",
        "testGreaterThan15",
        "testGreaterThan16",
        "testGreaterThan17",
        "testGreaterThan18",
        "testGreaterThan19",
        "testGreaterThan20",
        "testGreaterThan21",
        "testGreaterThan22",
        "testGreaterThan23",
        "testGreaterThan24",
        "testGreaterThan25",
        "testGreaterThan26",
        "testGreaterThan27",
        "testGreaterThanEmpty1",
        "testGreaterThanEmpty2",
        "testGreaterThanEmpty3",
        "testGreatorOrEqual1",
        "testGreatorOrEqual2",
        "testGreatorOrEqual3",
        "testGreatorOrEqual4",
        "testGreatorOrEqual5",
        "testGreatorOrEqual6",
        "testGreatorOrEqual7",
        "testGreatorOrEqual8",
        "testGreatorOrEqual9",
        "testGreatorOrEqual10",
        "testGreatorOrEqual11",
        "testGreatorOrEqual12",
        "testGreatorOrEqual13",
        "testGreatorOrEqual14",
        "testGreatorOrEqual15",
        "testGreatorOrEqual16",
        "testGreatorOrEqual17",
        "testGreatorOrEqual18",
        "testGreatorOrEqual19",
        "testGreatorOrEqual20",
        "testGreatorOrEqual21",
        "testGreatorOrEqual22",
        "testGreatorOrEqual23",
        "testGreatorOrEqual24",
        "testGreatorOrEqual25",
        "testGreatorOrEqual26",
        "testGreatorOrEqual27",
        "testGreatorOrEqualEmpty1",
        "testGreatorOrEqualEmpty2",
        "testGreatorOrEqualEmpty3",
        "testLessThan1",
        "testLessThan2",
        "testLessThan3",
        "testLessThan4",
        "testLessThan5",
        "testLessThan6",
        "testLessThan7",
        "testLessThan8",
        "testLessThan9",
        "testLessThan10",
        "testLessThan11",
        "testLessThan12",
        "testLessThan13",
        "testLessThan14",
        "testLessThan15",
        "testLessThan16",
        "testLessThan17",
        "testLessThan18",
        "testLessThan19",
        "testLessThan20",
        "testLessThan21",
        "testLessThan22",
        "testLessThan23",
        "testLessThan24",
        "testLessThan25",
        "testLessThan26",
        "testLessThan27",
        "testLessThanEmpty1",
        "testLessThanEmpty2",
        "testLessThanEmpty3",
        "testLessOrEqual1",
        "testLessOrEqual2",
        "testLessOrEqual3",
        "testLessOrEqual4",
        "testLessOrEqual5",
        "testLessOrEqual6",
        "testLessOrEqual7",
        "testLessOrEqual8",
        "testLessOrEqual9",
        "testLessOrEqual10",
        "testLessOrEqual11",
        "testLessOrEqual12",
        "testLessOrEqual13",
        "testLessOrEqual14",
        "testLessOrEqual15",
        "testLessOrEqual16",
        "testLessOrEqual17",
        "testLessOrEqual18",
        "testLessOrEqual19",
        "testLessOrEqual20",
        "testLessOrEqual21",
        "testLessOrEqual22",
        "testLessOrEqual23",
        "testLessOrEqual24",
        "testLessOrEqual25",
        "testLessOrEqual26",
        "testLessOrEqual27",
        "testLessOrEqualEmpty1",
        "testLessOrEqualEmpty2",
        "testLessOrEqualEmpty3",
        "testEquality1",
        "testEquality2",
        "testEquality3",
        "testEquality4",
        "testEquality5",
        "testEquality6",
        "testEquality7",
        "testEquality8",
        "testEquality9",
        "testEquality10",
        "testEquality11",
        "testEquality12",
        "testEquality13",
        "testEquality14",
        "testEquality15",
        "testEquality16",
        "testEquality17",
        "testEquality18",
        "testEquality19",
        "testEquality20",
        "testEquality21",
        "testEquality22",
        "testEquality23",
        "testEquality24",
        "testEquality25",
        "testEquality26",
        "testEquality27",
        "testEquality28",
        "testNEquality1",
        "testNEquality2",
        "testNEquality3",
        "testNEquality4",
        "testNEquality5",
        "testNEquality6",
        "testNEquality7",
        "testNEquality8",
        "testNEquality9",
        "testNEquality10",
        "testNEquality11",
        "testNEquality12",
        "testNEquality13",
        "testNEquality14",
        "testNEquality15",
        "testNEquality16",
        "testNEquality17",
        "testNEquality18",
        "testNEquality19",
        "testNEquality20",
        "testNEquality21",
        "testNEquality22",
        "testNEquality23",
        "testNEquality24",
        "testEquivalent1",
        "testEquivalent2",
        "testEquivalent3",
        "testEquivalent4",
        "testEquivalent5",
        "testEquivalent6",
        "testEquivalent7",
        "testEquivalent8",
        "testEquivalent9",
        "testEquivalent10",
        "testEquivalent11",
        "testEquivalent12",
        "testEquivalent13",
        "testEquivalent14",
        "testEquivalent15",
        "testEquivalent16",
        "testEquivalent17",
        "testEquivalent18",
        "testEquivalent19",
        "testEquivalent20",
        "testEquivalent21",
        "testEquivalent22",
        "testEquivalent23",
        "testEquivalent24",
        "testNotEquivalent1",
        "testNotEquivalent2",
        "testNotEquivalent3",
        "testNotEquivalent4",
        "testNotEquivalent5",
        "testNotEquivalent6",
        "testNotEquivalent7",
        "testNotEquivalent8",
        "testNotEquivalent9",
        "testNotEquivalent10",
        "testNotEquivalent11",
        "testNotEquivalent12",
        "testNotEquivalent13",
        "testNotEquivalent14",
        "testNotEquivalent15",
        "testNotEquivalent16",
        "testNotEquivalent17",
        "testNotEquivalent18",
        "testNotEquivalent19",
        "testNotEquivalent20",
        "testNotEquivalent21",
        "testNotEquivalent22"
      ]
    },
    "math_operations": {
      "name": "math_operations",
      "file_path": "groups/math/math_operations.json",
      "category": "math",
      "description": "Mathematical operations including arithmetic, advanced functions, and rounding",
      "source": "fhir-test-cases r5",
      "test_count": 147,
      "test_names": [
        "testPlus1",
        "testPlus2",
        "testPlus3",
        "testPlus4",
        "testPlus5",
        "testPlusEmpty1",
        "testPlusEmpty2",
        "testPlusEmpty3",
        "testMinus1",
        "testMinus2",
        "testMinus3",
        "testMinus4",
        "testMinusEmpty1",
        "testMinusEmpty2",
        "testMinusEmpty3",
        "testMultiply1",
        "testMultiply2",
        "testMultiply3",
        "testMultiplyEmpty1",
        "testMultiplyEmpty2",
        "testMultiplyEmpty3",
        "testDivide1",
        "testDivide2",
        "testDivide3",
        "testDivide4",
        "testDivide5",
        "testDivide6",
        "testDivideEmpty1",
        "testDivideEmpty2",
        "testDivideEmpty3",
        "testDiv1",
        "testDiv2",
        "testDiv3",
        "testDiv4",
        "testDiv5",
        "testDivEmpty1",
        "testDivEmpty2",
        "testDivEmpty3",
        "testMod1",
        "testMod2",
        "testMod3",
        "testMod4",
        "testMod5",
        "testModEmpty1",
        "testModEmpty2",
        "testModEmpty3",
        "testPower1",
        "testPower2",
        "testPower3",
        "testPowerEmpty",
        "testPowerEmpty2",
        "testPowerEmpty3",
        "testAbs1",
        "testAbs2",
        "testAbs3",
        "testAbsEmpty",
        "testCeiling1",
        "testCeiling2",
        "testCeiling3",
        "testCeilingEmpty",
        "testFloor1",
        "testFloor2",
        "testFloor3",
        "testFloorEmpty",
        "testRound1",
        "testRound2",
        "testRoundEmpty",
        "testTruncate1",
        "testTruncate2",
        "testTruncate3",
        "testTruncateEmpty",
        "testSqrt1",
        "testSqrt2",
        "testSqrtEmpty",
        "testExp1",
        "testExp2",
        "testExp3",
        "testLn1",
        "testLn2",
        "testLnEmpty",
        "testLog1",
        "testLog2",
        "testLogEmpty",
        "testLogEmpty2",
        "testLogEmpty3",
        "Comparable1",
        "Comparable2",
        "Comparable3",
        "HighBoundaryDecimalDefault",
        "HighBoundaryDecimal1",
        "HighBoundaryDecimal2",
        "HighBoundaryDecimal3",
        "HighBoundaryDecimal4",
        "HighBoundaryDecimal5",
        "HighBoundaryDecimal6",
        "HighBoundaryDecimal7",
        "HighBoundaryDecimal8",
        "HighBoundaryDecimal9",
        "HighBoundaryDecimal10",
        "HighBoundaryDecimal11",
        "HighBoundaryDecimal12",
        "HighBoundaryDecimal13",
        "HighBoundaryDecimal14",
        "HighBoundaryDecimal15",
        "HighBoundaryDecimal16",
        "HighBoundaryDecimal",
        "HighBoundaryQuantity",
        "HighBoundaryDateMonth",
        "HighBoundaryDateTimeMillisecond1",
        "HighBoundaryDateTimeMillisecond2",
        "HighBoundaryDateTimeMillisecond3",
        "HighBoundaryTimeMillisecond",
        "LowBoundaryDecimalDefault",
        "LowBoundaryDecimal1",
        "LowBoundaryDecimal2",
        "LowBoundaryDecimal3",
        "LowBoundaryDecimal4",
        "LowBoundaryDecimal5",
        "LowBoundaryNegDecimalDefault",
        "LowBoundaryNegDecimal1",
        "LowBoundaryNegDecimal2",
        "LowBoundaryNegDecimal3",
        "LowBoundaryNegDecimal4",
        "LowBoundaryNegDecimal5",
        "LowBoundaryDecimal6",
        "LowBoundaryDecimal7",
        "LowBoundaryDecimal8",
        "LowBoundaryDecimal9",
        "LowBoundaryDecimal10",
        "LowBoundaryDecimal11",
        "LowBoundaryDecimal12",
        "LowBoundaryDecimal13",
        "LowBoundaryDecimal14",
        "LowBoundaryDecimal15",
        "LowBoundaryQuantity",
        "LowBoundaryDateMonth",
        "LowBoundaryDateTimeMillisecond1",
        "LowBoundaryDateTimeMillisecond2",
        "LowBoundaryDateTimeMillisecond3",
        "LowBoundaryTimeMillisecond",
        "PrecisionDecimal",
        "PrecisionYear",
        "PrecisionDateTimeMilliseconds",
        "PrecisionTimeMinutes",
        "PrecisionTimeMilliseconds",
        "PrecisionEmpty",
        "trivial"
      ]
    },
    "conversion_operations": {
      "name": "conversion_operations",
      "file_path": "groups/conversion/conversion_operations.json",
      "category": "conversion",
      "description": "Type conversion and encoding/decoding operation tests",
      "source": "fhir-test-cases r5",
      "test_count": 27,
      "test_names": [
        "testToDecimal1",
        "testToDecimal2",
        "testToDecimal3",
        "testToDecimal4",
        "testToDecimal5",
        "testToString1",
        "testToString2",
        "testToString3",
        "testToString4",
        "testToString5",
        "testToInteger1",
        "testToInteger2",
        "testToInteger3",
        "testToInteger4",
        "testToInteger5",
        "testEncodeBase64A",
        "testEncodeHex",
        "testEncodeBase64B",
        "testEncodeUrlBase64",
        "testDecodeBase64A",
        "testDecodeHex",
        "testDecodeBase64B",
        "testDecodeUrlBase64",
        "testEscapeHtml",
        "testEscapeJson",
        "testUnescapeHtml",
        "testUnescapeJson"
      ]
    }
  },
  "test_cases": {
    "testUnion7": {
      "name": "testUnion7",
      "expression": "1.combine(1).count() = 2",
      "category": "collection",
      "subcategory": "set_operations",
      "tags": [
        "r5-xml",
        "testUnion"
      ],
      "description": "combine function with duplicates",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testMinus4": {
      "name": "testMinus4",
      "expression": "'a'-'b' = 'ab'",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testMinus",
        "other_operations"
      ],
      "description": null,
      "expect_error": true,
      "invalid_kind": "execution",
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testEndsWith9": {
      "name": "testEndsWith9",
      "expression": "{}.endsWith('').empty() = true",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testEndsWith"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testLessOrEqual4": {
      "name": "testLessOrEqual4",
      "expression": "'A' <= 'a'",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessOrEqual"
      ],
      "description": "Test less than or equal operator with case-sensitive string comparison",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "LowBoundaryNegDecimal1": {
      "name": "LowBoundaryNegDecimal1",
      "expression": "(-1.587).lowBoundary(6)",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "LowBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testPlusDate21": {
      "name": "testPlusDate21",
      "expression": "@1973-12-25T00:00:00.000+10:00 + 1 'min'",
      "category": "dates",
      "subcategory": "periods",
      "tags": [
        "date_time_operations",
        "r5-xml",
        "testPlus"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testGreatorOrEqual21": {
      "name": "testGreatorOrEqual21",
      "expression": "@T12:00:01 >= @T12:00:00",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreatorOrEqual"
      ],
      "description": "Test greater than or equal operator with time values where first time is later than second",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testTrueLiteralConvertsToBoolean": {
      "name": "testTrueLiteralConvertsToBoolean",
      "expression": "true.convertsToBoolean()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testLiteralQuantityDecimal": {
      "name": "testLiteralQuantityDecimal",
      "expression": "10.1 'mg'.convertsToQuantity()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testStringDayConvertsToDateTime": {
      "name": "testStringDayConvertsToDateTime",
      "expression": "'2015-02-04'.convertsToDateTime()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testMinuteOfCollectionOfDateTimes": {
      "name": "testMinuteOfCollectionOfDateTimes",
      "expression": "(@2023-05-15T14:15:00 | @2023-05-15T14:30:00 | @2023-05-15T14:45:00).minuteOf()",
      "category": "dates",
      "subcategory": "extraction",
      "tags": [
        "date_time_operations",
        "fhirpath-lab",
        "testMinuteOf"
      ],
      "description": null,
      "expect_error": true,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testSort5": {
      "name": "testSort5",
      "expression": "(1 | 2 | 3).sort(-$this) = (3 | 2 | 1)",
      "category": "collection",
      "subcategory": "ordering",
      "tags": [
        "r5-xml",
        "testSort"
      ],
      "description": "sort function with negative $this expression (descending)",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testAllTrue4": {
      "name": "testAllTrue4",
      "expression": "Patient.name.all(period.exists())",
      "category": "collection",
      "subcategory": "aggregation",
      "tags": [
        "r5-xml",
        "testAll"
      ],
      "description": "all function returning false",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testCount4": {
      "name": "testCount4",
      "expression": "Patient.name.first().count() = 1",
      "category": "collection",
      "subcategory": "aggregation",
      "tags": [
        "r5-xml",
        "testCount"
      ],
      "description": "count function on single element with equality",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testNotEquivalent11": {
      "name": "testNotEquivalent11",
      "expression": "0 !~ 0",
      "category": "comparison",
      "subcategory": "equivalence",
      "tags": [
        "r5-xml",
        "testNotEquivalent"
      ],
      "description": "Test not equivalent operator with zero values",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testFHIRPathAsFunction24": {
      "name": "testFHIRPathAsFunction24",
      "expression": "Patient.gender.ofType(string1)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testInheritance",
        "other_operations"
      ],
      "description": null,
      "expect_error": true,
      "invalid_kind": "execution",
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "dvConceptMapExample": {
      "name": "dvConceptMapExample",
      "expression": "group.select(\n\t\t\t\tdefineVariable('grp')\n\t\t\t\t.element\n\t\t\t\t.select(\n\t\t\t\t\tdefineVariable('ele')\n\t\t\t\t\t.target\n\t\t\t\t\t.select(%grp.source & '|' & %ele.code & ' ' & relationship & ' ' & %grp.target & '|' & code)\n\t\t\t\t)\n\t\t\t)\n\t\t\t.trace('all')\n\t\t\t.isDistinct()",
      "category": "other",
      "subcategory": "variables",
      "tags": [
        "r5-xml",
        "defineVariable"
      ],
      "description": "realistic example with conceptmap",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testToday2": {
      "name": "testToday2",
      "expression": "today().toString().length() = 10",
      "category": "dates",
      "subcategory": "conversion",
      "tags": [
        "date_time_operations",
        "r5-xml",
        "testToday"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testCollectionBoolean1": {
      "name": "testCollectionBoolean1",
      "expression": "iif(1 | 2 | 3, true, false)",
      "category": "boolean",
      "subcategory": "conditional",
      "tags": [
        "r5-xml",
        "testCollectionBoolean"
      ],
      "description": "iif function with multi-element collection (semantic error)",
      "expect_error": true,
      "invalid_kind": "semantic",
      "file_path": "groups/boolean/boolean_operations.json",
      "suite_name": "boolean_operations"
    },
    "testGreaterThan22": {
      "name": "testGreaterThan22",
      "expression": "Observation.value > 100 '[lb_av]'",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreaterThan"
      ],
      "description": "Test greater than operator with quantity values",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testIif5": {
      "name": "testIif5",
      "expression": "iif(false, 'true-result').empty()",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testIif",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testStringDayConvertsToDate": {
      "name": "testStringDayConvertsToDate",
      "expression": "'2015-02-04'.convertsToDate()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testBooleanLiteralConvertsToQuantity": {
      "name": "testBooleanLiteralConvertsToQuantity",
      "expression": "true.convertsToQuantity()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testRepeatIncompatibleArithmetic": {
      "name": "testRepeatIncompatibleArithmetic",
      "expression": "'1'.repeat($this + 1)",
      "category": "collection",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "repeat-safety"
      ],
      "description": "Repeat function with incompatible arithmetic",
      "expect_error": true,
      "invalid_kind": "execution",
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testFHIRPathIsFunction5": {
      "name": "testFHIRPathIsFunction5",
      "expression": "Questionnaire.url.is(url)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testInheritance",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testStartsWith4": {
      "name": "testStartsWith4",
      "expression": "'12345'.startsWith('13') = false",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testStartsWith"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testDistinct5": {
      "name": "testDistinct5",
      "expression": "Questionnaire.descendants().linkId.distinct().count()",
      "category": "collection",
      "subcategory": "set_operations",
      "tags": [
        "r5-xml",
        "testDistinct"
      ],
      "description": "distinct with count",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testGreaterThan25": {
      "name": "testGreaterThan25",
      "expression": "@T10:30 > @T10:30:00",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreaterThan"
      ],
      "description": "Test greater than operator with different precision time values resulting in empty collection",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testGreaterThanEmpty3": {
      "name": "testGreaterThanEmpty3",
      "expression": "{} > {}",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreaterThan"
      ],
      "description": "Test greater than operator with empty collections",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testDiv5": {
      "name": "testDiv5",
      "expression": "5 div 0",
      "category": "math",
      "subcategory": "arithmetic",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testVariables1": {
      "name": "testVariables1",
      "expression": "%sct = 'http://snomed.info/sct'",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testVariables",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testMod4": {
      "name": "testMod4",
      "expression": "2.2 mod 1.8 = 0.4",
      "category": "math",
      "subcategory": "arithmetic",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testEquality4": {
      "name": "testEquality4",
      "expression": "(1) = (1)",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testEquality"
      ],
      "description": "Test equality operator with parenthesized equal integers",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testFHIRPathAsFunction15": {
      "name": "testFHIRPathAsFunction15",
      "expression": "ValueSet.version.as(code)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testInheritance",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testRepeatEmpty": {
      "name": "testRepeatEmpty",
      "expression": "{}.repeat($this + 1).empty()",
      "category": "collection",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "repeat-empty"
      ],
      "description": "Repeat function with empty input",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testFHIRPathAsFunction23": {
      "name": "testFHIRPathAsFunction23",
      "expression": "Patient.gender.as(string1)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testInheritance",
        "other_operations"
      ],
      "description": null,
      "expect_error": true,
      "invalid_kind": "execution",
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testTrim1": {
      "name": "testTrim1",
      "expression": "'123456'.trim().length() = 6",
      "category": "string",
      "subcategory": "manipulation",
      "tags": [
        "r5-xml",
        "string_operations",
        "testTrim"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testRoundEmpty": {
      "name": "testRoundEmpty",
      "expression": "{}.round().empty()",
      "category": "math",
      "subcategory": "rounding",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testRepeat4": {
      "name": "testRepeat4",
      "expression": "Questionnaire.children().code.count() = 2",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testRepeat",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testBooleanLogicAnd4": {
      "name": "testBooleanLogicAnd4",
      "expression": "(false and true) = false",
      "category": "boolean",
      "subcategory": "logical_and",
      "tags": [
        "r5-xml",
        "testBooleanLogicAnd"
      ],
      "description": "Boolean AND with false and true",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/boolean/boolean_operations.json",
      "suite_name": "boolean_operations"
    },
    "testSort3": {
      "name": "testSort3",
      "expression": "(1 | 2 | 3).sort($this) = (1 | 2 | 3)",
      "category": "collection",
      "subcategory": "ordering",
      "tags": [
        "r5-xml",
        "testSort"
      ],
      "description": "sort function with $this expression",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testExists5": {
      "name": "testExists5",
      "expression": "(1 | 2).exists()",
      "category": "collection",
      "subcategory": "aggregation",
      "tags": [
        "r5-xml",
        "testExists"
      ],
      "description": "exists function on collection",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testSkip3": {
      "name": "testSkip3",
      "expression": "Patient.name.skip(1).given.trace('test') = 'Jim' | 'Peter' | 'James'",
      "category": "collection",
      "subcategory": "filtering",
      "tags": [
        "r5-xml",
        "testSkip"
      ],
      "description": "skip function with real data",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testPrecedence5": {
      "name": "testPrecedence5",
      "expression": "true and '0215' in ('0215' | '0216')",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testPrecedence",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testReplaceMatches6": {
      "name": "testReplaceMatches6",
      "expression": "'123'.replaceMatches('2', {}).empty() = true",
      "category": "string",
      "subcategory": "manipulation",
      "tags": [
        "r5-xml",
        "string_operations",
        "testReplaceMatches"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testLessOrEqual26": {
      "name": "testLessOrEqual26",
      "expression": "@2018-03-01T10:30:00  <= @2018-03-01T10:30:00.0",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessOrEqual"
      ],
      "description": "Test less than or equal operator with equivalent datetime values with different precision",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testNEquality16": {
      "name": "testNEquality16",
      "expression": "@2012-04-15T15:30:31 != @2012-04-15T15:30:31.1",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testNEquality"
      ],
      "description": "Test not equal operator with datetime values differing by milliseconds",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testDivideEmpty1": {
      "name": "testDivideEmpty1",
      "expression": "1 / {}",
      "category": "math",
      "subcategory": "arithmetic",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testReplace6": {
      "name": "testReplace6",
      "expression": "'123'.replace('2', {}).empty() = true",
      "category": "string",
      "subcategory": "manipulation",
      "tags": [
        "r5-xml",
        "string_operations",
        "testReplace"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testTimezoneOffsetOfCollectionOfDateTimes": {
      "name": "testTimezoneOffsetOfCollectionOfDateTimes",
      "expression": "(@2023-05-15T14:30:00Z | @2023-05-15T14:30:00+02:00 | @2023-05-15T14:30:00-03:00).timezoneOffsetOf()",
      "category": "dates",
      "subcategory": "extraction",
      "tags": [
        "date_time_operations",
        "fhirpath-lab",
        "testTimezoneOffsetOf"
      ],
      "description": null,
      "expect_error": true,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "LowBoundaryDecimal6": {
      "name": "LowBoundaryDecimal6",
      "expression": "1.587.lowBoundary(39)",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "LowBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testUnescapeHtmlQuotes": {
      "name": "testUnescapeHtmlQuotes",
      "expression": "'Say &quot;hello&quot;'.unescape('html')",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "custom",
        "testEscapeHtmlCustom",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "from-zulip-2": {
      "name": "from-zulip-2",
      "expression": "(true | 'foo').allTrue()",
      "category": "boolean",
      "subcategory": "logical_or",
      "tags": [
        "r5-xml",
        "from-Zulip"
      ],
      "description": "boolean or with string operand (execution error)",
      "expect_error": true,
      "invalid_kind": "execution",
      "file_path": "groups/boolean/boolean_operations.json",
      "suite_name": "boolean_operations"
    },
    "testQuantityLiteralWeekToString": {
      "name": "testQuantityLiteralWeekToString",
      "expression": "1 week.toString()",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testNotEquivalent10": {
      "name": "testNotEquivalent10",
      "expression": "1.10 !~ 1.1",
      "category": "comparison",
      "subcategory": "equivalence",
      "tags": [
        "r5-xml",
        "testNotEquivalent"
      ],
      "description": "Test not equivalent operator with equivalent decimals of different precision",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testLogEmpty": {
      "name": "testLogEmpty",
      "expression": "{}.log(10).empty()",
      "category": "math",
      "subcategory": "advanced",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testMultiplyEmpty3": {
      "name": "testMultiplyEmpty3",
      "expression": "{} * {}",
      "category": "math",
      "subcategory": "arithmetic",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testPowerEmpty3": {
      "name": "testPowerEmpty3",
      "expression": "2.5.power({}).empty()",
      "category": "math",
      "subcategory": "advanced",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testSubstring9": {
      "name": "testSubstring9",
      "expression": "{}.substring(25).empty() = true",
      "category": "string",
      "subcategory": "manipulation",
      "tags": [
        "r5-xml",
        "string_operations",
        "testSubstring"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testTruncate2": {
      "name": "testTruncate2",
      "expression": "1.00000001.truncate() = 1",
      "category": "math",
      "subcategory": "rounding",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testFloorEmpty": {
      "name": "testFloorEmpty",
      "expression": "{}.floor().empty()",
      "category": "math",
      "subcategory": "rounding",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testObservation1": {
      "name": "testObservation1",
      "expression": "Observation.value.exists()",
      "category": "other",
      "subcategory": "fhir_resources",
      "tags": [
        "integration_tests"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/integration_tests.json",
      "suite_name": "integration_tests"
    },
    "testPolymorphismAsAFunction": {
      "name": "testPolymorphismAsAFunction",
      "expression": "(Observation.value as Quantity).unit",
      "category": "other",
      "subcategory": "navigation",
      "tags": [
        "r5-xml",
        "testObservations",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testLiteralString1": {
      "name": "testLiteralString1",
      "expression": "Patient.name.given.first() = 'Peter'",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testStringMonthConvertsToDate": {
      "name": "testStringMonthConvertsToDate",
      "expression": "'2015-02'.convertsToDate()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testQuantity7": {
      "name": "testQuantity7",
      "expression": "6 days < 1 week",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testQuantity",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testDivideEmpty3": {
      "name": "testDivideEmpty3",
      "expression": "{} / {}",
      "category": "math",
      "subcategory": "arithmetic",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testToDateTimeFromString": {
      "name": "testToDateTimeFromString",
      "expression": "'1974-12-25'.toDateTime()",
      "category": "dates",
      "subcategory": "conversion",
      "tags": [
        "date_time_operations",
        "testToDateTime"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testLessThan20": {
      "name": "testLessThan20",
      "expression": "@2014-12-13T12:00:01 < @2014-12-13T12:00:00",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessThan"
      ],
      "description": "Test less than operator with datetime values where first is later than second",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testDivEmpty1": {
      "name": "testDivEmpty1",
      "expression": "1 div {}",
      "category": "math",
      "subcategory": "arithmetic",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "HighBoundaryDecimal": {
      "name": "HighBoundaryDecimal",
      "expression": "1.587.highBoundary(8)",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "HighBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testIntegerLiteralToBooleanEmpty": {
      "name": "testIntegerLiteralToBooleanEmpty",
      "expression": "2.toBoolean()",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testFHIRPathIsFunction2": {
      "name": "testFHIRPathIsFunction2",
      "expression": "Patient.gender.is(string)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testInheritance",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testSimple": {
      "name": "testSimple",
      "expression": "name.given",
      "category": "other",
      "subcategory": "navigation",
      "tags": [
        "r5-xml",
        "testBasics",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testQuantity10": {
      "name": "testQuantity10",
      "expression": "4.0 'g' / 2.0 'm' = 2 'g/m'",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testQuantity",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "defineVariable19": {
      "name": "defineVariable19",
      "expression": "defineVariable(defineVariable('param','ppp').select(%param), defineVariable('param','value').select(%param)).select(%ppp)",
      "category": "other",
      "subcategory": "variables",
      "tags": [
        "r5-xml",
        "defineVariable"
      ],
      "description": "defineVariable in function parameters (1)",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testPlusDate1": {
      "name": "testPlusDate1",
      "expression": "@1973-12-25 + 7 days",
      "category": "dates",
      "subcategory": "periods",
      "tags": [
        "date_time_operations",
        "r5-xml",
        "testPlus"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testHasTemplateId3": {
      "name": "testHasTemplateId3",
      "expression": "recordTarget.patientRole.hasTemplateIdOf('http://hl7.org/cda/us/ccda/StructureDefinition/ContinuityofCareDocumentCCD')",
      "category": "other",
      "subcategory": "cda",
      "tags": [
        "r5-xml",
        "cdaTests"
      ],
      "description": "hasTemplateIdOf function with non-matching context",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testStringMonthConvertsToDateTime": {
      "name": "testStringMonthConvertsToDateTime",
      "expression": "'2015-02'.convertsToDateTime()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testVariables2": {
      "name": "testVariables2",
      "expression": "%loinc = 'http://loinc.org'",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testVariables",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "defineVariable12": {
      "name": "defineVariable12",
      "expression": "Patient.name.defineVariable('n1', first()).active | Patient.name.defineVariable('n2', skip(1).first()).select(%n1.given)",
      "category": "analyzer",
      "subcategory": null,
      "tags": [
        "r5-xml",
        "analyzer"
      ],
      "description": "defineVariable() could not be the first child",
      "expect_error": true,
      "invalid_kind": "semantic",
      "file_path": "groups/analyzer/analyzer.json",
      "suite_name": "analyzer"
    },
    "testLiteralDateMonth": {
      "name": "testLiteralDateMonth",
      "expression": "@2015-02.is(Date)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testIif12": {
      "name": "testIif12",
      "expression": "Patient.name.first().iif(text.exists(), text, family+given.first())",
      "category": "other",
      "subcategory": "navigation",
      "tags": [
        "r5-xml",
        "testIif",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testStringDecimalLiteralConvertsToDecimal": {
      "name": "testStringDecimalLiteralConvertsToDecimal",
      "expression": "'1.0'.convertsToDecimal()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testStringTrueToBoolean": {
      "name": "testStringTrueToBoolean",
      "expression": "'true'.toBoolean()",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testLiteralDateTimeYear": {
      "name": "testLiteralDateTimeYear",
      "expression": "@2015T.is(DateTime)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testDollarOrderNotAllowed": {
      "name": "testDollarOrderNotAllowed",
      "expression": "Patient.children().skip(1)",
      "category": "analyzer",
      "subcategory": null,
      "tags": [
        "r5-xml",
        "analyzer"
      ],
      "description": null,
      "expect_error": true,
      "invalid_kind": "semantic",
      "file_path": "groups/analyzer/analyzer.json",
      "suite_name": "analyzer"
    },
    "testTake5": {
      "name": "testTake5",
      "expression": "Patient.name.take(3).given.count() = 5",
      "category": "collection",
      "subcategory": "filtering",
      "tags": [
        "r5-xml",
        "testTake"
      ],
      "description": "take function with all elements",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testGreaterThan12": {
      "name": "testGreaterThan12",
      "expression": "@2014-12-12 > @2014-12-12",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreaterThan"
      ],
      "description": "Test greater than operator with equal dates",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testSort6": {
      "name": "testSort6",
      "expression": "('a' | 'b' | 'c').sort($this) = ('a' | 'b' | 'c')",
      "category": "collection",
      "subcategory": "ordering",
      "tags": [
        "r5-xml",
        "testSort"
      ],
      "description": "sort function with strings ascending",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testBooleanLogicOr8": {
      "name": "testBooleanLogicOr8",
      "expression": "({} or false).empty()",
      "category": "boolean",
      "subcategory": "logical_or",
      "tags": [
        "r5-xml",
        "testBooleanLogicOr"
      ],
      "description": "Boolean OR with empty collection and false",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/boolean/boolean_operations.json",
      "suite_name": "boolean_operations"
    },
    "testStartsWith8": {
      "name": "testStartsWith8",
      "expression": "{}.startsWith('1').empty() = true",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testStartsWith"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testDecodeBase64A": {
      "name": "testDecodeBase64A",
      "expression": "'dGVzdA=='.decode('base64')",
      "category": "conversion",
      "subcategory": "encoding",
      "tags": [
        "r5-xml",
        "testEncodeDecode"
      ],
      "description": "Decode base64 to string",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/conversion/conversion_operations.json",
      "suite_name": "conversion_operations"
    },
    "testTail2": {
      "name": "testTail2",
      "expression": "Patient.name.tail().given = 'Jim' | 'Peter' | 'James'",
      "category": "collection",
      "subcategory": "filtering",
      "tags": [
        "r5-xml",
        "testTail"
      ],
      "description": "tail function with real data",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testStringIntegerLiteralToInteger": {
      "name": "testStringIntegerLiteralToInteger",
      "expression": "'1'.toInteger() = 1",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testStringMillisecondConvertsToTime": {
      "name": "testStringMillisecondConvertsToTime",
      "expression": "'14:34:28.123'.convertsToTime()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testStartsWith11": {
      "name": "testStartsWith11",
      "expression": "{}.startsWith('').exists() = false",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testStartsWith"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testContainsCollectionEmpty2": {
      "name": "testContainsCollectionEmpty2",
      "expression": "{} contains 'value'",
      "category": "collection",
      "subcategory": "set_operations",
      "tags": [
        "r5-xml",
        "testContainsCollection"
      ],
      "description": "contains function with empty collection and string",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testPlusDate19": {
      "name": "testPlusDate19",
      "expression": "@1973-12-25T00:00:00.000+10:00 + 0.1 's'",
      "category": "dates",
      "subcategory": "periods",
      "tags": [
        "date_time_operations",
        "r5-xml",
        "testPlus"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testCeiling2": {
      "name": "testCeiling2",
      "expression": "(-1.1).ceiling() = -1",
      "category": "math",
      "subcategory": "rounding",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testBooleanLogicAnd1": {
      "name": "testBooleanLogicAnd1",
      "expression": "(true and true) = true",
      "category": "boolean",
      "subcategory": "logical_and",
      "tags": [
        "r5-xml",
        "testBooleanLogicAnd"
      ],
      "description": "Boolean AND with both true",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/boolean/boolean_operations.json",
      "suite_name": "boolean_operations"
    },
    "testMatchesFullWithinUrl3": {
      "name": "testMatchesFullWithinUrl3",
      "expression": "'http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1'.matchesFull('Library')",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testMatches"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testDateNotEqualTimeSecond": {
      "name": "testDateNotEqualTimeSecond",
      "expression": "Patient.birthDate != @T12:14:15",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testType5": {
      "name": "testType5",
      "expression": "true.is(Boolean)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testType",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testDayOfCollectionOfDates": {
      "name": "testDayOfCollectionOfDates",
      "expression": "(@2023-01-01 | @2023-05-15 | @2023-12-31).dayOf()",
      "category": "dates",
      "subcategory": "extraction",
      "tags": [
        "date_time_operations",
        "fhirpath-lab",
        "testDayOf"
      ],
      "description": null,
      "expect_error": true,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testNotEquivalent3": {
      "name": "testNotEquivalent3",
      "expression": "{} !~ 1",
      "category": "comparison",
      "subcategory": "equivalence",
      "tags": [
        "r5-xml",
        "testNotEquivalent"
      ],
      "description": "Test not equivalent operator with empty collection compared to value",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testGreaterThan21": {
      "name": "testGreaterThan21",
      "expression": "@T12:00:01 > @T12:00:00",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreaterThan"
      ],
      "description": "Test greater than operator with time values where first time is later than second",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testLessOrEqual13": {
      "name": "testLessOrEqual13",
      "expression": "@2014-12-13T12:00:00 <= @2014-12-13T12:00:00",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessOrEqual"
      ],
      "description": "Test less than or equal operator with equal datetime values",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testAllTrue2": {
      "name": "testAllTrue2",
      "expression": "Patient.name.select(period.exists()).allTrue()",
      "category": "collection",
      "subcategory": "aggregation",
      "tags": [
        "r5-xml",
        "testAll"
      ],
      "description": "allTrue function returning false",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testContainsString10": {
      "name": "testContainsString10",
      "expression": "'123456789'.select(contains(length().toString()))",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testContainsString"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testToDateTimeFromDate": {
      "name": "testToDateTimeFromDate",
      "expression": "Patient.birthDate.toDateTime()",
      "category": "dates",
      "subcategory": "conversion",
      "tags": [
        "date_time_operations",
        "testToDateTime"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testUnion12": {
      "name": "testUnion12",
      "expression": "true | Patient.name.given.first()",
      "category": "collection",
      "subcategory": "set_operations",
      "tags": [
        "r5-xml",
        "testUnion"
      ],
      "description": "union with different types",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testIndexOf6": {
      "name": "testIndexOf6",
      "expression": "{}.indexOf({}).empty() = true",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testIndexOf"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testPrecedence3": {
      "name": "testPrecedence3",
      "expression": "1 > 2 is Boolean",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testPrecedence",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testLessOrEqual20": {
      "name": "testLessOrEqual20",
      "expression": "@2014-12-13T12:00:01 <= @2014-12-13T12:00:00",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessOrEqual"
      ],
      "description": "Test less than or equal operator with datetime values where first is later than second",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testMinusEmpty2": {
      "name": "testMinusEmpty2",
      "expression": "{} - 1",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testMinus",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testStartsWith7": {
      "name": "testStartsWith7",
      "expression": "'12345'.startsWith('') = true",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testStartsWith"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testLessThan17": {
      "name": "testLessThan17",
      "expression": "'b' < 'a'",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessThan"
      ],
      "description": "Test less than operator with strings where first operand is greater than second alphabetically",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testAbs3": {
      "name": "testAbs3",
      "expression": "(-5.5 'mg').abs() = 5.5 'mg'",
      "category": "math",
      "subcategory": "advanced",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testGreaterThan4": {
      "name": "testGreaterThan4",
      "expression": "'A' > 'a'",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreaterThan"
      ],
      "description": "Test greater than operator with case-sensitive string comparison",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testEndsWith5": {
      "name": "testEndsWith5",
      "expression": "'12345'.endsWith('12345') = true",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testEndsWith"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testSubstring11": {
      "name": "testSubstring11",
      "expression": "{}.substring({}).empty() = true",
      "category": "string",
      "subcategory": "manipulation",
      "tags": [
        "r5-xml",
        "string_operations",
        "testSubstring"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testEquality27": {
      "name": "testEquality27",
      "expression": "name.take(2) = name.take(2).last() | name.take(2).first()",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testEquality"
      ],
      "description": "Test equality operator with collection and its reordered version",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testPeriodInvariantNew": {
      "name": "testPeriodInvariantNew",
      "expression": "Patient.identifier.period.all(start.empty() or end.empty() or (start.lowBoundary() < end.highBoundary()))",
      "category": "dates",
      "subcategory": "periods",
      "tags": [
        "date_time_operations",
        "r5-xml",
        "period"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testUnion4": {
      "name": "testUnion4",
      "expression": "1.union(2).union(3).count() = 3",
      "category": "collection",
      "subcategory": "set_operations",
      "tags": [
        "r5-xml",
        "testUnion"
      ],
      "description": "union function chaining",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testDollarOrderAllowed": {
      "name": "testDollarOrderAllowed",
      "expression": "Patient.name.skip(1).given",
      "category": "other",
      "subcategory": "navigation",
      "tags": [
        "r5-xml",
        "testDollar",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testNEquality21": {
      "name": "testNEquality21",
      "expression": "name.take(2) != name.take(2).last() | name.take(2).first()",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testNEquality"
      ],
      "description": "Test not equal operator with collection and its reordered version",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testLessThan22": {
      "name": "testLessThan22",
      "expression": "Observation.value < 200 '[lb_av]'",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessThan"
      ],
      "description": "Test less than operator with quantity values",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testPolarityPrecedence": {
      "name": "testPolarityPrecedence",
      "expression": "-Patient.name.given.count() = -5",
      "category": "other",
      "subcategory": "navigation",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testLiteralIntegerLessThanFalse": {
      "name": "testLiteralIntegerLessThanFalse",
      "expression": "1 < -2",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testContainedId": {
      "name": "testContainedId",
      "expression": "contained.id",
      "category": "other",
      "subcategory": "navigation",
      "tags": [
        "r5-xml",
        "miscEngineTests"
      ],
      "description": "Accessing contained resource id",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testComment2": {
      "name": "testComment2",
      "expression": "// This is a multi line comment using // that\n  // should not fail during parsing\n  2+2",
      "category": "analyzer",
      "subcategory": "syntax",
      "tags": [
        "r5-xml",
        "comments"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/analyzer/analyzer.json",
      "suite_name": "analyzer"
    },
    "defineVariable4": {
      "name": "defineVariable4",
      "expression": "defineVariable('n1', name.first()).select(%n1.given) | defineVariable('n1', name.skip(1).first()).select(%n1.given)",
      "category": "other",
      "subcategory": "variables",
      "tags": [
        "r5-xml",
        "defineVariable"
      ],
      "description": "use of a variable in separate contexts",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "HighBoundaryDateTimeMillisecond2": {
      "name": "HighBoundaryDateTimeMillisecond2",
      "expression": "@2014-01-01T08:05-05:00.highBoundary(17)",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "HighBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testGreatorOrEqual10": {
      "name": "testGreatorOrEqual10",
      "expression": "'a' >= 'a'",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreatorOrEqual"
      ],
      "description": "Test greater than or equal operator with equal strings",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testGreaterThanEmpty1": {
      "name": "testGreaterThanEmpty1",
      "expression": "1 > {}",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreaterThan"
      ],
      "description": "Test greater than operator with value compared to empty collection",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testLessOrEqualEmpty3": {
      "name": "testLessOrEqualEmpty3",
      "expression": "{} <= {}",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessOrEqual"
      ],
      "description": "Test less than or equal operator with empty collections",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testResolveContained": {
      "name": "testResolveContained",
      "expression": "DiagnosticReport.specimen.resolve().resourceType",
      "category": "other",
      "subcategory": "navigation",
      "tags": [
        "resolve",
        "contained"
      ],
      "description": "Resolve() function with contained resources",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testLessOrEqual15": {
      "name": "testLessOrEqual15",
      "expression": "2 <= 1",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessOrEqual"
      ],
      "description": "Test less than or equal operator with integers where first operand is greater than second",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testStringMinuteConvertsToTime": {
      "name": "testStringMinuteConvertsToTime",
      "expression": "'14:34'.convertsToTime()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "HighBoundaryDateMonth": {
      "name": "HighBoundaryDateMonth",
      "expression": "@2014.highBoundary(6)",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "HighBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testMatchesWithinUrl4": {
      "name": "testMatchesWithinUrl4",
      "expression": "'http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1'.matches('Measure')",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testMatches"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testPower2": {
      "name": "testPower2",
      "expression": "2.5.power(2) = 6.25",
      "category": "math",
      "subcategory": "advanced",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testCollectionBoolean4": {
      "name": "testCollectionBoolean4",
      "expression": "iif({} | true, true, false)",
      "category": "boolean",
      "subcategory": "conditional",
      "tags": [
        "r5-xml",
        "testCollectionBoolean"
      ],
      "description": "iif function with union condition",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/boolean/boolean_operations.json",
      "suite_name": "boolean_operations"
    },
    "testCeiling1": {
      "name": "testCeiling1",
      "expression": "1.ceiling() = 1",
      "category": "math",
      "subcategory": "rounding",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testPolymorphicsA": {
      "name": "testPolymorphicsA",
      "expression": "Observation.value.exists()",
      "category": "analyzer",
      "subcategory": "semantic",
      "tags": [
        "r5-xml",
        "polymorphics"
      ],
      "description": "Polymorphic field access (valid case)",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/analyzer/analyzer.json",
      "suite_name": "analyzer"
    },
    "HighBoundaryDecimal2": {
      "name": "HighBoundaryDecimal2",
      "expression": "1.587.highBoundary(6)",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "HighBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testBooleanLiteralConvertsToDecimal": {
      "name": "testBooleanLiteralConvertsToDecimal",
      "expression": "true.convertsToDecimal()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testComment8": {
      "name": "testComment8",
      "expression": "2 + 2 /* not finished",
      "category": "analyzer",
      "subcategory": "syntax",
      "tags": [
        "r5-xml",
        "comments"
      ],
      "description": null,
      "expect_error": true,
      "invalid_kind": "syntax",
      "file_path": "groups/analyzer/analyzer.json",
      "suite_name": "analyzer"
    },
    "testPatientTelecomTypes": {
      "name": "testPatientTelecomTypes",
      "expression": "telecom.use",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testMiscellaneousAccessorTests",
        "other_operations"
      ],
      "description": "patient telecom types",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testLiteralString2": {
      "name": "testLiteralString2",
      "expression": "'test'.convertsToString()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "dvParametersDontColide": {
      "name": "dvParametersDontColide",
      "expression": "'aaa'.replace(defineVariable('param', 'aaa').select(%param), defineVariable('param','bbb').select(%param))",
      "category": "other",
      "subcategory": "variables",
      "tags": [
        "r5-xml",
        "defineVariable"
      ],
      "description": "defineVariable in function parameters (2)",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testContainsCollectionEmpty3": {
      "name": "testContainsCollectionEmpty3",
      "expression": "{} contains true",
      "category": "collection",
      "subcategory": "set_operations",
      "tags": [
        "r5-xml",
        "testContainsCollection"
      ],
      "description": "contains function with empty collection and boolean",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testLiteralIntegerGreaterThan": {
      "name": "testLiteralIntegerGreaterThan",
      "expression": "Patient.name.given.count() > -3",
      "category": "other",
      "subcategory": "navigation",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "defineVariable10": {
      "name": "defineVariable10",
      "expression": "select(%fam.given)",
      "category": "analyzer",
      "subcategory": null,
      "tags": [
        "r5-xml",
        "analyzer"
      ],
      "description": "use undefined variable throws error",
      "expect_error": true,
      "invalid_kind": "semantic",
      "file_path": "groups/analyzer/analyzer.json",
      "suite_name": "analyzer"
    },
    "testType18": {
      "name": "testType18",
      "expression": "Patient.is(FHIR.Patient)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testType",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testLiteralIntegerLessThanPolarityTrue": {
      "name": "testLiteralIntegerLessThanPolarityTrue",
      "expression": "+1 < +2",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testStartsWith12": {
      "name": "testStartsWith12",
      "expression": "'987654321'.select(startsWith(length().toString()))",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testStartsWith"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testEquality21": {
      "name": "testEquality21",
      "expression": "@2012-04-15T15:30:31 = @2012-04-15T15:30:31.0",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testEquality"
      ],
      "description": "Test equality operator with equivalent datetime values of different precision",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testMatchesFullWithinUrl1": {
      "name": "testMatchesFullWithinUrl1",
      "expression": "'http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1'.matchesFull('library')",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testMatches"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testIif6": {
      "name": "testIif6",
      "expression": "iif('non boolean criteria', 'true-result', 'false-result')",
      "category": "analyzer",
      "subcategory": null,
      "tags": [
        "r5-xml",
        "analyzer"
      ],
      "description": "Contested: nothing in the spec about what to do with non-boolean criteria - mixed results from engines",
      "expect_error": true,
      "invalid_kind": "semantic",
      "file_path": "groups/analyzer/analyzer.json",
      "suite_name": "analyzer"
    },
    "testNEquality2": {
      "name": "testNEquality2",
      "expression": "{} != {}",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testNEquality"
      ],
      "description": "Test not equal operator with empty collections",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testBooleanLogicOr3": {
      "name": "testBooleanLogicOr3",
      "expression": "(true or {}) = true",
      "category": "boolean",
      "subcategory": "logical_or",
      "tags": [
        "r5-xml",
        "testBooleanLogicOr"
      ],
      "description": "Boolean OR with true and empty collection",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/boolean/boolean_operations.json",
      "suite_name": "boolean_operations"
    },
    "testType14": {
      "name": "testType14",
      "expression": "Patient.active.is(System.Boolean).not()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testType",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "txTest02": {
      "name": "txTest02",
      "expression": "%terminologies.validateVS('http://hl7.org/fhir/ValueSet/administrative-gender', $this.gender).parameter.where(name = 'result').value",
      "category": "other",
      "subcategory": "terminology",
      "tags": [
        "r5-xml",
        "TerminologyTests"
      ],
      "description": "Terminology validate ValueSet test",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "HighBoundaryDecimal8": {
      "name": "HighBoundaryDecimal8",
      "expression": "1.highBoundary()",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "HighBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testStringDecimalLiteralToQuantity": {
      "name": "testStringDecimalLiteralToQuantity",
      "expression": "'1.0'.toQuantity() ~ 1 '1'",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "yearOfFutureDate": {
      "name": "yearOfFutureDate",
      "expression": "@2050-12-31.yearOf()",
      "category": "dates",
      "subcategory": "extraction",
      "tags": [
        "date_time_operations",
        "yearOf"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testRound1": {
      "name": "testRound1",
      "expression": "1.round() = 1",
      "category": "math",
      "subcategory": "rounding",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "defineVariable14": {
      "name": "defineVariable14",
      "expression": "Patient.name.defineVariable('n1', first()).select(%n1).exists() | Patient.name.defineVariable('n2', skip(1).first()).defineVariable('res', %n2.given+%n2.given).select(%res)",
      "category": "other",
      "subcategory": "variables",
      "tags": [
        "r5-xml",
        "defineVariable"
      ],
      "description": "sequence of variable definitions original",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testStringFalseLiteralConvertsToBoolean": {
      "name": "testStringFalseLiteralConvertsToBoolean",
      "expression": "'false'.convertsToBoolean()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testGreatorOrEqual8": {
      "name": "testGreatorOrEqual8",
      "expression": "1 >= 1",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreatorOrEqual"
      ],
      "description": "Test greater than or equal operator with equal integers",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testFHIRPathAsFunction22": {
      "name": "testFHIRPathAsFunction22",
      "expression": "Patient.name.ofType(HumanName).use",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testInheritance",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testUnescapeHtmlAmpersand": {
      "name": "testUnescapeHtmlAmpersand",
      "expression": "'Tom &amp; Jerry'.unescape('html')",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "custom",
        "testEscapeHtmlCustom",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testMinuteOfDateTimeMax": {
      "name": "testMinuteOfDateTimeMax",
      "expression": "@2023-05-15T14:59:00.minuteOf()",
      "category": "dates",
      "subcategory": "extraction",
      "tags": [
        "date_time_operations",
        "fhirpath-lab",
        "testMinuteOf"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testGreatorOrEqual24": {
      "name": "testGreatorOrEqual24",
      "expression": "@2018-03-01T10:30 >= @2018-03-01T10:30:00",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreatorOrEqual"
      ],
      "description": "Test greater than or equal operator with different precision datetime values resulting in empty collection",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testTake1": {
      "name": "testTake1",
      "expression": "(0 | 1 | 2).take(1) = 0",
      "category": "collection",
      "subcategory": "filtering",
      "tags": [
        "r5-xml",
        "testTake"
      ],
      "description": "take function with single element",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testIntegerLiteralToBoolean": {
      "name": "testIntegerLiteralToBoolean",
      "expression": "1.toBoolean()",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testTake7": {
      "name": "testTake7",
      "expression": "Patient.name.take(0).given.exists() = false",
      "category": "collection",
      "subcategory": "filtering",
      "tags": [
        "r5-xml",
        "testTake"
      ],
      "description": "take function with zero elements",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testLessThan16": {
      "name": "testLessThan16",
      "expression": "1.1 < 1.0",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessThan"
      ],
      "description": "Test less than operator with decimals where first operand is greater than second",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testLessThan23": {
      "name": "testLessThan23",
      "expression": "@2018-03 < @2018-03-01",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessThan"
      ],
      "description": "Test less than operator with different precision dates resulting in empty collection",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testIntersect1": {
      "name": "testIntersect1",
      "expression": "(1 | 2 | 3).intersect(2 | 4) = 2",
      "category": "collection",
      "subcategory": "set_operations",
      "tags": [
        "r5-xml",
        "testIntersect"
      ],
      "description": "intersect function with common element",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testAggregate4": {
      "name": "testAggregate4",
      "expression": "(1|2|3|4|5|6|7|8|9).aggregate(iif($total.empty(), $this, iif($this > $total, $this, $total))) = 9",
      "category": "collection",
      "subcategory": "aggregation",
      "tags": [
        "r5-xml",
        "testAggregate"
      ],
      "description": "aggregate function for maximum",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "Comparable2": {
      "name": "Comparable2",
      "expression": "1 'cm'.comparable(1 '[s]')",
      "category": "math",
      "subcategory": "quantities",
      "tags": [
        "r5-xml",
        "Comparable"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testIif2": {
      "name": "testIif2",
      "expression": "iif(Patient.name.empty(), 'unnamed', 'named') = 'named'",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testIif",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testDivEmpty3": {
      "name": "testDivEmpty3",
      "expression": "{} div {}",
      "category": "math",
      "subcategory": "arithmetic",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testNEquality12": {
      "name": "testNEquality12",
      "expression": "@2012-04-15 != @2012-04-16",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testNEquality"
      ],
      "description": "Test not equal operator with unequal dates",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testDistinct6": {
      "name": "testDistinct6",
      "expression": "Questionnaire.descendants().linkId.select(substring(0,1)).distinct().count()",
      "category": "collection",
      "subcategory": "set_operations",
      "tags": [
        "r5-xml",
        "testDistinct"
      ],
      "description": "distinct with select and count",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testEquality23": {
      "name": "testEquality23",
      "expression": "@2012-04-15T15:00:00Z = @2012-04-15T10:00:00",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testEquality"
      ],
      "description": "This could be impacted by the timezone of the engine running the test",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testLiteralTimeUTC": {
      "name": "testLiteralTimeUTC",
      "expression": "@T14:34:28Z.is(Time)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": true,
      "invalid_kind": "execution",
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testSecondOfDateTimeMax": {
      "name": "testSecondOfDateTimeMax",
      "expression": "@2023-05-15T14:30:59.secondOf()",
      "category": "dates",
      "subcategory": "extraction",
      "tags": [
        "date_time_operations",
        "fhirpath-lab",
        "testSecondOf"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "HighBoundaryDecimal7": {
      "name": "HighBoundaryDecimal7",
      "expression": "1.587.highBoundary(39)",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "HighBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testCollectionNotEqualEmpty": {
      "name": "testCollectionNotEqualEmpty",
      "expression": "Patient.name.given != {}",
      "category": "other",
      "subcategory": "navigation",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testRepeatAllSimpleProjection": {
      "name": "testRepeatAllSimpleProjection",
      "expression": "5.repeatAll(iif($this > 0, $this - 1, {})).where($this > 0).count() >= 5.repeat(iif($this > 0, $this - 1, {})).where($this > 0).count()",
      "category": "collection",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "repeatAll-projection"
      ],
      "description": "RepeatAll function with simple projection",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testType17": {
      "name": "testType17",
      "expression": "Patient.is(Patient)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testType",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testPolymorphismIsA3": {
      "name": "testPolymorphismIsA3",
      "expression": "Observation.issued is instant",
      "category": "other",
      "subcategory": "navigation",
      "tags": [
        "r5-xml",
        "testObservations",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "HighBoundaryDateTimeMillisecond1": {
      "name": "HighBoundaryDateTimeMillisecond1",
      "expression": "@2014-01-01T08.highBoundary(17)",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "HighBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "LowBoundaryDecimal3": {
      "name": "LowBoundaryDecimal3",
      "expression": "1.587.lowBoundary(-1)",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "LowBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testIif8": {
      "name": "testIif8",
      "expression": "('item').iif(true, 'true-result', 'false-result')",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testIif",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testGreaterThan8": {
      "name": "testGreaterThan8",
      "expression": "1 > 1",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreaterThan"
      ],
      "description": "Test greater than operator with equal integers",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testLn2": {
      "name": "testLn2",
      "expression": "1.0.ln() = 0.0",
      "category": "math",
      "subcategory": "advanced",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "HighBoundaryDateTimeMillisecond3": {
      "name": "HighBoundaryDateTimeMillisecond3",
      "expression": "@2014-01-01T08.highBoundary(17)",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "HighBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testRepeatFiniteSequence": {
      "name": "testRepeatFiniteSequence",
      "expression": "10.repeat(iif($this > 1, $this - 2, {})).count() = 6",
      "category": "collection",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "repeat-finite"
      ],
      "description": "Repeat function with finite sequence",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "HighBoundaryTimeMillisecond": {
      "name": "HighBoundaryTimeMillisecond",
      "expression": "@T10:30.highBoundary(9)",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "HighBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testLiteralDateTimeHour": {
      "name": "testLiteralDateTimeHour",
      "expression": "@2015-02-04T14.is(DateTime)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testIn2": {
      "name": "testIn2",
      "expression": "1 in (2 | 3)",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testIn",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testSort4": {
      "name": "testSort4",
      "expression": "(3 | 2 | 1).sort($this) = (1 | 2 | 3)",
      "category": "collection",
      "subcategory": "ordering",
      "tags": [
        "r5-xml",
        "testSort"
      ],
      "description": "sort function with $this expression ascending",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testFHIRPathIsFunction1": {
      "name": "testFHIRPathIsFunction1",
      "expression": "Patient.gender.is(code)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testInheritance",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testSubstring12": {
      "name": "testSubstring12",
      "expression": "'string'.substring({}).empty() = true",
      "category": "string",
      "subcategory": "manipulation",
      "tags": [
        "r5-xml",
        "string_operations",
        "testSubstring"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "LowBoundaryTimeMillisecond": {
      "name": "LowBoundaryTimeMillisecond",
      "expression": "@T10:30.lowBoundary(9)",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "LowBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testMultiply1": {
      "name": "testMultiply1",
      "expression": "1 * 1 = 1",
      "category": "math",
      "subcategory": "arithmetic",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testLiteralDateTimeMillisecond": {
      "name": "testLiteralDateTimeMillisecond",
      "expression": "@2015-02-04T14:34:28.123.is(DateTime)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testSkip4": {
      "name": "testSkip4",
      "expression": "Patient.name.skip(3).given.exists() = false",
      "category": "collection",
      "subcategory": "filtering",
      "tags": [
        "r5-xml",
        "testSkip"
      ],
      "description": "skip function with more than available",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testMatchesCaseSensitive2": {
      "name": "testMatchesCaseSensitive2",
      "expression": "'FHIR'.matches('fhir')",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testMatches"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testDayOfDateFirstOfMonth": {
      "name": "testDayOfDateFirstOfMonth",
      "expression": "@2023-05-01.dayOf()",
      "category": "dates",
      "subcategory": "extraction",
      "tags": [
        "date_time_operations",
        "fhirpath-lab",
        "testDayOf"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testEquality6": {
      "name": "testEquality6",
      "expression": "(1 | 2 | 3) = (1 | 2 | 3)",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testEquality"
      ],
      "description": "Test equality operator with equal collections of three elements",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testMinus5": {
      "name": "testMinus5",
      "expression": "@1974-12-25 - 1 'month'",
      "category": "dates",
      "subcategory": "periods",
      "tags": [
        "date_time_operations",
        "r5-xml",
        "testMinus"
      ],
      "description": "Contested: single quotes are ucum units, which are not applicable to date arithmetic",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testType1a": {
      "name": "testType1a",
      "expression": "1.type().name = 'Integer'",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testType",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testDecimalLiteralIsDecimal": {
      "name": "testDecimalLiteralIsDecimal",
      "expression": "1.0.is(Decimal)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testBooleanImplies9": {
      "name": "testBooleanImplies9",
      "expression": "({} implies {}).empty()",
      "category": "boolean",
      "subcategory": "logical_implies",
      "tags": [
        "r5-xml",
        "testBooleanImplies"
      ],
      "description": "Boolean IMPLIES with both empty collections",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/boolean/boolean_operations.json",
      "suite_name": "boolean_operations"
    },
    "testSort1": {
      "name": "testSort1",
      "expression": "(1 | 2 | 3).sort() = (1 | 2 | 3)",
      "category": "collection",
      "subcategory": "ordering",
      "tags": [
        "r5-xml",
        "testSort"
      ],
      "description": "sort function with already sorted values",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testMod2": {
      "name": "testMod2",
      "expression": "4 mod 2 = 0",
      "category": "math",
      "subcategory": "arithmetic",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testLessThan21": {
      "name": "testLessThan21",
      "expression": "@T12:00:01 < @T12:00:00",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessThan"
      ],
      "description": "Test less than operator with time values where first time is later than second",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testPlusTime1": {
      "name": "testPlusTime1",
      "expression": "@T01:00:00 + 2 hours",
      "category": "dates",
      "subcategory": "periods",
      "tags": [
        "date_time_operations",
        "r5-xml",
        "testPlus"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testStringLiteralConvertsToIntegerFalse": {
      "name": "testStringLiteralConvertsToIntegerFalse",
      "expression": "'a'.convertsToInteger().not()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testPolymorphicsB": {
      "name": "testPolymorphicsB",
      "expression": "Observation.valueQuantity.exists()",
      "category": "analyzer",
      "subcategory": "semantic",
      "tags": [
        "r5-xml",
        "polymorphics"
      ],
      "description": "Polymorphic field access (semantic error)",
      "expect_error": true,
      "invalid_kind": "semantic",
      "file_path": "groups/analyzer/analyzer.json",
      "suite_name": "analyzer"
    },
    "testGreatorOrEqual17": {
      "name": "testGreatorOrEqual17",
      "expression": "'b' >= 'a'",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreatorOrEqual"
      ],
      "description": "Test greater than or equal operator with strings where first operand is greater than second alphabetically",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testCollectionBoolean5": {
      "name": "testCollectionBoolean5",
      "expression": "iif(true, true, 1/0)",
      "category": "boolean",
      "subcategory": "conditional",
      "tags": [
        "r5-xml",
        "testCollectionBoolean"
      ],
      "description": "iif function short-circuit evaluation (true branch)",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/boolean/boolean_operations.json",
      "suite_name": "boolean_operations"
    },
    "testRepeatSimpleProjection": {
      "name": "testRepeatSimpleProjection",
      "expression": "5.repeat(iif($this > 0, $this - 1, {})).where($this > 0) = (5|4|3|2|1)",
      "category": "collection",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "repeat-projection"
      ],
      "description": "Repeat function with simple projection",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "LowBoundaryDateTimeMillisecond1": {
      "name": "LowBoundaryDateTimeMillisecond1",
      "expression": "@2014-01-01T08.lowBoundary(17)",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "LowBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testDivide4": {
      "name": "testDivide4",
      "expression": "1 / 2 = 0.5",
      "category": "math",
      "subcategory": "arithmetic",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testMod3": {
      "name": "testMod3",
      "expression": "5 mod 2 = 1",
      "category": "math",
      "subcategory": "arithmetic",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testNotEquivalent16": {
      "name": "testNotEquivalent16",
      "expression": "@2012-04-15 !~ @2012-04-15T10:00:00",
      "category": "comparison",
      "subcategory": "equivalence",
      "tags": [
        "r5-xml",
        "testNotEquivalent"
      ],
      "description": "Test not equivalent operator with date and datetime of different precision",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "HighBoundaryDecimal4": {
      "name": "HighBoundaryDecimal4",
      "expression": "(-1.587).highBoundary()",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "HighBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testQuantity11": {
      "name": "testQuantity11",
      "expression": "1.0 'm' / 1.0 'm' = 1 '1'",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testQuantity",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testLessThan9": {
      "name": "testLessThan9",
      "expression": "1.0 < 1.0",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessThan"
      ],
      "description": "Test less than operator with equal decimals",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testLessThan12": {
      "name": "testLessThan12",
      "expression": "@2014-12-12 < @2014-12-12",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessThan"
      ],
      "description": "Test less than operator with equal dates",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testLessThan24": {
      "name": "testLessThan24",
      "expression": "@2018-03-01T10:30 < @2018-03-01T10:30:00",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessThan"
      ],
      "description": "Test less than operator with different precision datetime values resulting in empty collection",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testPlusEmpty3": {
      "name": "testPlusEmpty3",
      "expression": "{} + {}",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testPlus",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testType4": {
      "name": "testType4",
      "expression": "true.type().name = 'Boolean'",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testType",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testRepeatInfiniteConstant": {
      "name": "testRepeatInfiniteConstant",
      "expression": "1.repeat(1)",
      "category": "collection",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "repeat-constant"
      ],
      "description": "Repeat function with infinite constant",
      "expect_error": true,
      "invalid_kind": "execution",
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testTimezoneOffsetOfDateTimeUTC": {
      "name": "testTimezoneOffsetOfDateTimeUTC",
      "expression": "@2023-05-15T14:30:00Z.timezoneOffsetOf()",
      "category": "dates",
      "subcategory": "extraction",
      "tags": [
        "date_time_operations",
        "fhirpath-lab",
        "testTimezoneOffsetOf"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testFHIRPathIsFunction4": {
      "name": "testFHIRPathIsFunction4",
      "expression": "Questionnaire.url.is(uri)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testInheritance",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testType7": {
      "name": "testType7",
      "expression": "true is Boolean",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testType",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testEmpty": {
      "name": "testEmpty",
      "expression": "Patient.link.empty()",
      "category": "other",
      "subcategory": "navigation",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testUnescapeHtmlBasic": {
      "name": "testUnescapeHtmlBasic",
      "expression": "'Hello &lt;world&gt;'.unescape('html')",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "custom",
        "testEscapeHtmlCustom",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testStringIntegerLiteralConvertsToQuantity": {
      "name": "testStringIntegerLiteralConvertsToQuantity",
      "expression": "'1'.convertsToQuantity()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "HighBoundaryDecimal11": {
      "name": "HighBoundaryDecimal11",
      "expression": "12.587.highBoundary(2)",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "HighBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testRepeatAllInfiniteLoop": {
      "name": "testRepeatAllInfiniteLoop",
      "expression": "1.repeatAll($this + 1)",
      "category": "collection",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "repeatAll-infinite"
      ],
      "description": "RepeatAll function with infinite loop",
      "expect_error": true,
      "invalid_kind": "execution",
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "LowBoundaryDateMonth": {
      "name": "LowBoundaryDateMonth",
      "expression": "@2014.lowBoundary(6)",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "LowBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testEquivalent11": {
      "name": "testEquivalent11",
      "expression": "1.2 / 1.8 ~ 0.67",
      "category": "comparison",
      "subcategory": "equivalence",
      "tags": [
        "r5-xml",
        "testEquivalent"
      ],
      "description": "Test equivalence operator with calculation result and approximate value",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testContainsCollectionEmpty4": {
      "name": "testContainsCollectionEmpty4",
      "expression": "{} contains {}",
      "category": "collection",
      "subcategory": "set_operations",
      "tags": [
        "r5-xml",
        "testContainsCollection"
      ],
      "description": "contains function with empty collections",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testGreatorOrEqual25": {
      "name": "testGreatorOrEqual25",
      "expression": "@T10:30 >= @T10:30:00",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreatorOrEqual"
      ],
      "description": "Test greater than or equal operator with different precision time values resulting in empty collection",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testEquality22": {
      "name": "testEquality22",
      "expression": "@2012-04-15T15:30:31 = @2012-04-15T15:30:31.1",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testEquality"
      ],
      "description": "Test equality operator with datetime values differing by milliseconds",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testStringYearConvertsToDateTime": {
      "name": "testStringYearConvertsToDateTime",
      "expression": "'2015'.convertsToDateTime()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testLessOrEqual7": {
      "name": "testLessOrEqual7",
      "expression": "@T12:00:00 <= @T14:00:00",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessOrEqual"
      ],
      "description": "Test less than or equal operator with time values where first time is earlier than second",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testLiteralIntegerMax": {
      "name": "testLiteralIntegerMax",
      "expression": "2147483647.convertsToInteger()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testStringDecimalLiteralIsNotDecimal": {
      "name": "testStringDecimalLiteralIsNotDecimal",
      "expression": "'1.0'.is(Decimal).not()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testIif10": {
      "name": "testIif10",
      "expression": "('item1' | 'item2').iif(true, 'true-result', 'false-result')",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testIif",
        "other_operations"
      ],
      "description": null,
      "expect_error": true,
      "invalid_kind": "execution",
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testPrecedence2": {
      "name": "testPrecedence2",
      "expression": "1+2*3+4 = 11",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testPrecedence",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testBooleanImplies2": {
      "name": "testBooleanImplies2",
      "expression": "(true implies false) = false",
      "category": "boolean",
      "subcategory": "logical_implies",
      "tags": [
        "r5-xml",
        "testBooleanImplies"
      ],
      "description": "Boolean IMPLIES with true and false",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/boolean/boolean_operations.json",
      "suite_name": "boolean_operations"
    },
    "testQuantity1": {
      "name": "testQuantity1",
      "expression": "4.0000 'g' = 4000.0 'mg'",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testQuantity",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testEquality28": {
      "name": "testEquality28",
      "expression": "Observation.value = 185 '[lb_av]'",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testEquality"
      ],
      "description": "Test equality operator with quantity values",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testPolymorphismIsA1": {
      "name": "testPolymorphismIsA1",
      "expression": "Observation.value.is(Quantity)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testObservations",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testGreatorOrEqual3": {
      "name": "testGreatorOrEqual3",
      "expression": "'a' >= 'b'",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreatorOrEqual"
      ],
      "description": "Test greater than or equal operator with strings where first operand is less than second alphabetically",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testStringIntegerLiteralIsNotQuantity": {
      "name": "testStringIntegerLiteralIsNotQuantity",
      "expression": "'1'.is(System.Quantity).not()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testRepeatAllEmpty": {
      "name": "testRepeatAllEmpty",
      "expression": "{}.repeatAll($this + 1).empty()",
      "category": "collection",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "repeatAll-empty"
      ],
      "description": "RepeatAll function with empty input",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testGreaterThan20": {
      "name": "testGreaterThan20",
      "expression": "@2014-12-13T12:00:01 > @2014-12-13T12:00:00",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreaterThan"
      ],
      "description": "Test greater than operator with datetime values where first is later than second",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testPlusDate6": {
      "name": "testPlusDate6",
      "expression": "@1973-12-25T00:00:00.000+10:00 + 10 millisecond",
      "category": "dates",
      "subcategory": "periods",
      "tags": [
        "date_time_operations",
        "r5-xml",
        "testPlus"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testToString2": {
      "name": "testToString2",
      "expression": "true.toString() = 'true'",
      "category": "conversion",
      "subcategory": "conversion",
      "tags": [
        "type_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/conversion/type_operations.json",
      "suite_name": "type_operations"
    },
    "testFHIRPathAsFunction13": {
      "name": "testFHIRPathAsFunction13",
      "expression": "Patient.gender.as(id)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testInheritance",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testMinus7": {
      "name": "testMinus7",
      "expression": "@T00:30:00 - 1 hour",
      "category": "dates",
      "subcategory": "periods",
      "tags": [
        "date_time_operations",
        "r5-xml",
        "testMinus"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "LowBoundaryDateTimeMillisecond3": {
      "name": "LowBoundaryDateTimeMillisecond3",
      "expression": "@2014-01-01T08.lowBoundary(8)",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "LowBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testBooleanLogicAnd3": {
      "name": "testBooleanLogicAnd3",
      "expression": "(true and {}).empty()",
      "category": "boolean",
      "subcategory": "logical_and",
      "tags": [
        "r5-xml",
        "testBooleanLogicAnd"
      ],
      "description": "Boolean AND with true and empty collection",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/boolean/boolean_operations.json",
      "suite_name": "boolean_operations"
    },
    "testCollectionBoolean2": {
      "name": "testCollectionBoolean2",
      "expression": "iif({}, true, false)",
      "category": "boolean",
      "subcategory": "conditional",
      "tags": [
        "r5-xml",
        "testCollectionBoolean"
      ],
      "description": "iif function with empty collection condition",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/boolean/boolean_operations.json",
      "suite_name": "boolean_operations"
    },
    "testNotEquivalent7": {
      "name": "testNotEquivalent7",
      "expression": "'a' !~ 'b'",
      "category": "comparison",
      "subcategory": "equivalence",
      "tags": [
        "r5-xml",
        "testNotEquivalent"
      ],
      "description": "Test not equivalent operator with unequal strings",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "HighBoundaryDecimal9": {
      "name": "HighBoundaryDecimal9",
      "expression": "1.highBoundary(0)",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "HighBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testGreatorOrEqual15": {
      "name": "testGreatorOrEqual15",
      "expression": "2 >= 1",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreatorOrEqual"
      ],
      "description": "Test greater than or equal operator with integers where first operand is greater than second",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testIntegerLiteralIsSystemInteger": {
      "name": "testIntegerLiteralIsSystemInteger",
      "expression": "1.is(System.Integer)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testStringDecimalConvertsToIntegerFalse": {
      "name": "testStringDecimalConvertsToIntegerFalse",
      "expression": "'1.0'.convertsToInteger().not()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testSubstring5": {
      "name": "testSubstring5",
      "expression": "'12345'.substring(-1).empty()",
      "category": "string",
      "subcategory": "manipulation",
      "tags": [
        "r5-xml",
        "string_operations",
        "testSubstring"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testTrim4": {
      "name": "testTrim4",
      "expression": "'  '.trim().length() = 0",
      "category": "string",
      "subcategory": "manipulation",
      "tags": [
        "r5-xml",
        "string_operations",
        "testTrim"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testGreaterThan26": {
      "name": "testGreaterThan26",
      "expression": "@2018-03-01T10:30:00 > @2018-03-01T10:30:00.0",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreaterThan"
      ],
      "description": "Test greater than operator with equivalent datetime values with different precision",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testIif7": {
      "name": "testIif7",
      "expression": "{}.iif(true, 'true-result', 'false-result')",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testIif",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testDecodeUrlBase64": {
      "name": "testDecodeUrlBase64",
      "expression": "'c3ViamVjdHM_X2Q='.decode('urlbase64')",
      "category": "conversion",
      "subcategory": "encoding",
      "tags": [
        "r5-xml",
        "testEncodeDecode"
      ],
      "description": "Decode URL-safe base64 to string",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/conversion/conversion_operations.json",
      "suite_name": "conversion_operations"
    },
    "testGreatorOrEqual19": {
      "name": "testGreatorOrEqual19",
      "expression": "@2014-12-13 >= @2014-12-12",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreatorOrEqual"
      ],
      "description": "Test greater than or equal operator with dates where first date is later than second",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testLiteralDecimalGreaterThanIntegerTrue": {
      "name": "testLiteralDecimalGreaterThanIntegerTrue",
      "expression": "Observation.value.value > 0",
      "category": "other",
      "subcategory": "navigation",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testMatchesFullWithinUrl4": {
      "name": "testMatchesFullWithinUrl4",
      "expression": "'http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1'.matchesFull('^Library$')",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testMatches"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testGreaterThan24": {
      "name": "testGreaterThan24",
      "expression": "@2018-03-01T10:30 > @2018-03-01T10:30:00",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreaterThan"
      ],
      "description": "Test greater than operator with different precision datetime values resulting in empty collection",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testIntegerBooleanNotFalse": {
      "name": "testIntegerBooleanNotFalse",
      "expression": "(1).not() = false",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testType2": {
      "name": "testType2",
      "expression": "'1'.type().namespace = 'System'",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testType",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "HighBoundaryDecimal1": {
      "name": "HighBoundaryDecimal1",
      "expression": "1.587.highBoundary(2)",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "HighBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testMinusEmpty1": {
      "name": "testMinusEmpty1",
      "expression": "1 - {}",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testMinus",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "Comparable3": {
      "name": "Comparable3",
      "expression": "1 'cm'.comparable(1 's')",
      "category": "math",
      "subcategory": "quantities",
      "tags": [
        "r5-xml",
        "Comparable"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "LowBoundaryNegDecimalDefault": {
      "name": "LowBoundaryNegDecimalDefault",
      "expression": "(-1.587).lowBoundary()",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "LowBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testToInteger2": {
      "name": "testToInteger2",
      "expression": "'-1'.toInteger() = -1",
      "category": "conversion",
      "subcategory": "type_conversion",
      "tags": [
        "r5-xml",
        "testToInteger"
      ],
      "description": "Convert negative string to integer",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/conversion/conversion_operations.json",
      "suite_name": "conversion_operations"
    },
    "testStringUTCConvertsToDateTime": {
      "name": "testStringUTCConvertsToDateTime",
      "expression": "'2015-02-04T14:34:28Z'.convertsToDateTime()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testLessThanEmpty3": {
      "name": "testLessThanEmpty3",
      "expression": "{} < {}",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessThan"
      ],
      "description": "Test less than operator with empty collections",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testIndexOf4": {
      "name": "testIndexOf4",
      "expression": "{}.indexOf('-').empty() = true",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testIndexOf"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testNEquality1": {
      "name": "testNEquality1",
      "expression": "1 != 1",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testNEquality"
      ],
      "description": "Test not equal operator with equal integers",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testGreaterThan11": {
      "name": "testGreaterThan11",
      "expression": "'A' > 'A'",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreaterThan"
      ],
      "description": "Test greater than operator with equal uppercase strings",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testLiteralDateTimeTZLess": {
      "name": "testLiteralDateTimeTZLess",
      "expression": "@2017-11-05T01:30:00.0-04:00 < @2017-11-05T01:15:00.0-05:00",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "HighBoundaryDecimal5": {
      "name": "HighBoundaryDecimal5",
      "expression": "(-1.587).highBoundary(2)",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "HighBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testFirstLast2": {
      "name": "testFirstLast2",
      "expression": "Patient.name.last().given = 'Peter' | 'James'",
      "category": "collection",
      "subcategory": "filtering",
      "tags": [
        "r5-xml",
        "testFirstLast"
      ],
      "description": "last function usage",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testCombine1": {
      "name": "testCombine1",
      "expression": "concept.code.combine($this.descendants().concept.code).isDistinct()",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testCombine()",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testEndsWith10": {
      "name": "testEndsWith10",
      "expression": "'123456789'.select(endsWith(length().toString()))",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testEndsWith"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testLessThan10": {
      "name": "testLessThan10",
      "expression": "'a' < 'a'",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessThan"
      ],
      "description": "Test less than operator with equal strings",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testEquality24": {
      "name": "testEquality24",
      "expression": "@2012-04-15T15:00:00+02:00 = @2012-04-15T16:00:00+03:00",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testEquality"
      ],
      "description": "Test equality operator with timezone-equivalent datetime values",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testFHIRPathAsFunction12": {
      "name": "testFHIRPathAsFunction12",
      "expression": "Patient.gender.as(code)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testInheritance",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testLessThan27": {
      "name": "testLessThan27",
      "expression": "@T10:30:00 < @T10:30:00.0",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessThan"
      ],
      "description": "Test less than operator with equivalent time values with different precision",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testDiv2": {
      "name": "testDiv2",
      "expression": "4 div 2 = 2",
      "category": "math",
      "subcategory": "arithmetic",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testStringQuantityLiteralConvertsToQuantity": {
      "name": "testStringQuantityLiteralConvertsToQuantity",
      "expression": "'1 day'.convertsToQuantity()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testGreatorOrEqual11": {
      "name": "testGreatorOrEqual11",
      "expression": "'A' >= 'A'",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreatorOrEqual"
      ],
      "description": "Test greater than or equal operator with equal uppercase strings",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testSplit1": {
      "name": "testSplit1",
      "expression": "'Peter,James,Jim,Peter,James'.split(',').count() = 5",
      "category": "string",
      "subcategory": "manipulation",
      "tags": [
        "r5-xml",
        "string_operations",
        "testSplit"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testTypeA3": {
      "name": "testTypeA3",
      "expression": "Parameters.parameter[2].value.is(FHIR.uuid)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testType",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testGreatorOrEqualEmpty1": {
      "name": "testGreatorOrEqualEmpty1",
      "expression": "1 >= {}",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreatorOrEqual"
      ],
      "description": "Test greater than or equal operator with value compared to empty collection",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testPowerEmpty2": {
      "name": "testPowerEmpty2",
      "expression": "{}.power({}).empty()",
      "category": "math",
      "subcategory": "advanced",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testRepeatSingleArgument": {
      "name": "testRepeatSingleArgument",
      "expression": "1.repeat($this + 1, $this * 2)",
      "category": "collection",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "repeat-args"
      ],
      "description": "Repeat function with multiple arguments",
      "expect_error": true,
      "invalid_kind": "execution",
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testIntegerLiteralToString": {
      "name": "testIntegerLiteralToString",
      "expression": "1.toString()",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testEquivalent23": {
      "name": "testEquivalent23",
      "expression": "(1 | 2 | 3) ~ (1 | 2 | 3)",
      "category": "comparison",
      "subcategory": "equivalence",
      "tags": [
        "r5-xml",
        "testEquivalent"
      ],
      "description": "Test equivalence operator with identical collections",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testMinuteOfDateTimeWithTimezone": {
      "name": "testMinuteOfDateTimeWithTimezone",
      "expression": "@2023-05-15T14:45:00+02:00.minuteOf()",
      "category": "dates",
      "subcategory": "extraction",
      "tags": [
        "date_time_operations",
        "fhirpath-lab",
        "testMinuteOf"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testIn4": {
      "name": "testIn4",
      "expression": "'b' in ('a' | 'c' | 'd')",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testIn",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testWhere3": {
      "name": "testWhere3",
      "expression": "Patient.name.where(given = 'X').count() = 0",
      "category": "collection",
      "subcategory": "filtering",
      "tags": [
        "r5-xml",
        "testWhere"
      ],
      "description": "where clause with no matches",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testGreaterThan23": {
      "name": "testGreaterThan23",
      "expression": "@2018-03 > @2018-03-01",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreaterThan"
      ],
      "description": "Test greater than operator with different precision dates resulting in empty collection",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "PrecisionTimeMilliseconds": {
      "name": "PrecisionTimeMilliseconds",
      "expression": "@T10:30:00.000.precision()",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "Precision"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testStringMillisecondConvertsToDateTime": {
      "name": "testStringMillisecondConvertsToDateTime",
      "expression": "'2015-02-04T14:34:28.123'.convertsToDateTime()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testIntegerLiteralConvertsToString": {
      "name": "testIntegerLiteralConvertsToString",
      "expression": "1.convertsToString()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testDecimalLiteralToDecimalEqual": {
      "name": "testDecimalLiteralToDecimalEqual",
      "expression": "'1.1'.toDecimal() = 1.1",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testRepeatBasic": {
      "name": "testRepeatBasic",
      "expression": "Patient.name.repeat('test').first() = 'test'",
      "category": "collection",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "repeat-basic"
      ],
      "description": "Basic repeat function test",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testVariables4": {
      "name": "testVariables4",
      "expression": "%`vs-administrative-gender` = 'http://hl7.org/fhir/ValueSet/administrative-gender'",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testVariables",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testMatchesWithinUrl3": {
      "name": "testMatchesWithinUrl3",
      "expression": "'http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1'.matches('^Library$')",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testMatches"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testToDecimal2": {
      "name": "testToDecimal2",
      "expression": "'-1'.toInteger() = -1",
      "category": "conversion",
      "subcategory": "type_conversion",
      "tags": [
        "r5-xml",
        "testToDecimal"
      ],
      "description": "Convert negative string to integer",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/conversion/conversion_operations.json",
      "suite_name": "conversion_operations"
    },
    "testEquivalent1": {
      "name": "testEquivalent1",
      "expression": "1 ~ 1",
      "category": "comparison",
      "subcategory": "equivalence",
      "tags": [
        "r5-xml",
        "testEquivalent"
      ],
      "description": "Test equivalence operator with equal integers",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testNotEquivalent20": {
      "name": "testNotEquivalent20",
      "expression": "name.take(2).given !~ name.take(2).first().given | name.take(2).last().given",
      "category": "comparison",
      "subcategory": "equivalence",
      "tags": [
        "r5-xml",
        "testNotEquivalent"
      ],
      "description": "Test not equivalent operator with collection and its reconstructed equivalent",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testStringDecimalLiteralIsNotSystemQuantity": {
      "name": "testStringDecimalLiteralIsNotSystemQuantity",
      "expression": "'1.0'.is(System.Quantity).not()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testExclude1": {
      "name": "testExclude1",
      "expression": "(1 | 2 | 3).exclude(2 | 4) = 1 | 3",
      "category": "collection",
      "subcategory": "set_operations",
      "tags": [
        "r5-xml",
        "testExclude"
      ],
      "description": "exclude function with common elements",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testLiteralInteger0": {
      "name": "testLiteralInteger0",
      "expression": "0.convertsToInteger()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testGreaterThan9": {
      "name": "testGreaterThan9",
      "expression": "1.0 > 1.0",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreaterThan"
      ],
      "description": "Test greater than operator with equal decimals",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testNotEmpty": {
      "name": "testNotEmpty",
      "expression": "Patient.name.empty().not()",
      "category": "other",
      "subcategory": "navigation",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testNEquality14": {
      "name": "testNEquality14",
      "expression": "@2012-04-15T15:00:00 != @2012-04-15T10:00:00",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testNEquality"
      ],
      "description": "Test not equal operator with unequal datetime values",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "PrecisionDateTimeMilliseconds": {
      "name": "PrecisionDateTimeMilliseconds",
      "expression": "@2014-01-05T10:30:00.000.precision()",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "Precision"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testDecimalLiteralToInteger": {
      "name": "testDecimalLiteralToInteger",
      "expression": "'1.1'.toInteger() = {}",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testPolymorphismB": {
      "name": "testPolymorphismB",
      "expression": "Observation.valueQuantity.unit",
      "category": "analyzer",
      "subcategory": null,
      "tags": [
        "r5-xml",
        "analyzer"
      ],
      "description": null,
      "expect_error": true,
      "invalid_kind": "semantic",
      "file_path": "groups/analyzer/analyzer.json",
      "suite_name": "analyzer"
    },
    "testPowerEmpty": {
      "name": "testPowerEmpty",
      "expression": "{}.power(2).empty()",
      "category": "math",
      "subcategory": "advanced",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testTypeA": {
      "name": "testTypeA",
      "expression": "Parameters.parameter[3].value.is(FHIR.decimal)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testType",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testLiteralDecimalLessThanInvalid": {
      "name": "testLiteralDecimalLessThanInvalid",
      "expression": "Observation.value.value < 'test'",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": true,
      "invalid_kind": "execution",
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testCount3": {
      "name": "testCount3",
      "expression": "Patient.name.first().count()",
      "category": "collection",
      "subcategory": "aggregation",
      "tags": [
        "r5-xml",
        "testCount"
      ],
      "description": "count function on single element",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testLessOrEqual11": {
      "name": "testLessOrEqual11",
      "expression": "'A' <= 'A'",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessOrEqual"
      ],
      "description": "Test less than or equal operator with equal uppercase strings",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testType22": {
      "name": "testType22",
      "expression": "Patient.is(System.Patient).not()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testType",
        "other_operations"
      ],
      "description": "Note: Some systems may return an error due to failing to resolve System.Patient",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testCeilingEmpty": {
      "name": "testCeilingEmpty",
      "expression": "{}.ceiling().empty()",
      "category": "math",
      "subcategory": "rounding",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testSqrtEmpty": {
      "name": "testSqrtEmpty",
      "expression": "{}.sqrt().empty()",
      "category": "math",
      "subcategory": "advanced",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testBooleanImplies5": {
      "name": "testBooleanImplies5",
      "expression": "(false implies false) = true",
      "category": "boolean",
      "subcategory": "logical_implies",
      "tags": [
        "r5-xml",
        "testBooleanImplies"
      ],
      "description": "Boolean IMPLIES with both false",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/boolean/boolean_operations.json",
      "suite_name": "boolean_operations"
    },
    "testNEquality7": {
      "name": "testNEquality7",
      "expression": "1.1 != 1.2",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testNEquality"
      ],
      "description": "Test not equal operator with unequal decimals",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testUnescapeJson": {
      "name": "testUnescapeJson",
      "expression": "'\\\"1&lt;2\\\"'.unescape('json')",
      "category": "conversion",
      "subcategory": "escaping",
      "tags": [
        "r5-xml",
        "testEscapeUnescape"
      ],
      "description": "Unescape JSON entities",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/conversion/conversion_operations.json",
      "suite_name": "conversion_operations"
    },
    "testSimpleFail": {
      "name": "testSimpleFail",
      "expression": "name.given1",
      "category": "analyzer",
      "subcategory": null,
      "tags": [
        "r5-xml",
        "analyzer"
      ],
      "description": null,
      "expect_error": true,
      "invalid_kind": "semantic",
      "file_path": "groups/analyzer/analyzer.json",
      "suite_name": "analyzer"
    },
    "HighBoundaryDecimal13": {
      "name": "HighBoundaryDecimal13",
      "expression": "120.highBoundary(2)",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "HighBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testExp2": {
      "name": "testExp2",
      "expression": "(-0.0).exp() = 1",
      "category": "math",
      "subcategory": "advanced",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testFHIRPathAsFunction16": {
      "name": "testFHIRPathAsFunction16",
      "expression": "Patient.gender.ofType(string)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testInheritance",
        "other_operations"
      ],
      "description": "Contested: code type is a subtype of string",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testIndexOf3": {
      "name": "testIndexOf3",
      "expression": "'LogicalModel-Person'.indexOf('')",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testIndexOf"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testHourOfDateTimeNoon": {
      "name": "testHourOfDateTimeNoon",
      "expression": "@2023-05-15T12:00:00.hourOf()",
      "category": "dates",
      "subcategory": "extraction",
      "tags": [
        "date_time_operations",
        "fhirpath-lab",
        "testHourOf"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testBooleanLogicXOr8": {
      "name": "testBooleanLogicXOr8",
      "expression": "({} xor false).empty()",
      "category": "boolean",
      "subcategory": "logical_xor",
      "tags": [
        "r5-xml",
        "testBooleanLogicXOr"
      ],
      "description": "Boolean XOR with empty collection and false",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/boolean/boolean_operations.json",
      "suite_name": "boolean_operations"
    },
    "LowBoundaryDecimal2": {
      "name": "LowBoundaryDecimal2",
      "expression": "1.587.lowBoundary(2)",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "LowBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testDistinct4": {
      "name": "testDistinct4",
      "expression": "(1 | 2 | 3).distinct()",
      "category": "collection",
      "subcategory": "set_operations",
      "tags": [
        "r5-xml",
        "testDistinct"
      ],
      "description": "distinct function returning values",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testSort2": {
      "name": "testSort2",
      "expression": "(3 | 2 | 1).sort() = (1 | 2 | 3)",
      "category": "collection",
      "subcategory": "ordering",
      "tags": [
        "r5-xml",
        "testSort"
      ],
      "description": "sort function with unsorted values",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testContainsCollection2": {
      "name": "testContainsCollection2",
      "expression": "(2 | 3) contains 1",
      "category": "collection",
      "subcategory": "set_operations",
      "tags": [
        "r5-xml",
        "testContainsCollection"
      ],
      "description": "contains function with non-matching element",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testType16": {
      "name": "testType16",
      "expression": "Patient.type().name = 'Patient'",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testType",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testStringIntegerLiteralConvertsToDecimal": {
      "name": "testStringIntegerLiteralConvertsToDecimal",
      "expression": "'1'.convertsToDecimal()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testStringDecimalLiteralConvertsToQuantity": {
      "name": "testStringDecimalLiteralConvertsToQuantity",
      "expression": "'1.0'.convertsToQuantity()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testLiteralDecimal10": {
      "name": "testLiteralDecimal10",
      "expression": "1.0.convertsToDecimal()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testToDateTimeEmpty": {
      "name": "testToDateTimeEmpty",
      "expression": "{}.toDateTime()",
      "category": "dates",
      "subcategory": "conversion",
      "tags": [
        "date_time_operations",
        "testToDateTime"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testLessThan7": {
      "name": "testLessThan7",
      "expression": "@T12:00:00 < @T14:00:00",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessThan"
      ],
      "description": "Test less than operator with time values where first time is earlier than second",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testMinuteOfDateTime": {
      "name": "testMinuteOfDateTime",
      "expression": "@2023-05-15T14:30:00.minuteOf()",
      "category": "dates",
      "subcategory": "extraction",
      "tags": [
        "date_time_operations",
        "fhirpath-lab",
        "testMinuteOf"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testLiteralDateTimeTimezoneOffset": {
      "name": "testLiteralDateTimeTimezoneOffset",
      "expression": "@2015-02-04T14:34:28+10:00.is(DateTime)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testContainsString7": {
      "name": "testContainsString7",
      "expression": "'12345'.contains('') = true",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testContainsString"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "trivial": {
      "name": "trivial",
      "expression": "1+1",
      "category": "math",
      "subcategory": "arithmetic",
      "tags": [
        "r5-xml",
        "minimal"
      ],
      "description": "Basic addition sanity check",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testIif11": {
      "name": "testIif11",
      "expression": "('context').iif($this = 'context','true-result', 'false-result')",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testIif",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testTrim3": {
      "name": "testTrim3",
      "expression": "' 123456 '.trim().length() = 6",
      "category": "string",
      "subcategory": "manipulation",
      "tags": [
        "r5-xml",
        "string_operations",
        "testTrim"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testSelect3": {
      "name": "testSelect3",
      "expression": "name.select(use.contains('i')).count()",
      "category": "collection",
      "subcategory": "filtering",
      "tags": [
        "r5-xml",
        "testSelect"
      ],
      "description": "select with contains condition",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testBooleanLiteralIsNotInteger": {
      "name": "testBooleanLiteralIsNotInteger",
      "expression": "true.is(Integer).not()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testNegativeIntegerLiteralToString": {
      "name": "testNegativeIntegerLiteralToString",
      "expression": "(-1).toString()",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testDivide3": {
      "name": "testDivide3",
      "expression": "4.0 / 2.0 = 2.0",
      "category": "math",
      "subcategory": "arithmetic",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "HighBoundaryDecimalDefault": {
      "name": "HighBoundaryDecimalDefault",
      "expression": "1.587.highBoundary()",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "HighBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testBooleanLiteralToInteger": {
      "name": "testBooleanLiteralToInteger",
      "expression": "true.toInteger() = 1",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testLiteralIntegerEqual": {
      "name": "testLiteralIntegerEqual",
      "expression": "Patient.name.given.count() = 5",
      "category": "other",
      "subcategory": "navigation",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testBooleanLogicXOr3": {
      "name": "testBooleanLogicXOr3",
      "expression": "(true xor {}).empty()",
      "category": "boolean",
      "subcategory": "logical_xor",
      "tags": [
        "r5-xml",
        "testBooleanLogicXOr"
      ],
      "description": "Boolean XOR with true and empty collection",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/boolean/boolean_operations.json",
      "suite_name": "boolean_operations"
    },
    "testNEquality5": {
      "name": "testNEquality5",
      "expression": "'a' != 'b'",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testNEquality"
      ],
      "description": "Test not equal operator with unequal strings",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testTrace1": {
      "name": "testTrace1",
      "expression": "name.given.trace('test').count() = 5",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testTrace",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testLiteralBooleanTrue": {
      "name": "testLiteralBooleanTrue",
      "expression": "true.convertsToBoolean()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testContainsString2": {
      "name": "testContainsString2",
      "expression": "'12345'.contains('5') = true",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testContainsString"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testEscapeHtmlComplex": {
      "name": "testEscapeHtmlComplex",
      "expression": "'<script>alert(\"XSS\")</script>'.escape('html')",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "custom",
        "testEscapeHtmlCustom",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testToday1": {
      "name": "testToday1",
      "expression": "Patient.birthDate < today()",
      "category": "dates",
      "subcategory": "conversion",
      "tags": [
        "date_time_operations",
        "r5-xml",
        "testToday"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testLog1": {
      "name": "testLog1",
      "expression": "16.log(2) = 4.0",
      "category": "math",
      "subcategory": "advanced",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testComment1": {
      "name": "testComment1",
      "expression": "2 + 2 // This is a single-line comment + 4",
      "category": "analyzer",
      "subcategory": "syntax",
      "tags": [
        "r5-xml",
        "comments"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/analyzer/analyzer.json",
      "suite_name": "analyzer"
    },
    "testLiteralDecimal01": {
      "name": "testLiteralDecimal01",
      "expression": "0.1.convertsToDecimal()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testStartsWith2": {
      "name": "testStartsWith2",
      "expression": "'12345'.startsWith('1') = true",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testStartsWith"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testAbsEmpty": {
      "name": "testAbsEmpty",
      "expression": "{}.abs().empty()",
      "category": "math",
      "subcategory": "advanced",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testBooleanLogicOr9": {
      "name": "testBooleanLogicOr9",
      "expression": "({} or {}).empty()",
      "category": "boolean",
      "subcategory": "logical_or",
      "tags": [
        "r5-xml",
        "testBooleanLogicOr"
      ],
      "description": "Boolean OR with both empty collections",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/boolean/boolean_operations.json",
      "suite_name": "boolean_operations"
    },
    "testConformsTo1": {
      "name": "testConformsTo1",
      "expression": "conformsTo('http://hl7.org/fhir/StructureDefinition/Patient')",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testConformsTo",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "yearOfDate": {
      "name": "yearOfDate",
      "expression": "@2023-05-15.yearOf()",
      "category": "dates",
      "subcategory": "extraction",
      "tags": [
        "date_time_operations",
        "yearOf"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testLiteralInteger1": {
      "name": "testLiteralInteger1",
      "expression": "1.convertsToInteger()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testCombine3": {
      "name": "testCombine3",
      "expression": "name.given.combine($this.name.family).exclude('Jim')",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testCombine()",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "PrecisionEmpty": {
      "name": "PrecisionEmpty",
      "expression": "{}.precision().empty()",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "Precision"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testEscapeHtmlQuotes": {
      "name": "testEscapeHtmlQuotes",
      "expression": "'Say \"hello\"'.escape('html')",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "custom",
        "testEscapeHtmlCustom",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testLiteralDateTimeDay": {
      "name": "testLiteralDateTimeDay",
      "expression": "@2015-02-04T.is(DateTime)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testStartsWith1": {
      "name": "testStartsWith1",
      "expression": "'12345'.startsWith('2') = false",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testStartsWith"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testDateNotEqualTimeMinute": {
      "name": "testDateNotEqualTimeMinute",
      "expression": "Patient.birthDate != @T12:14",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testNotEquivalent4": {
      "name": "testNotEquivalent4",
      "expression": "1 !~ 2",
      "category": "comparison",
      "subcategory": "equivalence",
      "tags": [
        "r5-xml",
        "testNotEquivalent"
      ],
      "description": "Test not equivalent operator with unequal integers",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testToDateFromStringPartial": {
      "name": "testToDateFromStringPartial",
      "expression": "'2023-05'.toDate()",
      "category": "dates",
      "subcategory": "conversion",
      "tags": [
        "date_time_operations",
        "testToDate"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testHourOfDateTimeMidnight": {
      "name": "testHourOfDateTimeMidnight",
      "expression": "@2023-05-15T00:00:00.hourOf()",
      "category": "dates",
      "subcategory": "extraction",
      "tags": [
        "date_time_operations",
        "fhirpath-lab",
        "testHourOf"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testNEquality13": {
      "name": "testNEquality13",
      "expression": "@2012-04-15 != @2012-04-15T10:00:00",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testNEquality"
      ],
      "description": "Test not equal operator with date and datetime of different precision",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testConcatenate1": {
      "name": "testConcatenate1",
      "expression": "'a' & 'b' = 'ab'",
      "category": "string",
      "subcategory": "manipulation",
      "tags": [
        "r5-xml",
        "string_operations",
        "testConcatenate"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testLiteralDateYear": {
      "name": "testLiteralDateYear",
      "expression": "@2015.is(Date)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testType3": {
      "name": "testType3",
      "expression": "true.type().namespace = 'System'",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testType",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testEscapeUnescapeRoundTrip": {
      "name": "testEscapeUnescapeRoundTrip",
      "expression": "'<p>Hello \"world\" & everyone!</p>'.escape('html').unescape('html')",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "custom",
        "testEscapeHtmlCustom",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testDecimalLiteralToIntegerIsEmpty": {
      "name": "testDecimalLiteralToIntegerIsEmpty",
      "expression": "'1.1'.toInteger().empty()",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testSqrt2": {
      "name": "testSqrt2",
      "expression": "(-1).sqrt()",
      "category": "math",
      "subcategory": "advanced",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testIif3": {
      "name": "testIif3",
      "expression": "iif(true, true, (1 | 2).toString())",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testIif",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testToDecimal5": {
      "name": "testToDecimal5",
      "expression": "'st'.toDecimal().empty()",
      "category": "conversion",
      "subcategory": "type_conversion",
      "tags": [
        "r5-xml",
        "testToDecimal"
      ],
      "description": "Convert invalid string to decimal (empty result)",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/conversion/conversion_operations.json",
      "suite_name": "conversion_operations"
    },
    "testEndsWith6": {
      "name": "testEndsWith6",
      "expression": "'12345'.endsWith('012345') = false",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testEndsWith"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testStringDecimalLiteralConvertsToQuantityFalse": {
      "name": "testStringDecimalLiteralConvertsToQuantityFalse",
      "expression": "'1.a'.convertsToQuantity().not()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testRepeatAllInfiniteConstant": {
      "name": "testRepeatAllInfiniteConstant",
      "expression": "1.repeatAll(1)",
      "category": "collection",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "repeatAll-constant"
      ],
      "description": "RepeatAll function with infinite constant",
      "expect_error": true,
      "invalid_kind": "execution",
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testHourOfDateTimeWithTimezone": {
      "name": "testHourOfDateTimeWithTimezone",
      "expression": "@2023-05-15T14:30:00-05:00.hourOf()",
      "category": "dates",
      "subcategory": "extraction",
      "tags": [
        "date_time_operations",
        "fhirpath-lab",
        "testHourOf"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testContainsString1": {
      "name": "testContainsString1",
      "expression": "'12345'.contains('6') = false",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testContainsString"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testUnion9": {
      "name": "testUnion9",
      "expression": "name.select(use | given).count()",
      "category": "collection",
      "subcategory": "set_operations",
      "tags": [
        "r5-xml",
        "testUnion"
      ],
      "description": "union in select expression",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testDateNotEqual": {
      "name": "testDateNotEqual",
      "expression": "Patient.birthDate != @1974-12-25T12:34:00",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testSecondOfDateTimeWithTimezone": {
      "name": "testSecondOfDateTimeWithTimezone",
      "expression": "@2023-05-15T14:30:30-03:00.secondOf()",
      "category": "dates",
      "subcategory": "extraction",
      "tags": [
        "date_time_operations",
        "fhirpath-lab",
        "testSecondOf"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testDivide5": {
      "name": "testDivide5",
      "expression": "(1.2 / 1.8).round(2) = 0.67",
      "category": "math",
      "subcategory": "arithmetic",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "defineVariable16": {
      "name": "defineVariable16",
      "expression": "defineVariable('root', 'r1-').select(defineVariable('v1', 'v1').defineVariable('v2', 'v2').select(%v1 | %v2)).select(%root & $this & %v1)",
      "category": "analyzer",
      "subcategory": null,
      "tags": [
        "r5-xml",
        "analyzer"
      ],
      "description": "multi-tree vars exception",
      "expect_error": true,
      "invalid_kind": "semantic",
      "file_path": "groups/analyzer/analyzer.json",
      "suite_name": "analyzer"
    },
    "testSimpleWithWrongContext": {
      "name": "testSimpleWithWrongContext",
      "expression": "Encounter.name.given",
      "category": "analyzer",
      "subcategory": null,
      "tags": [
        "r5-xml",
        "analyzer"
      ],
      "description": null,
      "expect_error": true,
      "invalid_kind": "semantic",
      "file_path": "groups/analyzer/analyzer.json",
      "suite_name": "analyzer"
    },
    "testStringSecondConvertsToTime": {
      "name": "testStringSecondConvertsToTime",
      "expression": "'14:34:28'.convertsToTime()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testIntersect3": {
      "name": "testIntersect3",
      "expression": "(1 | 2).intersect({}).empty()",
      "category": "collection",
      "subcategory": "set_operations",
      "tags": [
        "r5-xml",
        "testIntersect"
      ],
      "description": "intersect function with empty collection",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testToDecimal3": {
      "name": "testToDecimal3",
      "expression": "'0'.toDecimal() = 0",
      "category": "conversion",
      "subcategory": "type_conversion",
      "tags": [
        "r5-xml",
        "testToDecimal"
      ],
      "description": "Convert zero string to decimal",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/conversion/conversion_operations.json",
      "suite_name": "conversion_operations"
    },
    "testBooleanImplies6": {
      "name": "testBooleanImplies6",
      "expression": "(false implies {}) = true",
      "category": "boolean",
      "subcategory": "logical_implies",
      "tags": [
        "r5-xml",
        "testBooleanImplies"
      ],
      "description": "Boolean IMPLIES with false and empty collection",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/boolean/boolean_operations.json",
      "suite_name": "boolean_operations"
    },
    "testSecondOfDateTime": {
      "name": "testSecondOfDateTime",
      "expression": "@2023-05-15T14:30:45.secondOf()",
      "category": "dates",
      "subcategory": "extraction",
      "tags": [
        "date_time_operations",
        "fhirpath-lab",
        "testSecondOf"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testSort10": {
      "name": "testSort10",
      "expression": "Patient.name.sort(-family, -given.first()).first().use = 'usual'",
      "category": "collection",
      "subcategory": "ordering",
      "tags": [
        "r5-xml",
        "testSort"
      ],
      "description": "sort function with multiple criteria",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testIn1": {
      "name": "testIn1",
      "expression": "1 in (1 | 2 | 3)",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testIn",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testDistinct1": {
      "name": "testDistinct1",
      "expression": "(1 | 2 | 3).isDistinct()",
      "category": "collection",
      "subcategory": "set_operations",
      "tags": [
        "r5-xml",
        "testDistinct"
      ],
      "description": "isDistinct with distinct values",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testMonthOfDateJanuary": {
      "name": "testMonthOfDateJanuary",
      "expression": "@2023-01-15.monthOf()",
      "category": "dates",
      "subcategory": "extraction",
      "tags": [
        "date_time_operations",
        "fhirpath-lab",
        "testMonthOf"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testNotEquivalent15": {
      "name": "testNotEquivalent15",
      "expression": "@2012-04-15 !~ @2012-04-16",
      "category": "comparison",
      "subcategory": "equivalence",
      "tags": [
        "r5-xml",
        "testNotEquivalent"
      ],
      "description": "Test not equivalent operator with unequal dates",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "HighBoundaryDecimal10": {
      "name": "HighBoundaryDecimal10",
      "expression": "1.highBoundary(5)",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "HighBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testGreatorOrEqual7": {
      "name": "testGreatorOrEqual7",
      "expression": "@T12:00:00 >= @T14:00:00",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreatorOrEqual"
      ],
      "description": "Test greater than or equal operator with time values where first time is earlier than second",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testIntegerLiteralIsNotDecimal": {
      "name": "testIntegerLiteralIsNotDecimal",
      "expression": "1.is(Decimal).not()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testCount1": {
      "name": "testCount1",
      "expression": "Patient.name.count()",
      "category": "collection",
      "subcategory": "aggregation",
      "tags": [
        "r5-xml",
        "testCount"
      ],
      "description": "count function basic usage",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testBooleanLogicXOr1": {
      "name": "testBooleanLogicXOr1",
      "expression": "(true xor true) = false",
      "category": "boolean",
      "subcategory": "logical_xor",
      "tags": [
        "r5-xml",
        "testBooleanLogicXOr"
      ],
      "description": "Boolean XOR with both true",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/boolean/boolean_operations.json",
      "suite_name": "boolean_operations"
    },
    "testLiteralNotTrue": {
      "name": "testLiteralNotTrue",
      "expression": "true.not() = false",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testSimpleWithContext": {
      "name": "testSimpleWithContext",
      "expression": "Patient.name.given",
      "category": "other",
      "subcategory": "navigation",
      "tags": [
        "r5-xml",
        "testBasics",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testMinus1": {
      "name": "testMinus1",
      "expression": "1 - 1 = 0",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testMinus",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testPlusDate8": {
      "name": "testPlusDate8",
      "expression": "@1973-12-25T00:00:00.000+10:00 + 1 hour",
      "category": "dates",
      "subcategory": "periods",
      "tags": [
        "date_time_operations",
        "r5-xml",
        "testPlus"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testConformsTo2": {
      "name": "testConformsTo2",
      "expression": "conformsTo('http://hl7.org/fhir/StructureDefinition/Person')",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testConformsTo",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testLessThan3": {
      "name": "testLessThan3",
      "expression": "'a' < 'b'",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessThan"
      ],
      "description": "Test less than operator with strings where first operand is less than second alphabetically",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testDiv3": {
      "name": "testDiv3",
      "expression": "5 div 2 = 2",
      "category": "math",
      "subcategory": "arithmetic",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "HighBoundaryDecimal6": {
      "name": "HighBoundaryDecimal6",
      "expression": "(-1.587).highBoundary(6)",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "HighBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "HighBoundaryQuantity": {
      "name": "HighBoundaryQuantity",
      "expression": "1.587 'm'.highBoundary(8)",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "HighBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "defineVariable1": {
      "name": "defineVariable1",
      "expression": "defineVariable('v1', 'value1').select(%v1)",
      "category": "other",
      "subcategory": "variables",
      "tags": [
        "r5-xml",
        "defineVariable"
      ],
      "description": "simplest variable",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testMultipleResolve": {
      "name": "testMultipleResolve",
      "expression": "composition.exists() \n\t\t\timplies \n\t\t\t(\n\t\t\t\tcomposition.resolve().section.entry.reference.where(resolve() is Observation)\n\t\t\t\t.where($this in (%resource.result.reference | %resource.result.reference.resolve().hasMember.reference)).exists()\n\t\t\t)",
      "category": "other",
      "subcategory": "navigation",
      "tags": [
        "r5-xml",
        "miscEngineTests"
      ],
      "description": "Complex resolve() function usage with multiple references",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testMultiplyEmpty2": {
      "name": "testMultiplyEmpty2",
      "expression": "{} * 1",
      "category": "math",
      "subcategory": "arithmetic",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testLiteralTimeTimezoneOffset": {
      "name": "testLiteralTimeTimezoneOffset",
      "expression": "@T14:34:28+10:00.is(Time)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": true,
      "invalid_kind": "execution",
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testUnion3": {
      "name": "testUnion3",
      "expression": "(1|1).count() = 1",
      "category": "collection",
      "subcategory": "set_operations",
      "tags": [
        "r5-xml",
        "testUnion"
      ],
      "description": "union operator with identical values",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testExists3": {
      "name": "testExists3",
      "expression": "Patient.name.exists(use = 'official')",
      "category": "collection",
      "subcategory": "aggregation",
      "tags": [
        "r5-xml",
        "testExists"
      ],
      "description": "exists function with condition (match)",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testTake2": {
      "name": "testTake2",
      "expression": "(0 | 1 | 2).take(2) = 0 | 1",
      "category": "collection",
      "subcategory": "filtering",
      "tags": [
        "r5-xml",
        "testTake"
      ],
      "description": "take function with multiple elements",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testLessThan6": {
      "name": "testLessThan6",
      "expression": "@2014-12-13T12:00:00 < @2014-12-13T12:00:01",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessThan"
      ],
      "description": "Test less than operator with datetime values where first is earlier than second",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testToDateFromString": {
      "name": "testToDateFromString",
      "expression": "'2023-05-15'.toDate()",
      "category": "dates",
      "subcategory": "conversion",
      "tags": [
        "date_time_operations",
        "testToDate"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testDecimalLiteralToQuantity": {
      "name": "testDecimalLiteralToQuantity",
      "expression": "1.0.toQuantity() = 1.0 '1'",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testIntersect4": {
      "name": "testIntersect4",
      "expression": "1.combine(1).intersect(1).count() = 1",
      "category": "collection",
      "subcategory": "set_operations",
      "tags": [
        "r5-xml",
        "testIntersect"
      ],
      "description": "intersect with combine operation",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testFHIRPathAsFunction11": {
      "name": "testFHIRPathAsFunction11",
      "expression": "Patient.gender.as(string)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testInheritance",
        "other_operations"
      ],
      "description": "Contested: code type is a subtype of string",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "defineVariable6": {
      "name": "defineVariable6",
      "expression": "defineVariable('n1', name.first()).select(id & '-' & %n1.given.join('|')) | defineVariable('n2', name.skip(1).first()).select(%n2.given)",
      "category": "other",
      "subcategory": "variables",
      "tags": [
        "r5-xml",
        "defineVariable"
      ],
      "description": "use of different variables in different contexts",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testLiteralDateTimeTZEqualFalse": {
      "name": "testLiteralDateTimeTZEqualFalse",
      "expression": "@2017-11-05T01:30:00.0-04:00 = @2017-11-05T01:15:00.0-05:00",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testReplaceMatches4": {
      "name": "testReplaceMatches4",
      "expression": "{}.replaceMatches('234', 'X').empty() = true",
      "category": "string",
      "subcategory": "manipulation",
      "tags": [
        "r5-xml",
        "string_operations",
        "testReplaceMatches"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testConcatenate2": {
      "name": "testConcatenate2",
      "expression": "'1' & {} = '1'",
      "category": "string",
      "subcategory": "manipulation",
      "tags": [
        "r5-xml",
        "string_operations",
        "testConcatenate"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testLength4": {
      "name": "testLength4",
      "expression": "'1'.length() = 1",
      "category": "string",
      "subcategory": "conversion",
      "tags": [
        "r5-xml",
        "string_operations",
        "testLength"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testDollarThis2": {
      "name": "testDollarThis2",
      "expression": "Patient.name.given.where(substring($this.length()-3) = 'ter')",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testDollar",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testBooleanImplies3": {
      "name": "testBooleanImplies3",
      "expression": "(true implies {}).empty()",
      "category": "boolean",
      "subcategory": "logical_implies",
      "tags": [
        "r5-xml",
        "testBooleanImplies"
      ],
      "description": "Boolean IMPLIES with true and empty collection",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/boolean/boolean_operations.json",
      "suite_name": "boolean_operations"
    },
    "testNotEquivalent8": {
      "name": "testNotEquivalent8",
      "expression": "1.1 !~ 1.1",
      "category": "comparison",
      "subcategory": "equivalence",
      "tags": [
        "r5-xml",
        "testNotEquivalent"
      ],
      "description": "Test not equivalent operator with equal decimals",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testLiteralDateDay": {
      "name": "testLiteralDateDay",
      "expression": "@2015-02-04.is(Date)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testUnion11": {
      "name": "testUnion11",
      "expression": "name.select(use.union(given)).count()",
      "category": "collection",
      "subcategory": "set_operations",
      "tags": [
        "r5-xml",
        "testUnion"
      ],
      "description": "union function in select",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "LowBoundaryDecimal5": {
      "name": "LowBoundaryDecimal5",
      "expression": "1.587.lowBoundary(32)",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "LowBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testDecimalLiteralToString": {
      "name": "testDecimalLiteralToString",
      "expression": "1.0.toString()",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testLiteralDecimalNegative01": {
      "name": "testLiteralDecimalNegative01",
      "expression": "(-0.1).convertsToDecimal()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testGreaterThanEmpty2": {
      "name": "testGreaterThanEmpty2",
      "expression": "{} > 1",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreaterThan"
      ],
      "description": "Test greater than operator with empty collection compared to value",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testGreatorOrEqual26": {
      "name": "testGreatorOrEqual26",
      "expression": "@2018-03-01T10:30:00 >= @2018-03-01T10:30:00.0",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreatorOrEqual"
      ],
      "description": "Test greater than or equal operator with equivalent datetime values with different precision",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testPlusDate10": {
      "name": "testPlusDate10",
      "expression": "@1973-12-25 + 1 month",
      "category": "dates",
      "subcategory": "periods",
      "tags": [
        "date_time_operations",
        "r5-xml",
        "testPlus"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testCase2": {
      "name": "testCase2",
      "expression": "'t'.lower() = 't'",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testCase",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testCollectionNotEmpty": {
      "name": "testCollectionNotEmpty",
      "expression": "Patient.name.given.empty().not()",
      "category": "other",
      "subcategory": "navigation",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testRepeatAllBasic": {
      "name": "testRepeatAllBasic",
      "expression": "Patient.name.repeatAll('test').count() >= 1",
      "category": "collection",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "repeatAll-basic"
      ],
      "description": "Basic repeatAll function test",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testLiteralTimeSecond": {
      "name": "testLiteralTimeSecond",
      "expression": "@T14:34:28.is(Time)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testEquality2": {
      "name": "testEquality2",
      "expression": "{} = {}",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testEquality"
      ],
      "description": "Test equality operator with empty collections",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testContainsCollection3": {
      "name": "testContainsCollection3",
      "expression": "('a' | 'c' | 'd') contains 'a'",
      "category": "collection",
      "subcategory": "set_operations",
      "tags": [
        "r5-xml",
        "testContainsCollection"
      ],
      "description": "contains function with string values",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testEquivalent8": {
      "name": "testEquivalent8",
      "expression": "1.1 ~ 1.1",
      "category": "comparison",
      "subcategory": "equivalence",
      "tags": [
        "r5-xml",
        "testEquivalent"
      ],
      "description": "Test equivalence operator with equal decimals",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testNotEquivalent1": {
      "name": "testNotEquivalent1",
      "expression": "1 !~ 1",
      "category": "comparison",
      "subcategory": "equivalence",
      "tags": [
        "r5-xml",
        "testNotEquivalent"
      ],
      "description": "Test not equivalent operator with equal integers",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testEscapeHtmlAmpersand": {
      "name": "testEscapeHtmlAmpersand",
      "expression": "'Tom & Jerry'.escape('html')",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "custom",
        "testEscapeHtmlCustom",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testExtension3": {
      "name": "testExtension3",
      "expression": "Patient.birthDate.extension('http://hl7.org/fhir/StructureDefinition/patient-birthTime1').empty()",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testExtension",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testInEmptyValue": {
      "name": "testInEmptyValue",
      "expression": "{} in (1 | 2 | 3)",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testIn",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testEncodeBase64B": {
      "name": "testEncodeBase64B",
      "expression": "'subjects?_d'.encode('base64')",
      "category": "conversion",
      "subcategory": "encoding",
      "tags": [
        "r5-xml",
        "testEncodeDecode"
      ],
      "description": "Encode complex string to base64",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/conversion/conversion_operations.json",
      "suite_name": "conversion_operations"
    },
    "testEquivalent21": {
      "name": "testEquivalent21",
      "expression": "name.take(2).given ~ name.take(2).last().given | name.take(2).first().given",
      "category": "comparison",
      "subcategory": "equivalence",
      "tags": [
        "r5-xml",
        "testEquivalent"
      ],
      "description": "Test equivalence operator with collection and its reordered version",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testLessOrEqual9": {
      "name": "testLessOrEqual9",
      "expression": "1.0 <= 1.0",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessOrEqual"
      ],
      "description": "Test less than or equal operator with equal decimals",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testStringFalseLiteralAlsoConvertsToBoolean": {
      "name": "testStringFalseLiteralAlsoConvertsToBoolean",
      "expression": "'False'.convertsToBoolean()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testLiteralDateTimeUTC": {
      "name": "testLiteralDateTimeUTC",
      "expression": "@2015-02-04T14:34:28Z.is(DateTime)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testHasTemplateId1": {
      "name": "testHasTemplateId1",
      "expression": "hasTemplateIdOf('http://hl7.org/cda/us/ccda/StructureDefinition/ContinuityofCareDocumentCCD')",
      "category": "other",
      "subcategory": "cda",
      "tags": [
        "r5-xml",
        "cdaTests"
      ],
      "description": "hasTemplateIdOf function basic test",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testPolymorphismAsB": {
      "name": "testPolymorphismAsB",
      "expression": "(Observation.value as Period).unit",
      "category": "analyzer",
      "subcategory": null,
      "tags": [
        "r5-xml",
        "analyzer"
      ],
      "description": null,
      "expect_error": true,
      "invalid_kind": "semantic",
      "file_path": "groups/analyzer/analyzer.json",
      "suite_name": "analyzer"
    },
    "testBooleanLogicOr5": {
      "name": "testBooleanLogicOr5",
      "expression": "(false or false) = false",
      "category": "boolean",
      "subcategory": "logical_or",
      "tags": [
        "r5-xml",
        "testBooleanLogicOr"
      ],
      "description": "Boolean OR with both false",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/boolean/boolean_operations.json",
      "suite_name": "boolean_operations"
    },
    "testCollectionBoolean3": {
      "name": "testCollectionBoolean3",
      "expression": "iif(true, true, false)",
      "category": "boolean",
      "subcategory": "conditional",
      "tags": [
        "r5-xml",
        "testCollectionBoolean"
      ],
      "description": "iif function with true condition",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/boolean/boolean_operations.json",
      "suite_name": "boolean_operations"
    },
    "LowBoundaryNegDecimal5": {
      "name": "LowBoundaryNegDecimal5",
      "expression": "(-1.587).lowBoundary(32)",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "LowBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testStringQuantityYearLiteralToQuantity": {
      "name": "testStringQuantityYearLiteralToQuantity",
      "expression": "'1 \\'a\\''.toQuantity() = 1 year",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testIndex": {
      "name": "testIndex",
      "expression": "Patient.telecom.select(iif(value='(03) 3410 5613', $index, {} ))",
      "category": "other",
      "subcategory": "variables",
      "tags": [
        "r5-xml",
        "index-part"
      ],
      "description": "Using $index variable in select expression",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testFalseLiteralConvertsToBoolean": {
      "name": "testFalseLiteralConvertsToBoolean",
      "expression": "false.convertsToBoolean()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "txTest03": {
      "name": "txTest03",
      "expression": "%terminologies.translate('http://hl7.org/fhir/ConceptMap/cm-address-use-v2', $this.address.use).parameter.where(name = 'match').part.where(name = 'concept').value.code",
      "category": "other",
      "subcategory": "terminology",
      "tags": [
        "r5-xml",
        "TerminologyTests"
      ],
      "description": "Terminology translate function test",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testMatchesWithinUrl1a": {
      "name": "testMatchesWithinUrl1a",
      "expression": "'http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1'.matches('.*Library.*')",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testMatches"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testLessOrEqual1": {
      "name": "testLessOrEqual1",
      "expression": "1 <= 2",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessOrEqual"
      ],
      "description": "Test less than or equal operator with integers where first operand is less than second",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testPlus3": {
      "name": "testPlus3",
      "expression": "1.2 + 1.8 = 3.0",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testPlus",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testNow2": {
      "name": "testNow2",
      "expression": "now().toString().length() > 10",
      "category": "dates",
      "subcategory": "conversion",
      "tags": [
        "date_time_operations",
        "r5-xml",
        "testNow"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "txTest01": {
      "name": "txTest01",
      "expression": "%terminologies.expand('http://hl7.org/fhir/ValueSet/administrative-gender').expansion.contains.count()",
      "category": "other",
      "subcategory": "terminology",
      "tags": [
        "r5-xml",
        "TerminologyTests"
      ],
      "description": "Terminology expand function test",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testSuperSetOf1": {
      "name": "testSuperSetOf1",
      "expression": "Patient.name.first().supersetOf($this.name).not()",
      "category": "collection",
      "subcategory": "set_operations",
      "tags": [
        "r5-xml",
        "testSuperSetOf"
      ],
      "description": "supersetOf function negative case",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testDollarThis1": {
      "name": "testDollarThis1",
      "expression": "Patient.name.given.where(substring($this.length()-3) = 'out')",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testDollar",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testEquality8": {
      "name": "testEquality8",
      "expression": "1 = 2",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testEquality"
      ],
      "description": "Test equality operator with unequal integers",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testMatchesFullWithinUrl1a": {
      "name": "testMatchesFullWithinUrl1a",
      "expression": "'http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1'.matchesFull('.*Library.*')",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testMatches"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testGreaterThan7": {
      "name": "testGreaterThan7",
      "expression": "@T12:00:00 > @T14:00:00",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreaterThan"
      ],
      "description": "Test greater than operator with time values where first time is earlier than second",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testEquality11": {
      "name": "testEquality11",
      "expression": "'a' = 'b'",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testEquality"
      ],
      "description": "Test equality operator with unequal strings",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "defineVariable3": {
      "name": "defineVariable3",
      "expression": "defineVariable('n1', name.first()).select(%n1.given).first()",
      "category": "other",
      "subcategory": "variables",
      "tags": [
        "r5-xml",
        "defineVariable"
      ],
      "description": "simple use of a variable 2 selects",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testBooleanLogicXOr6": {
      "name": "testBooleanLogicXOr6",
      "expression": "(false xor {}).empty()",
      "category": "boolean",
      "subcategory": "logical_xor",
      "tags": [
        "r5-xml",
        "testBooleanLogicXOr"
      ],
      "description": "Boolean XOR with false and empty collection",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/boolean/boolean_operations.json",
      "suite_name": "boolean_operations"
    },
    "defineVariable15": {
      "name": "defineVariable15",
      "expression": "defineVariable('root', 'r1-').select(defineVariable('v1', 'v1').defineVariable('v2', 'v2').select(%v1 | %v2)).select(%root & $this)",
      "category": "other",
      "subcategory": "variables",
      "tags": [
        "r5-xml",
        "defineVariable"
      ],
      "description": "multi-tree vars valid",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testGreaterThan3": {
      "name": "testGreaterThan3",
      "expression": "'a' > 'b'",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreaterThan"
      ],
      "description": "Test greater than operator with strings where first operand is less than second alphabetically",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testLiteralDateTimeMinute": {
      "name": "testLiteralDateTimeMinute",
      "expression": "@2015-02-04T14:34.is(DateTime)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "HighBoundaryDecimal3": {
      "name": "HighBoundaryDecimal3",
      "expression": "1.587.highBoundary(-1)",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "HighBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testAggregate2": {
      "name": "testAggregate2",
      "expression": "(1|2|3|4|5|6|7|8|9).aggregate($this+$total, 2) = 47",
      "category": "collection",
      "subcategory": "aggregation",
      "tags": [
        "r5-xml",
        "testAggregate"
      ],
      "description": "aggregate function with initial value",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testToInteger3": {
      "name": "testToInteger3",
      "expression": "'0'.toInteger() = 0",
      "category": "conversion",
      "subcategory": "type_conversion",
      "tags": [
        "r5-xml",
        "testToInteger"
      ],
      "description": "Convert zero string to integer",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/conversion/conversion_operations.json",
      "suite_name": "conversion_operations"
    },
    "testPlusDate4": {
      "name": "testPlusDate4",
      "expression": "@1973-12-25T00:00:00.000+10:00 + 7.7 days",
      "category": "dates",
      "subcategory": "periods",
      "tags": [
        "date_time_operations",
        "r5-xml",
        "testPlus"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testDateGreaterThanDate": {
      "name": "testDateGreaterThanDate",
      "expression": "today() > Patient.birthDate",
      "category": "other",
      "subcategory": "navigation",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testIn5": {
      "name": "testIn5",
      "expression": "('a' | 'c' | 'd') in 'b'",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testIn",
        "other_operations"
      ],
      "description": null,
      "expect_error": true,
      "invalid_kind": "execution",
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testContainsString3": {
      "name": "testContainsString3",
      "expression": "'12345'.contains('45') = true",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testContainsString"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testTypeA2": {
      "name": "testTypeA2",
      "expression": "Parameters.parameter[1].value.is(FHIR.integer)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testType",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testEquivalent17": {
      "name": "testEquivalent17",
      "expression": "@2012-04-15T15:30:31 ~ @2012-04-15T15:30:31.0",
      "category": "comparison",
      "subcategory": "equivalence",
      "tags": [
        "r5-xml",
        "testEquivalent"
      ],
      "description": "Test equivalence operator with equivalent datetime values of different precision",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testExpressions": {
      "name": "testExpressions",
      "expression": "Patient.name.select(given | family).distinct()",
      "category": "other",
      "subcategory": "navigation",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testUnion5": {
      "name": "testUnion5",
      "expression": "1.union(2.union(3)).count() = 3",
      "category": "collection",
      "subcategory": "set_operations",
      "tags": [
        "r5-xml",
        "testUnion"
      ],
      "description": "union function nesting",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testPlusEmpty1": {
      "name": "testPlusEmpty1",
      "expression": "1 + {}",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testPlus",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "HighBoundaryDecimal16": {
      "name": "HighBoundaryDecimal16",
      "expression": "-0.0034.highBoundary(1)",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "HighBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testType1": {
      "name": "testType1",
      "expression": "1.type().namespace = 'System'",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testType",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testTake3": {
      "name": "testTake3",
      "expression": "Patient.name.take(1).given = 'Peter' | 'James'",
      "category": "collection",
      "subcategory": "filtering",
      "tags": [
        "r5-xml",
        "testTake"
      ],
      "description": "take function with real data",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testFHIRPathIsFunction7": {
      "name": "testFHIRPathIsFunction7",
      "expression": "ValueSet.version.is(code)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testInheritance",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testNotEquivalent6": {
      "name": "testNotEquivalent6",
      "expression": "'a' !~ 'A'",
      "category": "comparison",
      "subcategory": "equivalence",
      "tags": [
        "r5-xml",
        "testNotEquivalent"
      ],
      "description": "Test not equivalent operator with case-insensitive string comparison",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testContainsString8": {
      "name": "testContainsString8",
      "expression": "{}.contains('a').empty() = true",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testContainsString"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "LowBoundaryDecimal15": {
      "name": "LowBoundaryDecimal15",
      "expression": "(-0.0034).lowBoundary(1)",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "LowBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testUnion10": {
      "name": "testUnion10",
      "expression": "name.select(use.union($this.given)).count()",
      "category": "collection",
      "subcategory": "set_operations",
      "tags": [
        "r5-xml",
        "testUnion"
      ],
      "description": "union function with $this context",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testContainsCollection1": {
      "name": "testContainsCollection1",
      "expression": "(1 | 2 | 3) contains 1",
      "category": "collection",
      "subcategory": "set_operations",
      "tags": [
        "r5-xml",
        "testContainsCollection"
      ],
      "description": "contains function with matching element",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testMinus8": {
      "name": "testMinus8",
      "expression": "@T01:00:00 - 2 hours",
      "category": "dates",
      "subcategory": "periods",
      "tags": [
        "date_time_operations",
        "r5-xml",
        "testMinus"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testGreaterThan5": {
      "name": "testGreaterThan5",
      "expression": "@2014-12-12 > @2014-12-13",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreaterThan"
      ],
      "description": "Test greater than operator with dates where first date is earlier than second",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testQuantityLiteralWkToString": {
      "name": "testQuantityLiteralWkToString",
      "expression": "1 'wk'.toString()",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testMinuteOfDateTimeZero": {
      "name": "testMinuteOfDateTimeZero",
      "expression": "@2023-05-15T14:00:00.minuteOf()",
      "category": "dates",
      "subcategory": "extraction",
      "tags": [
        "date_time_operations",
        "fhirpath-lab",
        "testMinuteOf"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testReplace5": {
      "name": "testReplace5",
      "expression": "'123'.replace({}, 'X').empty() = true",
      "category": "string",
      "subcategory": "manipulation",
      "tags": [
        "r5-xml",
        "string_operations",
        "testReplace"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testDayOfLeapYear": {
      "name": "testDayOfLeapYear",
      "expression": "@2024-02-29.dayOf()",
      "category": "dates",
      "subcategory": "extraction",
      "tags": [
        "date_time_operations",
        "fhirpath-lab",
        "testDayOf"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testTypeA1": {
      "name": "testTypeA1",
      "expression": "Parameters.parameter[0].value.is(FHIR.string)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testType",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testDateNotEqualTimezoneOffsetAfter": {
      "name": "testDateNotEqualTimezoneOffsetAfter",
      "expression": "Patient.birthDate != @1974-12-25T12:34:00+10:00",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testBooleanLogicAnd9": {
      "name": "testBooleanLogicAnd9",
      "expression": "({} and {}).empty()",
      "category": "boolean",
      "subcategory": "logical_and",
      "tags": [
        "r5-xml",
        "testBooleanLogicAnd"
      ],
      "description": "Boolean AND with both empty collections",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/boolean/boolean_operations.json",
      "suite_name": "boolean_operations"
    },
    "yearOfDateTimeWithTimezone": {
      "name": "yearOfDateTimeWithTimezone",
      "expression": "@2023-01-01T00:00:00-05:00.yearOf()",
      "category": "dates",
      "subcategory": "extraction",
      "tags": [
        "date_time_operations",
        "yearOf"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testLnEmpty": {
      "name": "testLnEmpty",
      "expression": "{}.ln().empty()",
      "category": "math",
      "subcategory": "advanced",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testType9": {
      "name": "testType9",
      "expression": "Patient.active.type().namespace = 'FHIR'",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testType",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testBooleanLogicAnd7": {
      "name": "testBooleanLogicAnd7",
      "expression": "({} and true).empty()",
      "category": "boolean",
      "subcategory": "logical_and",
      "tags": [
        "r5-xml",
        "testBooleanLogicAnd"
      ],
      "description": "Boolean AND with empty collection and true",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/boolean/boolean_operations.json",
      "suite_name": "boolean_operations"
    },
    "testComment3": {
      "name": "testComment3",
      "expression": "2 + 2 \n      /*\nThis is a multi-line comment\nAny text enclosed within is ignored\n+2\n*/",
      "category": "analyzer",
      "subcategory": "syntax",
      "tags": [
        "r5-xml",
        "comments"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/analyzer/analyzer.json",
      "suite_name": "analyzer"
    },
    "testFHIRPathIsFunction6": {
      "name": "testFHIRPathIsFunction6",
      "expression": "ValueSet.version.is(string)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testInheritance",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testExclude2": {
      "name": "testExclude2",
      "expression": "(1 | 2).exclude(4) = 1 | 2",
      "category": "collection",
      "subcategory": "set_operations",
      "tags": [
        "r5-xml",
        "testExclude"
      ],
      "description": "exclude function with no common elements",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testFloor1": {
      "name": "testFloor1",
      "expression": "1.floor() = 1",
      "category": "math",
      "subcategory": "rounding",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "PrecisionTimeMinutes": {
      "name": "PrecisionTimeMinutes",
      "expression": "@T10:30.precision()",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "Precision"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testSkip1": {
      "name": "testSkip1",
      "expression": "(0 | 1 | 2).skip(1) = 1 | 2",
      "category": "collection",
      "subcategory": "filtering",
      "tags": [
        "r5-xml",
        "testSkip"
      ],
      "description": "skip function basic usage",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testDayOfDateMiddleOfMonth": {
      "name": "testDayOfDateMiddleOfMonth",
      "expression": "@2023-05-15.dayOf()",
      "category": "dates",
      "subcategory": "extraction",
      "tags": [
        "date_time_operations",
        "fhirpath-lab",
        "testDayOf"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testNotInvalid": {
      "name": "testNotInvalid",
      "expression": "(1|2).not() = false",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": true,
      "invalid_kind": "execution",
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testToDateFromStringYear": {
      "name": "testToDateFromStringYear",
      "expression": "'2023'.toDate()",
      "category": "dates",
      "subcategory": "conversion",
      "tags": [
        "date_time_operations",
        "testToDate"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testFHIRPathIsFunction3": {
      "name": "testFHIRPathIsFunction3",
      "expression": "Patient.gender.is(id)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testInheritance",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testEndsWith8": {
      "name": "testEndsWith8",
      "expression": "{}.endsWith('1').empty() = true",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testEndsWith"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testLiteralIntegerLessThanTrue": {
      "name": "testLiteralIntegerLessThanTrue",
      "expression": "1 < 2",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testType2a": {
      "name": "testType2a",
      "expression": "'1'.type().name = 'String'",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testType",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testEquivalent15": {
      "name": "testEquivalent15",
      "expression": "@2012-04-15 ~ @2012-04-16",
      "category": "comparison",
      "subcategory": "equivalence",
      "tags": [
        "r5-xml",
        "testEquivalent"
      ],
      "description": "Test equivalence operator with unequal dates",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testFloor3": {
      "name": "testFloor3",
      "expression": "(-2.1).floor() = -3",
      "category": "math",
      "subcategory": "rounding",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "yearOfPatientBirthDate": {
      "name": "yearOfPatientBirthDate",
      "expression": "Patient.birthDate.yearOf()",
      "category": "dates",
      "subcategory": "extraction",
      "tags": [
        "date_time_operations",
        "yearOf"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testTruncate1": {
      "name": "testTruncate1",
      "expression": "101.truncate() = 101",
      "category": "math",
      "subcategory": "rounding",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testToDateTimeFromDateTime": {
      "name": "testToDateTimeFromDateTime",
      "expression": "'1974-12-25T10:20:00+00:00'.toDateTime()",
      "category": "dates",
      "subcategory": "conversion",
      "tags": [
        "date_time_operations",
        "testToDateTime"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testEncodeUrlBase64": {
      "name": "testEncodeUrlBase64",
      "expression": "'subjects?_d'.encode('urlbase64')",
      "category": "conversion",
      "subcategory": "encoding",
      "tags": [
        "r5-xml",
        "testEncodeDecode"
      ],
      "description": "Encode string to URL-safe base64",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/conversion/conversion_operations.json",
      "suite_name": "conversion_operations"
    },
    "testPlusTime2": {
      "name": "testPlusTime2",
      "expression": "@T23:00:00 + 2 hours",
      "category": "dates",
      "subcategory": "periods",
      "tags": [
        "date_time_operations",
        "r5-xml",
        "testPlus"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testPlusDate22": {
      "name": "testPlusDate22",
      "expression": "@1973-12-25T00:00:00.000+10:00 + 1 'h'",
      "category": "dates",
      "subcategory": "periods",
      "tags": [
        "date_time_operations",
        "r5-xml",
        "testPlus"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testLiteralIntegerNegative1Invalid": {
      "name": "testLiteralIntegerNegative1Invalid",
      "expression": "-1.convertsToInteger()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": true,
      "invalid_kind": "execution",
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testSubstring4": {
      "name": "testSubstring4",
      "expression": "'12345'.substring(25).empty()",
      "category": "string",
      "subcategory": "manipulation",
      "tags": [
        "r5-xml",
        "string_operations",
        "testSubstring"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testPlus1": {
      "name": "testPlus1",
      "expression": "1 + 1 = 2",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testPlus",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testAggregate3": {
      "name": "testAggregate3",
      "expression": "(1|2|3|4|5|6|7|8|9).aggregate(iif($total.empty(), $this, iif($this < $total, $this, $total))) = 1",
      "category": "collection",
      "subcategory": "aggregation",
      "tags": [
        "r5-xml",
        "testAggregate"
      ],
      "description": "aggregate function for minimum",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testAbs1": {
      "name": "testAbs1",
      "expression": "(-5).abs() = 5",
      "category": "math",
      "subcategory": "advanced",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testSqrt1": {
      "name": "testSqrt1",
      "expression": "81.sqrt() = 9.0",
      "category": "math",
      "subcategory": "advanced",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testComment9": {
      "name": "testComment9",
      "expression": "2 + /* inline $@%^+ * */ 2 = 4",
      "category": "analyzer",
      "subcategory": "syntax",
      "tags": [
        "r5-xml",
        "comments"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/analyzer/analyzer.json",
      "suite_name": "analyzer"
    },
    "testRepeatAllNoArguments": {
      "name": "testRepeatAllNoArguments",
      "expression": "1.repeatAll()",
      "category": "collection",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "repeatAll-noargs"
      ],
      "description": "RepeatAll function with no arguments",
      "expect_error": true,
      "invalid_kind": "execution",
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testStringTrueLiteralConvertsToBoolean": {
      "name": "testStringTrueLiteralConvertsToBoolean",
      "expression": "'true'.convertsToBoolean()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testEquality19": {
      "name": "testEquality19",
      "expression": "@2012-04-15 = @2012-04-15T10:00:00",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testEquality"
      ],
      "description": "Test equality operator with date and datetime of different precision",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testPlusDate5": {
      "name": "testPlusDate5",
      "expression": "@1973-12-25T00:00:00.000+10:00 + 1 second",
      "category": "dates",
      "subcategory": "periods",
      "tags": [
        "date_time_operations",
        "r5-xml",
        "testPlus"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testPeriodInvariantOld": {
      "name": "testPeriodInvariantOld",
      "expression": "Patient.identifier.period.all(start.hasValue().not() or end.hasValue().not() or (start <= end))",
      "category": "dates",
      "subcategory": "periods",
      "tags": [
        "date_time_operations",
        "r5-xml",
        "period"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testMod1": {
      "name": "testMod1",
      "expression": "1 mod 1 = 0",
      "category": "math",
      "subcategory": "arithmetic",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testReplace3": {
      "name": "testReplace3",
      "expression": "'123456'.replace('234', '')",
      "category": "string",
      "subcategory": "manipulation",
      "tags": [
        "r5-xml",
        "string_operations",
        "testReplace"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testLessThan26": {
      "name": "testLessThan26",
      "expression": "@2018-03-01T10:30:00 < @2018-03-01T10:30:00.0",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessThan"
      ],
      "description": "Test less than operator with equivalent datetime values with different precision",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "yearOfLeapYear": {
      "name": "yearOfLeapYear",
      "expression": "@2024-02-29.yearOf()",
      "category": "dates",
      "subcategory": "extraction",
      "tags": [
        "date_time_operations",
        "yearOf"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "defineVariable9": {
      "name": "defineVariable9",
      "expression": "defineVariable('n1', name.first()).active | defineVariable('n2', name.skip(1).first()).select(%n1.given)",
      "category": "analyzer",
      "subcategory": null,
      "tags": [
        "r5-xml",
        "analyzer"
      ],
      "description": "use of a variable outside context throws error",
      "expect_error": true,
      "invalid_kind": "semantic",
      "file_path": "groups/analyzer/analyzer.json",
      "suite_name": "analyzer"
    },
    "testExtractBirthDate": {
      "name": "testExtractBirthDate",
      "expression": "birthDate",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testMiscellaneousAccessorTests",
        "other_operations"
      ],
      "description": "Extract birthDate",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testNEquality9": {
      "name": "testNEquality9",
      "expression": "0 != 0",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testNEquality"
      ],
      "description": "Test not equal operator with zero values",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testExp3": {
      "name": "testExp3",
      "expression": "{}.exp().empty() = true",
      "category": "math",
      "subcategory": "advanced",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testCollectionBoolean6": {
      "name": "testCollectionBoolean6",
      "expression": "iif(false, 1/0, true)",
      "category": "boolean",
      "subcategory": "conditional",
      "tags": [
        "r5-xml",
        "testCollectionBoolean"
      ],
      "description": "iif function short-circuit evaluation (false branch)",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/boolean/boolean_operations.json",
      "suite_name": "boolean_operations"
    },
    "testLessThan8": {
      "name": "testLessThan8",
      "expression": "1 < 1",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessThan"
      ],
      "description": "Test less than operator with equal integers",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testGreaterThan19": {
      "name": "testGreaterThan19",
      "expression": "@2014-12-13 > @2014-12-12",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreaterThan"
      ],
      "description": "Test greater than operator with dates where first date is later than second",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testNotEquivalent9": {
      "name": "testNotEquivalent9",
      "expression": "1.1 !~ 1.2",
      "category": "comparison",
      "subcategory": "equivalence",
      "tags": [
        "r5-xml",
        "testNotEquivalent"
      ],
      "description": "Test not equivalent operator with unequal decimals",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testNEquality24": {
      "name": "testNEquality24",
      "expression": "Observation.value != 185 'kg'",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testNEquality"
      ],
      "description": "Test not equal operator with quantity values of different units",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testTimezoneOffsetOfDateTimePositive": {
      "name": "testTimezoneOffsetOfDateTimePositive",
      "expression": "@2023-05-15T14:30:00+05:00.timezoneOffsetOf()",
      "category": "dates",
      "subcategory": "extraction",
      "tags": [
        "date_time_operations",
        "fhirpath-lab",
        "testTimezoneOffsetOf"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testSelect1": {
      "name": "testSelect1",
      "expression": "Patient.name.select(given).count() = 5",
      "category": "collection",
      "subcategory": "filtering",
      "tags": [
        "r5-xml",
        "testSelect"
      ],
      "description": "select operation with count",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testLessOrEqual17": {
      "name": "testLessOrEqual17",
      "expression": "'b' <= 'a'",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessOrEqual"
      ],
      "description": "Test less than or equal operator with strings where first operand is greater than second alphabetically",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "HighBoundaryDecimal14": {
      "name": "HighBoundaryDecimal14",
      "expression": "-120.highBoundary(2)",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "HighBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testLessOrEqual22": {
      "name": "testLessOrEqual22",
      "expression": "Observation.value <= 200 '[lb_av]'",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessOrEqual"
      ],
      "description": "Test less than or equal operator with quantity values",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testTail1": {
      "name": "testTail1",
      "expression": "(0 | 1 | 2).tail() = 1 | 2",
      "category": "collection",
      "subcategory": "filtering",
      "tags": [
        "r5-xml",
        "testTail"
      ],
      "description": "tail function basic usage",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testDistinct2": {
      "name": "testDistinct2",
      "expression": "Questionnaire.descendants().linkId.isDistinct()",
      "category": "collection",
      "subcategory": "set_operations",
      "tags": [
        "r5-xml",
        "testDistinct"
      ],
      "description": "isDistinct with complex path",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "LowBoundaryNegDecimal2": {
      "name": "LowBoundaryNegDecimal2",
      "expression": "(-1.587).lowBoundary(2)",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "LowBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testStringSecondConvertsToDateTime": {
      "name": "testStringSecondConvertsToDateTime",
      "expression": "'2015-02-04T14:34:28'.convertsToDateTime()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testLessThan4": {
      "name": "testLessThan4",
      "expression": "'A' < 'a'",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessThan"
      ],
      "description": "Test less than operator with case-sensitive string comparison",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testDecimalLiteralConvertsToQuantity": {
      "name": "testDecimalLiteralConvertsToQuantity",
      "expression": "1.0.convertsToQuantity()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testUnion1": {
      "name": "testUnion1",
      "expression": "(1 | 2 | 3).count() = 3",
      "category": "collection",
      "subcategory": "set_operations",
      "tags": [
        "r5-xml",
        "testUnion"
      ],
      "description": "union operator with distinct values",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testGreaterThan10": {
      "name": "testGreaterThan10",
      "expression": "'a' > 'a'",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreaterThan"
      ],
      "description": "Test greater than operator with equal strings",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testMatchesWithinUrl2": {
      "name": "testMatchesWithinUrl2",
      "expression": "'http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1'.matches('Library')",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testMatches"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testSubstring10": {
      "name": "testSubstring10",
      "expression": "Patient.name.family.first().select(substring(2, length()-5))",
      "category": "string",
      "subcategory": "manipulation",
      "tags": [
        "r5-xml",
        "string_operations",
        "testSubstring"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testReplaceMatches3": {
      "name": "testReplaceMatches3",
      "expression": "'123456'.replaceMatches('234', '')",
      "category": "string",
      "subcategory": "manipulation",
      "tags": [
        "r5-xml",
        "string_operations",
        "testReplaceMatches"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testNEquality4": {
      "name": "testNEquality4",
      "expression": "'a' != 'a'",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testNEquality"
      ],
      "description": "Test not equal operator with equal strings",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testEquality1": {
      "name": "testEquality1",
      "expression": "1 = 1",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testEquality"
      ],
      "description": "Test equality operator with equal integers",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testCombine2": {
      "name": "testCombine2",
      "expression": "name.given.combine(name.family).exclude('Jim')",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testCombine()",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testTimezoneOffsetOfDateTimeNegative": {
      "name": "testTimezoneOffsetOfDateTimeNegative",
      "expression": "@2023-05-15T14:30:00-05:00.timezoneOffsetOf()",
      "category": "dates",
      "subcategory": "extraction",
      "tags": [
        "date_time_operations",
        "fhirpath-lab",
        "testTimezoneOffsetOf"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testStartsWithNonString1": {
      "name": "testStartsWithNonString1",
      "expression": "Appointment.identifier.startsWith('rand')",
      "category": "analyzer",
      "subcategory": null,
      "tags": [
        "r5-xml",
        "analyzer"
      ],
      "description": "String function called on non-string type",
      "expect_error": true,
      "invalid_kind": "semantic",
      "file_path": "groups/analyzer/analyzer.json",
      "suite_name": "analyzer"
    },
    "testDateEqual": {
      "name": "testDateEqual",
      "expression": "Patient.birthDate = @1974-12-25",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testEquivalent18": {
      "name": "testEquivalent18",
      "expression": "@2012-04-15T15:30:31 ~ @2012-04-15T15:30:31.1",
      "category": "comparison",
      "subcategory": "equivalence",
      "tags": [
        "r5-xml",
        "testEquivalent"
      ],
      "description": "Test equivalence operator with datetime values differing by milliseconds",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testExists1": {
      "name": "testExists1",
      "expression": "Patient.name.exists()",
      "category": "collection",
      "subcategory": "aggregation",
      "tags": [
        "r5-xml",
        "testExists"
      ],
      "description": "exists function basic usage",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "LowBoundaryQuantity": {
      "name": "LowBoundaryQuantity",
      "expression": "1.587 'cm'.lowBoundary(8)",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "LowBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testEquivalent2": {
      "name": "testEquivalent2",
      "expression": "{} ~ {}",
      "category": "comparison",
      "subcategory": "equivalence",
      "tags": [
        "r5-xml",
        "testEquivalent"
      ],
      "description": "Test equivalence operator with empty collections",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testSubstring3": {
      "name": "testSubstring3",
      "expression": "'12345'.substring(2,5) = '345'",
      "category": "string",
      "subcategory": "manipulation",
      "tags": [
        "r5-xml",
        "string_operations",
        "testSubstring"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testFHIRPathIsFunction10": {
      "name": "testFHIRPathIsFunction10",
      "expression": "Observation.extension('http://example.com/fhir/StructureDefinition/patient-age').value is Duration",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testInheritance",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "LowBoundaryDecimalDefault": {
      "name": "LowBoundaryDecimalDefault",
      "expression": "1.587.lowBoundary()",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "LowBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testIntegerLiteralFalseConvertsToBoolean": {
      "name": "testIntegerLiteralFalseConvertsToBoolean",
      "expression": "0.convertsToBoolean()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testIntegerLiteralToInteger": {
      "name": "testIntegerLiteralToInteger",
      "expression": "1.toInteger() = 1",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "yearOfOldDate": {
      "name": "yearOfOldDate",
      "expression": "@1900-01-01.yearOf()",
      "category": "dates",
      "subcategory": "extraction",
      "tags": [
        "date_time_operations",
        "yearOf"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testLiteralUnicode": {
      "name": "testLiteralUnicode",
      "expression": "Patient.name.given.first() = 'P\\u0065ter'",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testModEmpty1": {
      "name": "testModEmpty1",
      "expression": "1 mod {}",
      "category": "math",
      "subcategory": "arithmetic",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testRepeat3": {
      "name": "testRepeat3",
      "expression": "Questionnaire.descendants().code.count() = 23",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testRepeat",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testEquivalent12": {
      "name": "testEquivalent12",
      "expression": "0 ~ 0",
      "category": "comparison",
      "subcategory": "equivalence",
      "tags": [
        "r5-xml",
        "testEquivalent"
      ],
      "description": "Test equivalence operator with zero values",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testMinusEmpty3": {
      "name": "testMinusEmpty3",
      "expression": "{} - {}",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testMinus",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testExtension2": {
      "name": "testExtension2",
      "expression": "Patient.birthDate.extension(%`ext-patient-birthTime`).exists()",
      "category": "other",
      "subcategory": "navigation",
      "tags": [
        "r5-xml",
        "testExtension",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testLessOrEqual3": {
      "name": "testLessOrEqual3",
      "expression": "'a' <= 'b'",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessOrEqual"
      ],
      "description": "Test less than or equal operator with strings where first operand is less than second alphabetically",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testHasTemplateId2": {
      "name": "testHasTemplateId2",
      "expression": "ClinicalDocument.hasTemplateIdOf('http://hl7.org/cda/us/ccda/StructureDefinition/ContinuityofCareDocumentCCD')",
      "category": "other",
      "subcategory": "cda",
      "tags": [
        "r5-xml",
        "cdaTests"
      ],
      "description": "hasTemplateIdOf function with ClinicalDocument context",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testNEquality10": {
      "name": "testNEquality10",
      "expression": "0.0 != 0",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testNEquality"
      ],
      "description": "Test not equal operator with decimal zero and integer zero",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testSecondOfDateTimeZero": {
      "name": "testSecondOfDateTimeZero",
      "expression": "@2023-05-15T14:30:00.secondOf()",
      "category": "dates",
      "subcategory": "extraction",
      "tags": [
        "date_time_operations",
        "fhirpath-lab",
        "testSecondOf"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testQuantityLiteralConvertsToString": {
      "name": "testQuantityLiteralConvertsToString",
      "expression": "1 'wk'.convertsToString()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testLiteralTimeMillisecond": {
      "name": "testLiteralTimeMillisecond",
      "expression": "@T14:34:28.123.is(Time)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testTruncateEmpty": {
      "name": "testTruncateEmpty",
      "expression": "{}.truncate().empty()",
      "category": "math",
      "subcategory": "rounding",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testBooleanImplies1": {
      "name": "testBooleanImplies1",
      "expression": "(true implies true) = true",
      "category": "boolean",
      "subcategory": "logical_implies",
      "tags": [
        "r5-xml",
        "testBooleanImplies"
      ],
      "description": "Boolean IMPLIES with both true",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/boolean/boolean_operations.json",
      "suite_name": "boolean_operations"
    },
    "testMatchesEmpty3": {
      "name": "testMatchesEmpty3",
      "expression": "{}.matches({}).empty() = true",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testMatches"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "LowBoundaryDecimal13": {
      "name": "LowBoundaryDecimal13",
      "expression": "(-120).lowBoundary(2)",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "LowBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testType23": {
      "name": "testType23",
      "expression": "Patient.ofType(FHIR.`Patient`).type().name",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testType",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "LowBoundaryNegDecimal4": {
      "name": "LowBoundaryNegDecimal4",
      "expression": "(-1.587).lowBoundary(0)",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "LowBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testIntegerLiteralToBooleanFalse": {
      "name": "testIntegerLiteralToBooleanFalse",
      "expression": "0.toBoolean()",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testEquality5": {
      "name": "testEquality5",
      "expression": "(1 | 2) = (1 | 2)",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testEquality"
      ],
      "description": "Test equality operator with equal collections of two elements",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testPolymorphismIsB": {
      "name": "testPolymorphismIsB",
      "expression": "Observation.value.is(Period).not()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testObservations",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testLessThanEmpty1": {
      "name": "testLessThanEmpty1",
      "expression": "1 < {}",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessThan"
      ],
      "description": "Test less than operator with value compared to empty collection",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testStringIntegerLiteralToQuantity": {
      "name": "testStringIntegerLiteralToQuantity",
      "expression": "'1'.toQuantity()",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testGreatorOrEqual4": {
      "name": "testGreatorOrEqual4",
      "expression": "'A' >= 'a'",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreatorOrEqual"
      ],
      "description": "Test greater than or equal operator with case-sensitive string comparison",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testStringQuantityWeekLiteralToQuantity": {
      "name": "testStringQuantityWeekLiteralToQuantity",
      "expression": "'1 \\'wk\\''.toQuantity() = 1 week",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testSubSetOf2": {
      "name": "testSubSetOf2",
      "expression": "Patient.name.subsetOf($this.name.first()).not()",
      "category": "collection",
      "subcategory": "set_operations",
      "tags": [
        "r5-xml",
        "testSubSetOf"
      ],
      "description": "subsetOf function negative case",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testUnescapeHtml": {
      "name": "testUnescapeHtml",
      "expression": "'&quot;1&lt;2&quot;'.unescape('html')",
      "category": "conversion",
      "subcategory": "escaping",
      "tags": [
        "r5-xml",
        "testEscapeUnescape"
      ],
      "description": "Unescape HTML entities",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/conversion/conversion_operations.json",
      "suite_name": "conversion_operations"
    },
    "testConformsTo3": {
      "name": "testConformsTo3",
      "expression": "conformsTo('http://trash')",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testConformsTo",
        "other_operations"
      ],
      "description": null,
      "expect_error": true,
      "invalid_kind": "execution",
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testPlusDate18": {
      "name": "testPlusDate18",
      "expression": "@1973-12-25T00:00:00.000+10:00 + 1 's'",
      "category": "dates",
      "subcategory": "periods",
      "tags": [
        "date_time_operations",
        "r5-xml",
        "testPlus"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testDateTimeGreaterThanDate1": {
      "name": "testDateTimeGreaterThanDate1",
      "expression": "now() > Patient.birthDate",
      "category": "other",
      "subcategory": "navigation",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testPlusDate9": {
      "name": "testPlusDate9",
      "expression": "@1973-12-25 + 1 day",
      "category": "dates",
      "subcategory": "periods",
      "tags": [
        "date_time_operations",
        "r5-xml",
        "testPlus"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "defineVariable13": {
      "name": "defineVariable13",
      "expression": "Patient.name.defineVariable('n2', skip(1).first()).defineVariable('res', %n2.given+%n2.given).select(%res)",
      "category": "other",
      "subcategory": "variables",
      "tags": [
        "r5-xml",
        "defineVariable"
      ],
      "description": "sequence of variable definitions tweak",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testPower1": {
      "name": "testPower1",
      "expression": "2.power(3) = 8",
      "category": "math",
      "subcategory": "advanced",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testGreatorOrEqual1": {
      "name": "testGreatorOrEqual1",
      "expression": "1 >= 2",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreatorOrEqual"
      ],
      "description": "Test greater than or equal operator with integers where first operand is less than second",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testStringTZConvertsToDateTime": {
      "name": "testStringTZConvertsToDateTime",
      "expression": "'2015-02-04T14:34:28+10:00'.convertsToDateTime()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testExists2": {
      "name": "testExists2",
      "expression": "Patient.name.exists(use = 'nickname')",
      "category": "collection",
      "subcategory": "aggregation",
      "tags": [
        "r5-xml",
        "testExists"
      ],
      "description": "exists function with condition (no match)",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testCase4": {
      "name": "testCase4",
      "expression": "'T'.lower() = 't'",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testCase",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testIn3": {
      "name": "testIn3",
      "expression": "'a' in ('a' | 'c' | 'd')",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testIn",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testMatchesCaseSensitive1": {
      "name": "testMatchesCaseSensitive1",
      "expression": "'FHIR'.matches('FHIR')",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testMatches"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testGreaterThan15": {
      "name": "testGreaterThan15",
      "expression": "2 > 1",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreaterThan"
      ],
      "description": "Test greater than operator with integers where first operand is greater than second",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testFHIRPathAsFunction14": {
      "name": "testFHIRPathAsFunction14",
      "expression": "ValueSet.version.as(string)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testInheritance",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testLength1": {
      "name": "testLength1",
      "expression": "'123456'.length() = 6",
      "category": "string",
      "subcategory": "conversion",
      "tags": [
        "r5-xml",
        "string_operations",
        "testLength"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testSuperSetOf2": {
      "name": "testSuperSetOf2",
      "expression": "Patient.name.supersetOf($this.name.first())",
      "category": "collection",
      "subcategory": "set_operations",
      "tags": [
        "r5-xml",
        "testSuperSetOf"
      ],
      "description": "supersetOf function basic usage",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testQuantity9": {
      "name": "testQuantity9",
      "expression": "2.0 'cm' * 2.0 'm' = 0.040 'm2'",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testQuantity",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testDecimalLiteralIsNotQuantity": {
      "name": "testDecimalLiteralIsNotQuantity",
      "expression": "1.0.is(System.Quantity).not()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testType19": {
      "name": "testType19",
      "expression": "Patient.is(FHIR.`Patient`)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testType",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testLiteralIntegerCountNotEqual": {
      "name": "testLiteralIntegerCountNotEqual",
      "expression": "Patient.name.given.count() != 0",
      "category": "other",
      "subcategory": "navigation",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testEndsWith4": {
      "name": "testEndsWith4",
      "expression": "'12345'.endsWith('35') = false",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testEndsWith"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "yearOfEmptyCollection": {
      "name": "yearOfEmptyCollection",
      "expression": "{}.yearOf()",
      "category": "dates",
      "subcategory": "extraction",
      "tags": [
        "date_time_operations",
        "yearOf"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testEquivalent19": {
      "name": "testEquivalent19",
      "expression": "name ~ name",
      "category": "comparison",
      "subcategory": "equivalence",
      "tags": [
        "r5-xml",
        "testEquivalent"
      ],
      "description": "Test equivalence operator with identical path expressions",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testSingle1": {
      "name": "testSingle1",
      "expression": "Patient.name.first().single().exists()",
      "category": "collection",
      "subcategory": "filtering",
      "tags": [
        "r5-xml",
        "testSingle"
      ],
      "description": "single function with single element",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "LowBoundaryDecimal9": {
      "name": "LowBoundaryDecimal9",
      "expression": "1.lowBoundary(5)",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "LowBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testLessOrEqual18": {
      "name": "testLessOrEqual18",
      "expression": "'B' <= 'A'",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessOrEqual"
      ],
      "description": "Test less than or equal operator with uppercase strings where first is greater than second",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testSubstring2": {
      "name": "testSubstring2",
      "expression": "'12345'.substring(2,1) = '3'",
      "category": "string",
      "subcategory": "manipulation",
      "tags": [
        "r5-xml",
        "string_operations",
        "testSubstring"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testSubstring7": {
      "name": "testSubstring7",
      "expression": "'LogicalModel-Person'.substring(0, 12)",
      "category": "string",
      "subcategory": "manipulation",
      "tags": [
        "r5-xml",
        "string_operations",
        "testSubstring"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testEquality14": {
      "name": "testEquality14",
      "expression": "1.10 = 1.1",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testEquality"
      ],
      "description": "Test equality operator with equivalent decimals of different precision",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testBooleanLiteralToDecimal": {
      "name": "testBooleanLiteralToDecimal",
      "expression": "true.toDecimal() = 1",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testDateNotEqualToday": {
      "name": "testDateNotEqualToday",
      "expression": "Patient.birthDate < today()",
      "category": "other",
      "subcategory": "navigation",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testEndsWith1": {
      "name": "testEndsWith1",
      "expression": "'12345'.endsWith('2') = false",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testEndsWith"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testLength3": {
      "name": "testLength3",
      "expression": "'123'.length() = 3",
      "category": "string",
      "subcategory": "conversion",
      "tags": [
        "r5-xml",
        "string_operations",
        "testLength"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testIif9": {
      "name": "testIif9",
      "expression": "('context').iif(true, select($this), 'false-result')",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testIif",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testLessOrEqual2": {
      "name": "testLessOrEqual2",
      "expression": "1.0 <= 1.2",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessOrEqual"
      ],
      "description": "Test less than or equal operator with decimals where first operand is less than second",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testPrecedence1": {
      "name": "testPrecedence1",
      "expression": "-1.convertsToInteger()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testPrecedence",
        "other_operations"
      ],
      "description": "test unary precedence",
      "expect_error": true,
      "invalid_kind": "execution",
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testIntegerLiteralConvertsToDecimal": {
      "name": "testIntegerLiteralConvertsToDecimal",
      "expression": "1.convertsToDecimal()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "dvRedefiningVariableThrowsError": {
      "name": "dvRedefiningVariableThrowsError",
      "expression": "defineVariable('v1').defineVariable('v1').select(%v1)",
      "category": "analyzer",
      "subcategory": null,
      "tags": [
        "r5-xml",
        "analyzer"
      ],
      "description": "Attempting to redefine an already defined variable",
      "expect_error": true,
      "invalid_kind": "semantic",
      "file_path": "groups/analyzer/analyzer.json",
      "suite_name": "analyzer"
    },
    "testNotEquivalent21": {
      "name": "testNotEquivalent21",
      "expression": "name.take(2).given !~ name.take(2).last().given | name.take(2).first().given",
      "category": "comparison",
      "subcategory": "equivalence",
      "tags": [
        "r5-xml",
        "testNotEquivalent"
      ],
      "description": "Test not equivalent operator with collection and its reordered version",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testHourOfCollectionOfDateTimes": {
      "name": "testHourOfCollectionOfDateTimes",
      "expression": "(@2023-05-15T09:00:00 | @2023-05-15T15:30:00 | @2023-05-15T23:59:59).hourOf()",
      "category": "dates",
      "subcategory": "extraction",
      "tags": [
        "date_time_operations",
        "fhirpath-lab",
        "testHourOf"
      ],
      "description": null,
      "expect_error": true,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "yearOfDateTime": {
      "name": "yearOfDateTime",
      "expression": "@2023-12-25T14:30:00.yearOf()",
      "category": "dates",
      "subcategory": "extraction",
      "tags": [
        "date_time_operations",
        "yearOf"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "LowBoundaryDecimal11": {
      "name": "LowBoundaryDecimal11",
      "expression": "12.500.lowBoundary(4)",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "LowBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testLessThan25": {
      "name": "testLessThan25",
      "expression": "@T10:30 < @T10:30:00",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessThan"
      ],
      "description": "Test less than operator with different precision time values resulting in empty collection",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testWhere1": {
      "name": "testWhere1",
      "expression": "Patient.name.count() = 3",
      "category": "collection",
      "subcategory": "aggregation",
      "tags": [
        "r5-xml",
        "testWhere"
      ],
      "description": "count operation baseline",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testLessOrEqual14": {
      "name": "testLessOrEqual14",
      "expression": "@T12:00:00 <= @T12:00:00",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessOrEqual"
      ],
      "description": "Test less than or equal operator with equal time values",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testMinus2": {
      "name": "testMinus2",
      "expression": "1 - 0 = 1",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testMinus",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testPolymorphismIsA2": {
      "name": "testPolymorphismIsA2",
      "expression": "Observation.value is Quantity",
      "category": "other",
      "subcategory": "navigation",
      "tags": [
        "r5-xml",
        "testObservations",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testResolveBundleFirst": {
      "name": "testResolveBundleFirst",
      "expression": "Bundle.entry.resource.where(resourceType='MedicationRequest').medicationReference.resolve().first()",
      "category": "other",
      "subcategory": "navigation",
      "tags": [
        "resolve"
      ],
      "description": "Resolve() function with bundle resources first item",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testIif4": {
      "name": "testIif4",
      "expression": "iif(false, (1 | 2).toString(), true)",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testIif",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testEndsWith2": {
      "name": "testEndsWith2",
      "expression": "'12345'.endsWith('5') = true",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testEndsWith"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testIndexOf5": {
      "name": "testIndexOf5",
      "expression": "'LogicalModel-Person'.indexOf({}).empty() = true",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testIndexOf"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testNotEquivalent18": {
      "name": "testNotEquivalent18",
      "expression": "@2012-04-15T15:30:31 !~ @2012-04-15T15:30:31.1",
      "category": "comparison",
      "subcategory": "equivalence",
      "tags": [
        "r5-xml",
        "testNotEquivalent"
      ],
      "description": "Test not equivalent operator with datetime values differing by milliseconds",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testFHIRPathIsFunction9": {
      "name": "testFHIRPathIsFunction9",
      "expression": "Observation.extension('http://example.com/fhir/StructureDefinition/patient-age').value is Quantity",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testInheritance",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testEquivalent9": {
      "name": "testEquivalent9",
      "expression": "1.1 ~ 1.2",
      "category": "comparison",
      "subcategory": "equivalence",
      "tags": [
        "r5-xml",
        "testEquivalent"
      ],
      "description": "Test equivalence operator with unequal decimals",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testEquivalent7": {
      "name": "testEquivalent7",
      "expression": "'a' ~ 'b'",
      "category": "comparison",
      "subcategory": "equivalence",
      "tags": [
        "r5-xml",
        "testEquivalent"
      ],
      "description": "Test equivalence operator with unequal strings",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testBooleanLogicOr2": {
      "name": "testBooleanLogicOr2",
      "expression": "(true or false) = true",
      "category": "boolean",
      "subcategory": "logical_or",
      "tags": [
        "r5-xml",
        "testBooleanLogicOr"
      ],
      "description": "Boolean OR with true and false",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/boolean/boolean_operations.json",
      "suite_name": "boolean_operations"
    },
    "testEquivalent10": {
      "name": "testEquivalent10",
      "expression": "1.10 ~ 1.1",
      "category": "comparison",
      "subcategory": "equivalence",
      "tags": [
        "r5-xml",
        "testEquivalent"
      ],
      "description": "Test equivalence operator with equivalent decimals of different precision",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testNEquality11": {
      "name": "testNEquality11",
      "expression": "@2012-04-15 != @2012-04-15",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testNEquality"
      ],
      "description": "Test not equal operator with equal dates",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testNotEquivalent12": {
      "name": "testNotEquivalent12",
      "expression": "0.0 !~ 0",
      "category": "comparison",
      "subcategory": "equivalence",
      "tags": [
        "r5-xml",
        "testNotEquivalent"
      ],
      "description": "Test not equivalent operator with decimal zero and integer zero",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testNotEquivalent22": {
      "name": "testNotEquivalent22",
      "expression": "Observation.value !~ 185 'kg'",
      "category": "comparison",
      "subcategory": "equivalence",
      "tags": [
        "r5-xml",
        "testNotEquivalent"
      ],
      "description": "Test not equivalent operator with quantity values of different units",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "toDateFullDateTimString": {
      "name": "toDateFullDateTimString",
      "expression": "'2182-01-09T07:09:31-05:00'.toDate()",
      "category": "dates",
      "subcategory": "conversion",
      "tags": [
        "date_time_operations",
        "user-feedback",
        "testToDate"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testPlusDate12": {
      "name": "testPlusDate12",
      "expression": "@1973-12-25 + 1 year",
      "category": "dates",
      "subcategory": "periods",
      "tags": [
        "date_time_operations",
        "r5-xml",
        "testPlus"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "LowBoundaryDecimal10": {
      "name": "LowBoundaryDecimal10",
      "expression": "12.587.lowBoundary(2)",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "LowBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testType10": {
      "name": "testType10",
      "expression": "Patient.active.type().name = 'boolean'",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testType",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testIntegerLiteralIsNotString": {
      "name": "testIntegerLiteralIsNotString",
      "expression": "1.is(String).not()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testAllTrue3": {
      "name": "testAllTrue3",
      "expression": "Patient.name.all(given.exists())",
      "category": "collection",
      "subcategory": "aggregation",
      "tags": [
        "r5-xml",
        "testAll"
      ],
      "description": "all function with condition",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testExists4": {
      "name": "testExists4",
      "expression": "Patient.maritalStatus.coding.exists(code = 'P' and system = 'http://terminology.hl7.org/CodeSystem/v3-MaritalStatus')\n\t\t\tor Patient.maritalStatus.coding.exists(code = 'A' and system = 'http://terminology.hl7.org/CodeSystem/v3-MaritalStatus')",
      "category": "collection",
      "subcategory": "aggregation",
      "tags": [
        "r5-xml",
        "testExists"
      ],
      "description": "exists function with complex conditions",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "LowBoundaryNegDecimal3": {
      "name": "LowBoundaryNegDecimal3",
      "expression": "(-1.587).lowBoundary(-1)",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "LowBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testDateNotEqualUTC": {
      "name": "testDateNotEqualUTC",
      "expression": "Patient.birthDate != @1974-12-25T12:34:00Z",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testInEmptyCollection": {
      "name": "testInEmptyCollection",
      "expression": "1 in {}",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testIn",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testHourOfDateTime": {
      "name": "testHourOfDateTime",
      "expression": "@2023-05-15T14:30:00.hourOf()",
      "category": "dates",
      "subcategory": "extraction",
      "tags": [
        "date_time_operations",
        "fhirpath-lab",
        "testHourOf"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testComment5": {
      "name": "testComment5",
      "expression": "/*\nThis is a multi-line comment\nAny text enclosed within is ignored\n*/\n2+2",
      "category": "analyzer",
      "subcategory": "syntax",
      "tags": [
        "r5-xml",
        "comments"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/analyzer/analyzer.json",
      "suite_name": "analyzer"
    },
    "testEquality9": {
      "name": "testEquality9",
      "expression": "'a' = 'a'",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testEquality"
      ],
      "description": "Test equality operator with equal strings",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testWhere2": {
      "name": "testWhere2",
      "expression": "Patient.name.where(given = 'Jim').count() = 1",
      "category": "collection",
      "subcategory": "filtering",
      "tags": [
        "r5-xml",
        "testWhere"
      ],
      "description": "where clause with equality condition",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testBooleanImplies7": {
      "name": "testBooleanImplies7",
      "expression": "({} implies true) = true",
      "category": "boolean",
      "subcategory": "logical_implies",
      "tags": [
        "r5-xml",
        "testBooleanImplies"
      ],
      "description": "Boolean IMPLIES with empty collection and true",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/boolean/boolean_operations.json",
      "suite_name": "boolean_operations"
    },
    "testContainsCollectionEmpty1": {
      "name": "testContainsCollectionEmpty1",
      "expression": "{} contains 1",
      "category": "collection",
      "subcategory": "set_operations",
      "tags": [
        "r5-xml",
        "testContainsCollection"
      ],
      "description": "contains function with empty collection",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testEquality12": {
      "name": "testEquality12",
      "expression": "1.1 = 1.1",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testEquality"
      ],
      "description": "Test equality operator with equal decimals",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testTake6": {
      "name": "testTake6",
      "expression": "Patient.name.take(4).given.count() = 5",
      "category": "collection",
      "subcategory": "filtering",
      "tags": [
        "r5-xml",
        "testTake"
      ],
      "description": "take function with more than available",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testDateIsNotInteger": {
      "name": "testDateIsNotInteger",
      "expression": "@2013-04-05.is(Integer).not()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "LowBoundaryDecimal7": {
      "name": "LowBoundaryDecimal7",
      "expression": "1.toDecimal().lowBoundary()",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "LowBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testSelect2": {
      "name": "testSelect2",
      "expression": "Patient.name.select(given | family).count() = 7",
      "category": "collection",
      "subcategory": "filtering",
      "tags": [
        "r5-xml",
        "testSelect"
      ],
      "description": "select operation with union",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testRepeatAllSingleArgument": {
      "name": "testRepeatAllSingleArgument",
      "expression": "1.repeatAll($this + 1, $this * 2)",
      "category": "collection",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "repeatAll-args"
      ],
      "description": "RepeatAll function with multiple arguments",
      "expect_error": true,
      "invalid_kind": "execution",
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testLessOrEqual21": {
      "name": "testLessOrEqual21",
      "expression": "@T12:00:01 <= @T12:00:00",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessOrEqual"
      ],
      "description": "Test less than or equal operator with time values where first time is later than second",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testLogEmpty3": {
      "name": "testLogEmpty3",
      "expression": "16.log({}).empty()",
      "category": "math",
      "subcategory": "advanced",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "LowBoundaryDecimal12": {
      "name": "LowBoundaryDecimal12",
      "expression": "120.lowBoundary(2)",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "LowBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testIntegerLiteralConvertsToQuantity": {
      "name": "testIntegerLiteralConvertsToQuantity",
      "expression": "1.convertsToQuantity()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testLessThan1": {
      "name": "testLessThan1",
      "expression": "1 < 2",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessThan"
      ],
      "description": "Test less than operator with integers where first operand is less than second",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testBooleanLogicXOr4": {
      "name": "testBooleanLogicXOr4",
      "expression": "(false xor true) = true",
      "category": "boolean",
      "subcategory": "logical_xor",
      "tags": [
        "r5-xml",
        "testBooleanLogicXOr"
      ],
      "description": "Boolean XOR with false and true",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/boolean/boolean_operations.json",
      "suite_name": "boolean_operations"
    },
    "testToDecimal4": {
      "name": "testToDecimal4",
      "expression": "'0.0'.toDecimal() = 0.0",
      "category": "conversion",
      "subcategory": "type_conversion",
      "tags": [
        "r5-xml",
        "testToDecimal"
      ],
      "description": "Convert decimal string to decimal",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/conversion/conversion_operations.json",
      "suite_name": "conversion_operations"
    },
    "testLiteralStringEscapes": {
      "name": "testLiteralStringEscapes",
      "expression": "'\\\\\\/\\f\\r\\n\\t\\\"\\`\\'\\u002a'.convertsToString()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testFHIRPathIsFunction8": {
      "name": "testFHIRPathIsFunction8",
      "expression": "Observation.extension('http://example.com/fhir/StructureDefinition/patient-age').value is Age",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testInheritance",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testIntersect2": {
      "name": "testIntersect2",
      "expression": "(1 | 2).intersect(4).empty()",
      "category": "collection",
      "subcategory": "set_operations",
      "tags": [
        "r5-xml",
        "testIntersect"
      ],
      "description": "intersect function with no common elements",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testContainsString5": {
      "name": "testContainsString5",
      "expression": "'12345'.contains('12345') = true",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testContainsString"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testPolymorphismA": {
      "name": "testPolymorphismA",
      "expression": "Observation.value.unit",
      "category": "other",
      "subcategory": "navigation",
      "tags": [
        "r5-xml",
        "testObservations",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testMinus3": {
      "name": "testMinus3",
      "expression": "1.8 - 1.2 = 0.6",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testMinus",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testGreatorOrEqual16": {
      "name": "testGreatorOrEqual16",
      "expression": "1.1 >= 1.0",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreatorOrEqual"
      ],
      "description": "Test greater than or equal operator with decimals where first operand is greater than second",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testLessOrEqual6": {
      "name": "testLessOrEqual6",
      "expression": "@2014-12-13T12:00:00 <= @2014-12-13T12:00:01",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessOrEqual"
      ],
      "description": "Test less than or equal operator with datetime values where first is earlier than second",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testLiteralIntegerLessThanPolarityFalse": {
      "name": "testLiteralIntegerLessThanPolarityFalse",
      "expression": "-1 < 2",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testMonthOfDateTime": {
      "name": "testMonthOfDateTime",
      "expression": "@2023-06-15T14:30:00.monthOf()",
      "category": "dates",
      "subcategory": "extraction",
      "tags": [
        "date_time_operations",
        "fhirpath-lab",
        "testMonthOf"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testNotEquivalent13": {
      "name": "testNotEquivalent13",
      "expression": "1.2 / 1.8 !~ 0.6",
      "category": "comparison",
      "subcategory": "equivalence",
      "tags": [
        "r5-xml",
        "testNotEquivalent"
      ],
      "description": "Test not equivalent operator with calculation result and non-equivalent value",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testTrace2": {
      "name": "testTrace2",
      "expression": "name.trace('test', given).count() = 3",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testTrace",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testLiteralDateTimeMonth": {
      "name": "testLiteralDateTimeMonth",
      "expression": "@2015-02T.is(DateTime)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testType11": {
      "name": "testType11",
      "expression": "Patient.active.is(boolean)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testType",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testPlusDate20": {
      "name": "testPlusDate20",
      "expression": "@1973-12-25T00:00:00.000+10:00 + 10 'ms'",
      "category": "dates",
      "subcategory": "periods",
      "tags": [
        "date_time_operations",
        "r5-xml",
        "testPlus"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testLiteralDecimalGreaterThanZeroTrue": {
      "name": "testLiteralDecimalGreaterThanZeroTrue",
      "expression": "Observation.value.value > 0.0",
      "category": "other",
      "subcategory": "navigation",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testExclude3": {
      "name": "testExclude3",
      "expression": "(1 | 2).exclude({}) = 1 | 2",
      "category": "collection",
      "subcategory": "set_operations",
      "tags": [
        "r5-xml",
        "testExclude"
      ],
      "description": "exclude function with empty collection",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testTrim2": {
      "name": "testTrim2",
      "expression": "'123 456'.trim().length() = 7",
      "category": "string",
      "subcategory": "manipulation",
      "tags": [
        "r5-xml",
        "string_operations",
        "testTrim"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testMonthOfObservationDate": {
      "name": "testMonthOfObservationDate",
      "expression": "Observation.effectiveDateTime.monthOf()",
      "category": "dates",
      "subcategory": "extraction",
      "tags": [
        "date_time_operations",
        "fhirpath-lab",
        "testMonthOf"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testDecimalLiteralConvertsToDecimal": {
      "name": "testDecimalLiteralConvertsToDecimal",
      "expression": "1.0.convertsToDecimal()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testGreatorOrEqual14": {
      "name": "testGreatorOrEqual14",
      "expression": "@T12:00:00 >= @T12:00:00",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreatorOrEqual"
      ],
      "description": "Test greater than or equal operator with equal time values",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testLessThan19": {
      "name": "testLessThan19",
      "expression": "@2014-12-13 < @2014-12-12",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessThan"
      ],
      "description": "Test less than operator with dates where first date is later than second",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testRepeatNoArguments": {
      "name": "testRepeatNoArguments",
      "expression": "1.repeat()",
      "category": "collection",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "repeat-noargs"
      ],
      "description": "Repeat function with no arguments",
      "expect_error": true,
      "invalid_kind": "execution",
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testGreaterThan27": {
      "name": "testGreaterThan27",
      "expression": "@T10:30:00 > @T10:30:00.0",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreaterThan"
      ],
      "description": "Test greater than operator with equivalent time values with different precision",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testToInteger4": {
      "name": "testToInteger4",
      "expression": "'0.0'.toInteger().empty()",
      "category": "conversion",
      "subcategory": "type_conversion",
      "tags": [
        "r5-xml",
        "testToInteger"
      ],
      "description": "Convert decimal string to integer (empty result)",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/conversion/conversion_operations.json",
      "suite_name": "conversion_operations"
    },
    "testBooleanLogicOr7": {
      "name": "testBooleanLogicOr7",
      "expression": "({} or true) = true",
      "category": "boolean",
      "subcategory": "logical_or",
      "tags": [
        "r5-xml",
        "testBooleanLogicOr"
      ],
      "description": "Boolean OR with empty collection and true",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/boolean/boolean_operations.json",
      "suite_name": "boolean_operations"
    },
    "testStringLiteralIsNotInteger": {
      "name": "testStringLiteralIsNotInteger",
      "expression": "'1'.is(Integer).not()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "LowBoundaryDecimal4": {
      "name": "LowBoundaryDecimal4",
      "expression": "1.587.lowBoundary(0)",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "LowBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testLiteralDateTimeTZEqualTrue": {
      "name": "testLiteralDateTimeTZEqualTrue",
      "expression": "@2017-11-05T01:30:00.0-04:00 = @2017-11-05T00:30:00.0-05:00",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testEquivalent5": {
      "name": "testEquivalent5",
      "expression": "'a' ~ 'a'",
      "category": "comparison",
      "subcategory": "equivalence",
      "tags": [
        "r5-xml",
        "testEquivalent"
      ],
      "description": "Test equivalence operator with equal strings",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testSort7": {
      "name": "testSort7",
      "expression": "('c' | 'b' | 'a').sort($this) = ('a' | 'b' | 'c')",
      "category": "collection",
      "subcategory": "ordering",
      "tags": [
        "r5-xml",
        "testSort"
      ],
      "description": "sort function with unsorted strings",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testStringQuantityWeekConvertsToQuantity": {
      "name": "testStringQuantityWeekConvertsToQuantity",
      "expression": "'1 \\'wk\\''.convertsToQuantity()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testToDecimal1": {
      "name": "testToDecimal1",
      "expression": "'1'.toDecimal() = 1",
      "category": "conversion",
      "subcategory": "type_conversion",
      "tags": [
        "r5-xml",
        "testToDecimal"
      ],
      "description": "Convert string to decimal basic case",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/conversion/conversion_operations.json",
      "suite_name": "conversion_operations"
    },
    "testReplaceMatches1": {
      "name": "testReplaceMatches1",
      "expression": "'123456'.replaceMatches('234', 'X')",
      "category": "string",
      "subcategory": "manipulation",
      "tags": [
        "r5-xml",
        "string_operations",
        "testReplaceMatches"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testPlusDate3": {
      "name": "testPlusDate3",
      "expression": "@1973-12-25T00:00:00.000+10:00 + 7 days",
      "category": "dates",
      "subcategory": "periods",
      "tags": [
        "date_time_operations",
        "r5-xml",
        "testPlus"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testDiv4": {
      "name": "testDiv4",
      "expression": "2.2 div 1.8 = 1",
      "category": "math",
      "subcategory": "arithmetic",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testTrim5": {
      "name": "testTrim5",
      "expression": "{}.trim().empty() = true",
      "category": "string",
      "subcategory": "manipulation",
      "tags": [
        "r5-xml",
        "string_operations",
        "testTrim"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testCase3": {
      "name": "testCase3",
      "expression": "'T'.upper() = 'T'",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testCase",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testIndexer2": {
      "name": "testIndexer2",
      "expression": "Patient.name[1].given = 'Jim'",
      "category": "collection",
      "subcategory": "filtering",
      "tags": [
        "r5-xml",
        "testIndexer"
      ],
      "description": "indexer function with second element",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testSplit4": {
      "name": "testSplit4",
      "expression": "'[stop]ONE[stop][stop]TWO[stop][stop][stop]THREE[stop][stop]'.split('[stop]').join('[stop]')",
      "category": "string",
      "subcategory": "manipulation",
      "tags": [
        "r5-xml",
        "string_operations",
        "testSplit"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testLiteralTimeHour": {
      "name": "testLiteralTimeHour",
      "expression": "@T14.is(Time)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testIntegerLiteralIsInteger": {
      "name": "testIntegerLiteralIsInteger",
      "expression": "1.is(Integer)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testEquivalent6": {
      "name": "testEquivalent6",
      "expression": "'a' ~ 'A'",
      "category": "comparison",
      "subcategory": "equivalence",
      "tags": [
        "r5-xml",
        "testEquivalent"
      ],
      "description": "Test equivalence operator with case-insensitive string comparison",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testLiteralNotOnEmpty": {
      "name": "testLiteralNotOnEmpty",
      "expression": "{}.not().empty()",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testLiteralTrue": {
      "name": "testLiteralTrue",
      "expression": "Patient.name.exists() = true",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testStartsWith5": {
      "name": "testStartsWith5",
      "expression": "'12345'.startsWith('12345') = true",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testStartsWith"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testContainsString6": {
      "name": "testContainsString6",
      "expression": "'12345'.contains('012345') = false",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testContainsString"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testTrim6": {
      "name": "testTrim6",
      "expression": "'      '.trim() = ''",
      "category": "string",
      "subcategory": "manipulation",
      "tags": [
        "r5-xml",
        "string_operations",
        "testTrim"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testLessOrEqual12": {
      "name": "testLessOrEqual12",
      "expression": "@2014-12-12 <= @2014-12-12",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessOrEqual"
      ],
      "description": "Test less than or equal operator with equal dates",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testLessOrEqual10": {
      "name": "testLessOrEqual10",
      "expression": "'a' <= 'a'",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessOrEqual"
      ],
      "description": "Test less than or equal operator with equal strings",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testPlusDate11": {
      "name": "testPlusDate11",
      "expression": "@1973-12-25 + 1 week",
      "category": "dates",
      "subcategory": "periods",
      "tags": [
        "date_time_operations",
        "r5-xml",
        "testPlus"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testEndsWith7": {
      "name": "testEndsWith7",
      "expression": "'12345'.endsWith('') = true",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testEndsWith"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testLessThan14": {
      "name": "testLessThan14",
      "expression": "@T12:00:00 < @T12:00:00",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessThan"
      ],
      "description": "Test less than operator with equal time values",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testTypeA4": {
      "name": "testTypeA4",
      "expression": "Parameters.parameter[2].value.is(FHIR.uri)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testType",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testLessOrEqual25": {
      "name": "testLessOrEqual25",
      "expression": "@T10:30 <= @T10:30:00",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessOrEqual"
      ],
      "description": "Test less than or equal operator with different precision time values resulting in empty collection",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testQuantity6": {
      "name": "testQuantity6",
      "expression": "7 days = 1 'wk'",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testQuantity",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testGreatorOrEqual2": {
      "name": "testGreatorOrEqual2",
      "expression": "1.0 >= 1.2",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreatorOrEqual"
      ],
      "description": "Test greater than or equal operator with decimals where first operand is less than second",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testEquality17": {
      "name": "testEquality17",
      "expression": "@2012-04-15 = @2012-04-15",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testEquality"
      ],
      "description": "Test equality operator with equal dates",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testDivide6": {
      "name": "testDivide6",
      "expression": "1 / 0",
      "category": "math",
      "subcategory": "arithmetic",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testIntegerLiteralConvertsToBoolean": {
      "name": "testIntegerLiteralConvertsToBoolean",
      "expression": "1.convertsToBoolean()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testStartsWith3": {
      "name": "testStartsWith3",
      "expression": "'12345'.startsWith('12') = true",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testStartsWith"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testStringFalseToBoolean": {
      "name": "testStringFalseToBoolean",
      "expression": "'false'.toBoolean()",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testGreaterThan14": {
      "name": "testGreaterThan14",
      "expression": "@T12:00:00 > @T12:00:00",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreaterThan"
      ],
      "description": "Test greater than operator with equal time values",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testFHIRPathAsFunction20": {
      "name": "testFHIRPathAsFunction20",
      "expression": "ValueSet.version.ofType(code)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testInheritance",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testUnion6": {
      "name": "testUnion6",
      "expression": "(1 | 2).combine(2).count() = 3",
      "category": "collection",
      "subcategory": "set_operations",
      "tags": [
        "r5-xml",
        "testUnion"
      ],
      "description": "combine function vs union",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testStartsWith6": {
      "name": "testStartsWith6",
      "expression": "'12345'.startsWith('123456') = false",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testStartsWith"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testContainsCollection4": {
      "name": "testContainsCollection4",
      "expression": "('a' | 'c' | 'd') contains 'b'",
      "category": "collection",
      "subcategory": "set_operations",
      "tags": [
        "r5-xml",
        "testContainsCollection"
      ],
      "description": "contains function with non-matching string",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testExpressionsEqual": {
      "name": "testExpressionsEqual",
      "expression": "Patient.name.given.count() = 1 + 4",
      "category": "other",
      "subcategory": "navigation",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testFHIRPathAsFunction19": {
      "name": "testFHIRPathAsFunction19",
      "expression": "ValueSet.version.ofType(string)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testInheritance",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testFloor2": {
      "name": "testFloor2",
      "expression": "2.1.floor() = 2",
      "category": "math",
      "subcategory": "rounding",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testIntegerLiteralToDecimal": {
      "name": "testIntegerLiteralToDecimal",
      "expression": "1.toDecimal() = 1.0",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testGreatorOrEqual27": {
      "name": "testGreatorOrEqual27",
      "expression": "@T10:30:00 >= @T10:30:00.0",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreatorOrEqual"
      ],
      "description": "Test greater than or equal operator with equivalent time values with different precision",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "from-zulip-1": {
      "name": "from-zulip-1",
      "expression": "(true and 'foo').empty()",
      "category": "boolean",
      "subcategory": "logical_and",
      "tags": [
        "r5-xml",
        "from-Zulip"
      ],
      "description": "boolean and with string operand",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/boolean/boolean_operations.json",
      "suite_name": "boolean_operations"
    },
    "testLessThan15": {
      "name": "testLessThan15",
      "expression": "2 < 1",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessThan"
      ],
      "description": "Test less than operator with integers where first operand is greater than second",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testEncodeHex": {
      "name": "testEncodeHex",
      "expression": "'test'.encode('hex')",
      "category": "conversion",
      "subcategory": "encoding",
      "tags": [
        "r5-xml",
        "testEncodeDecode"
      ],
      "description": "Encode string to hexadecimal",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/conversion/conversion_operations.json",
      "suite_name": "conversion_operations"
    },
    "testDayOfPatientBirthDate": {
      "name": "testDayOfPatientBirthDate",
      "expression": "Patient.birthDate.dayOf()",
      "category": "dates",
      "subcategory": "extraction",
      "tags": [
        "date_time_operations",
        "fhirpath-lab",
        "testDayOf"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testTruncate3": {
      "name": "testTruncate3",
      "expression": "(-1.56).truncate() = -1",
      "category": "math",
      "subcategory": "rounding",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testGreatorOrEqualEmpty2": {
      "name": "testGreatorOrEqualEmpty2",
      "expression": "{} >= 1",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreatorOrEqual"
      ],
      "description": "Test greater than or equal operator with empty collection compared to value",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testAllTrue1": {
      "name": "testAllTrue1",
      "expression": "Patient.name.select(given.exists()).allTrue()",
      "category": "collection",
      "subcategory": "aggregation",
      "tags": [
        "r5-xml",
        "testAll"
      ],
      "description": "allTrue function with select operation",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testSkip2": {
      "name": "testSkip2",
      "expression": "(0 | 1 | 2).skip(2) = 2",
      "category": "collection",
      "subcategory": "filtering",
      "tags": [
        "r5-xml",
        "testSkip"
      ],
      "description": "skip function with multiple elements",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testAggregate1": {
      "name": "testAggregate1",
      "expression": "(1|2|3|4|5|6|7|8|9).aggregate($this+$total, 0) = 45",
      "category": "collection",
      "subcategory": "aggregation",
      "tags": [
        "r5-xml",
        "testAggregate"
      ],
      "description": "aggregate function for sum",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testLessThanEmpty2": {
      "name": "testLessThanEmpty2",
      "expression": "{} < 1",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessThan"
      ],
      "description": "Test less than operator with empty collection compared to value",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testPolymorphismAsA": {
      "name": "testPolymorphismAsA",
      "expression": "Observation.value.as(Quantity).unit",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testObservations",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testDecodeHex": {
      "name": "testDecodeHex",
      "expression": "'74657374'.decode('hex')",
      "category": "conversion",
      "subcategory": "encoding",
      "tags": [
        "r5-xml",
        "testEncodeDecode"
      ],
      "description": "Decode hexadecimal to string",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/conversion/conversion_operations.json",
      "suite_name": "conversion_operations"
    },
    "testEscapeJson": {
      "name": "testEscapeJson",
      "expression": "'\"1&lt;2\"'.escape('json')",
      "category": "conversion",
      "subcategory": "escaping",
      "tags": [
        "r5-xml",
        "testEscapeUnescape"
      ],
      "description": "Escape JSON entities",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/conversion/conversion_operations.json",
      "suite_name": "conversion_operations"
    },
    "testMultiply2": {
      "name": "testMultiply2",
      "expression": "1 * 0 = 0",
      "category": "math",
      "subcategory": "arithmetic",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testIntegerLiteralToQuantity": {
      "name": "testIntegerLiteralToQuantity",
      "expression": "1.toQuantity() = 1 '1'",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testModEmpty3": {
      "name": "testModEmpty3",
      "expression": "{} mod {}",
      "category": "math",
      "subcategory": "arithmetic",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testIntegerLiteralConvertsToBooleanFalse": {
      "name": "testIntegerLiteralConvertsToBooleanFalse",
      "expression": "2.convertsToBoolean()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testBooleanLiteralConvertsToString": {
      "name": "testBooleanLiteralConvertsToString",
      "expression": "true.convertsToString()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testLessOrEqual27": {
      "name": "testLessOrEqual27",
      "expression": "@T10:30:00 <= @T10:30:00.0",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessOrEqual"
      ],
      "description": "Test less than or equal operator with equivalent time values with different precision",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testPlusTime3": {
      "name": "testPlusTime3",
      "expression": "@T23:00:00 + 50 hours",
      "category": "dates",
      "subcategory": "periods",
      "tags": [
        "date_time_operations",
        "r5-xml",
        "testPlus"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testLog2": {
      "name": "testLog2",
      "expression": "100.0.log(10.0) = 2.0",
      "category": "math",
      "subcategory": "advanced",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testEquivalent4": {
      "name": "testEquivalent4",
      "expression": "1 ~ 2",
      "category": "comparison",
      "subcategory": "equivalence",
      "tags": [
        "r5-xml",
        "testEquivalent"
      ],
      "description": "Test equivalence operator with unequal integers",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testSimpleBackTick1": {
      "name": "testSimpleBackTick1",
      "expression": "`Patient`.name.`given`",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testBasics",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testSimpleNone": {
      "name": "testSimpleNone",
      "expression": "name.suffix",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testBasics",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testNEquality18": {
      "name": "testNEquality18",
      "expression": "@2012-04-15T15:00:00+02:00 != @2012-04-15T16:00:00+03:00",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testNEquality"
      ],
      "description": "Test not equal operator with timezone-equivalent datetime values",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testContainsString4": {
      "name": "testContainsString4",
      "expression": "'12345'.contains('35') = false",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testContainsString"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testDayOfDateEndOfMonth": {
      "name": "testDayOfDateEndOfMonth",
      "expression": "@2023-05-31.dayOf()",
      "category": "dates",
      "subcategory": "extraction",
      "tags": [
        "date_time_operations",
        "fhirpath-lab",
        "testDayOf"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testWhere4": {
      "name": "testWhere4",
      "expression": "Patient.name.where($this.given = 'Jim').count() = 1",
      "category": "collection",
      "subcategory": "filtering",
      "tags": [
        "r5-xml",
        "testWhere"
      ],
      "description": "where clause with $this context",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testSingle2": {
      "name": "testSingle2",
      "expression": "Patient.name.single().exists()",
      "category": "collection",
      "subcategory": "filtering",
      "tags": [
        "r5-xml",
        "testSingle"
      ],
      "description": "single function with multiple elements (error)",
      "expect_error": true,
      "invalid_kind": "execution",
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testGreatorOrEqual13": {
      "name": "testGreatorOrEqual13",
      "expression": "@2014-12-13T12:00:00 >= @2014-12-13T12:00:00",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreatorOrEqual"
      ],
      "description": "Test greater than or equal operator with equal datetime values",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "defineVariable2": {
      "name": "defineVariable2",
      "expression": "defineVariable('n1', name.first()).select(%n1.given)",
      "category": "other",
      "subcategory": "variables",
      "tags": [
        "r5-xml",
        "defineVariable"
      ],
      "description": "simple use of a variable",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testBooleanLiteralIsNotDecimal": {
      "name": "testBooleanLiteralIsNotDecimal",
      "expression": "true.is(Decimal).not()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testLiteralIntegerNotEqual": {
      "name": "testLiteralIntegerNotEqual",
      "expression": "-3 != 3",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testRound2": {
      "name": "testRound2",
      "expression": "3.14159.round(3) = 3.142",
      "category": "math",
      "subcategory": "rounding",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testFHIRPathAsFunction18": {
      "name": "testFHIRPathAsFunction18",
      "expression": "Patient.gender.ofType(id)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testInheritance",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testSubstring8": {
      "name": "testSubstring8",
      "expression": "'LogicalModel-Person'.substring(0, 'LogicalModel-Person'.indexOf('-'))",
      "category": "string",
      "subcategory": "manipulation",
      "tags": [
        "r5-xml",
        "string_operations",
        "testSubstring"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testSort8": {
      "name": "testSort8",
      "expression": "('a' | 'b' | 'c').sort(-$this) = ('c' | 'b' | 'a')",
      "category": "collection",
      "subcategory": "ordering",
      "tags": [
        "r5-xml",
        "testSort"
      ],
      "description": "sort function with strings descending",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testBooleanLogicXOr5": {
      "name": "testBooleanLogicXOr5",
      "expression": "(false xor false) = false",
      "category": "boolean",
      "subcategory": "logical_xor",
      "tags": [
        "r5-xml",
        "testBooleanLogicXOr"
      ],
      "description": "Boolean XOR with both false",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/boolean/boolean_operations.json",
      "suite_name": "boolean_operations"
    },
    "testStringMinuteConvertsToDateTime": {
      "name": "testStringMinuteConvertsToDateTime",
      "expression": "'2015-02-04T14:34'.convertsToDateTime()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testLiteralDecimalNegative01Invalid": {
      "name": "testLiteralDecimalNegative01Invalid",
      "expression": "-0.1.convertsToDecimal()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": true,
      "invalid_kind": "execution",
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testBooleanLogicOr4": {
      "name": "testBooleanLogicOr4",
      "expression": "(false or true) = true",
      "category": "boolean",
      "subcategory": "logical_or",
      "tags": [
        "r5-xml",
        "testBooleanLogicOr"
      ],
      "description": "Boolean OR with false and true",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/boolean/boolean_operations.json",
      "suite_name": "boolean_operations"
    },
    "testToDateInvalid": {
      "name": "testToDateInvalid",
      "expression": "'invalid-date'.toDate()",
      "category": "dates",
      "subcategory": "conversion",
      "tags": [
        "date_time_operations",
        "testToDate"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testEscapedIdentifier": {
      "name": "testEscapedIdentifier",
      "expression": "name.`given`",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testBasics",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testNEquality15": {
      "name": "testNEquality15",
      "expression": "@2012-04-15T15:30:31 != @2012-04-15T15:30:31.0",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testNEquality"
      ],
      "description": "Test not equal operator with equivalent datetime values of different precision",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testLessThan18": {
      "name": "testLessThan18",
      "expression": "'B' < 'A'",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessThan"
      ],
      "description": "Test less than operator with uppercase strings where first is greater than second",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testUnion2": {
      "name": "testUnion2",
      "expression": "(1 | 2 | 2).count() = 2",
      "category": "collection",
      "subcategory": "set_operations",
      "tags": [
        "r5-xml",
        "testUnion"
      ],
      "description": "union operator with duplicate values",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testNEquality22": {
      "name": "testNEquality22",
      "expression": "(1.2 / 1.8).round(2) != 0.6666667",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testNEquality"
      ],
      "description": "Test not equal operator with rounded calculation result and unequal value",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testEncodeBase64A": {
      "name": "testEncodeBase64A",
      "expression": "'test'.encode('base64')",
      "category": "conversion",
      "subcategory": "encoding",
      "tags": [
        "r5-xml",
        "testEncodeDecode"
      ],
      "description": "Encode string to base64",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/conversion/conversion_operations.json",
      "suite_name": "conversion_operations"
    },
    "testMonthOfCollectionOfDates": {
      "name": "testMonthOfCollectionOfDates",
      "expression": "(@2023-01-01 | @2023-06-15 | @2023-12-31).monthOf()",
      "category": "dates",
      "subcategory": "extraction",
      "tags": [
        "date_time_operations",
        "fhirpath-lab",
        "testMonthOf"
      ],
      "description": null,
      "expect_error": true,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testPlusDate2": {
      "name": "testPlusDate2",
      "expression": "@1973-12-25 + 7.7 days",
      "category": "dates",
      "subcategory": "periods",
      "tags": [
        "date_time_operations",
        "r5-xml",
        "testPlus"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testPlusEmpty2": {
      "name": "testPlusEmpty2",
      "expression": "{} + 1",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testPlus",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testInEmptyBoth": {
      "name": "testInEmptyBoth",
      "expression": "{} in {}",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testIn",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testBooleanLogicAnd2": {
      "name": "testBooleanLogicAnd2",
      "expression": "(true and false) = false",
      "category": "boolean",
      "subcategory": "logical_and",
      "tags": [
        "r5-xml",
        "testBooleanLogicAnd"
      ],
      "description": "Boolean AND with true and false",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/boolean/boolean_operations.json",
      "suite_name": "boolean_operations"
    },
    "testLiteralBooleanFalse": {
      "name": "testLiteralBooleanFalse",
      "expression": "false.convertsToBoolean()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "HighBoundaryDecimal15": {
      "name": "HighBoundaryDecimal15",
      "expression": "0.0034.highBoundary(1)",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "HighBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testPatientHasBirthDate": {
      "name": "testPatientHasBirthDate",
      "expression": "birthDate",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testMiscellaneousAccessorTests",
        "other_operations"
      ],
      "description": "patient has a birthDate",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testEquality3": {
      "name": "testEquality3",
      "expression": "true = {}",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testEquality"
      ],
      "description": "Test equality operator with boolean compared to empty collection",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testBooleanLogicXOr2": {
      "name": "testBooleanLogicXOr2",
      "expression": "(true xor false) = true",
      "category": "boolean",
      "subcategory": "logical_xor",
      "tags": [
        "r5-xml",
        "testBooleanLogicXOr"
      ],
      "description": "Boolean XOR with true and false",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/boolean/boolean_operations.json",
      "suite_name": "boolean_operations"
    },
    "testIntegerLiteralConvertsToInteger": {
      "name": "testIntegerLiteralConvertsToInteger",
      "expression": "1.convertsToInteger()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testToString5": {
      "name": "testToString5",
      "expression": "@2014-12-14.toString() = '2014-12-14'",
      "category": "conversion",
      "subcategory": "type_conversion",
      "tags": [
        "r5-xml",
        "testToString"
      ],
      "description": "Convert date to string",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/conversion/conversion_operations.json",
      "suite_name": "conversion_operations"
    },
    "testLiteralDateTimeTZGreater": {
      "name": "testLiteralDateTimeTZGreater",
      "expression": "@2017-11-05T01:30:00.0-04:00 > @2017-11-05T01:15:00.0-05:00",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testModEmpty2": {
      "name": "testModEmpty2",
      "expression": "{} mod 1",
      "category": "math",
      "subcategory": "arithmetic",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testRepeat5": {
      "name": "testRepeat5",
      "expression": "Patient.name.repeat('test')",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testRepeat",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testSort9": {
      "name": "testSort9",
      "expression": "Patient.name[0].given.sort() = ('James' | 'Peter')",
      "category": "collection",
      "subcategory": "ordering",
      "tags": [
        "r5-xml",
        "testSort"
      ],
      "description": "sort function with real data",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testPlusDate7": {
      "name": "testPlusDate7",
      "expression": "@1973-12-25T00:00:00.000+10:00 + 1 minute",
      "category": "dates",
      "subcategory": "periods",
      "tags": [
        "date_time_operations",
        "r5-xml",
        "testPlus"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testNow1": {
      "name": "testNow1",
      "expression": "Patient.birthDate < now()",
      "category": "dates",
      "subcategory": "conversion",
      "tags": [
        "date_time_operations",
        "r5-xml",
        "testNow"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testPrecedence4": {
      "name": "testPrecedence4",
      "expression": "1 | 1 is Integer",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testPrecedence",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testRepeat1": {
      "name": "testRepeat1",
      "expression": "ValueSet.expansion.repeat(contains).count() = 10",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testRepeat",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testContainsString9": {
      "name": "testContainsString9",
      "expression": "{}.contains('').empty() = true",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testContainsString"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testNotEquivalent17": {
      "name": "testNotEquivalent17",
      "expression": "@2012-04-15T15:30:31 !~ @2012-04-15T15:30:31.0",
      "category": "comparison",
      "subcategory": "equivalence",
      "tags": [
        "r5-xml",
        "testNotEquivalent"
      ],
      "description": "Test not equivalent operator with equivalent datetime values of different precision",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testToString3": {
      "name": "testToString3",
      "expression": "0.toString() = '0'",
      "category": "conversion",
      "subcategory": "type_conversion",
      "tags": [
        "r5-xml",
        "testToString"
      ],
      "description": "Convert zero to string",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/conversion/conversion_operations.json",
      "suite_name": "conversion_operations"
    },
    "testLiteralQuantityInteger": {
      "name": "testLiteralQuantityInteger",
      "expression": "10 'mg'.convertsToQuantity()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testLength5": {
      "name": "testLength5",
      "expression": "''.length() = 0",
      "category": "string",
      "subcategory": "conversion",
      "tags": [
        "r5-xml",
        "string_operations",
        "testLength"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testToDateFromDate": {
      "name": "testToDateFromDate",
      "expression": "Patient.birthDate.toDate()",
      "category": "dates",
      "subcategory": "conversion",
      "tags": [
        "date_time_operations",
        "testToDate"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testGreaterThan17": {
      "name": "testGreaterThan17",
      "expression": "'b' > 'a'",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreaterThan"
      ],
      "description": "Test greater than operator with strings where first operand is greater than second alphabetically",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testBooleanLogicAnd5": {
      "name": "testBooleanLogicAnd5",
      "expression": "(false and false) = false",
      "category": "boolean",
      "subcategory": "logical_and",
      "tags": [
        "r5-xml",
        "testBooleanLogicAnd"
      ],
      "description": "Boolean AND with both false",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/boolean/boolean_operations.json",
      "suite_name": "boolean_operations"
    },
    "testCount2": {
      "name": "testCount2",
      "expression": "Patient.name.count() = 3",
      "category": "collection",
      "subcategory": "aggregation",
      "tags": [
        "r5-xml",
        "testCount"
      ],
      "description": "count function with equality check",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testTimezoneOffsetOfDateTimePositiveMinutes": {
      "name": "testTimezoneOffsetOfDateTimePositiveMinutes",
      "expression": "@2023-05-15T14:30:00+05:30.timezoneOffsetOf()",
      "category": "dates",
      "subcategory": "extraction",
      "tags": [
        "date_time_operations",
        "fhirpath-lab",
        "testTimezoneOffsetOf"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testBooleanLogicXOr9": {
      "name": "testBooleanLogicXOr9",
      "expression": "({} xor {}).empty()",
      "category": "boolean",
      "subcategory": "logical_xor",
      "tags": [
        "r5-xml",
        "testBooleanLogicXOr"
      ],
      "description": "Boolean XOR with both empty collections",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/boolean/boolean_operations.json",
      "suite_name": "boolean_operations"
    },
    "testLn1": {
      "name": "testLn1",
      "expression": "1.ln() = 0.0",
      "category": "math",
      "subcategory": "advanced",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testStringQuantityLiteralToQuantity": {
      "name": "testStringQuantityLiteralToQuantity",
      "expression": "'1 day'.toQuantity() = 1 day",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testSplit2": {
      "name": "testSplit2",
      "expression": "'A,,C'.split(',').join(',') = 'A,,C'",
      "category": "string",
      "subcategory": "manipulation",
      "tags": [
        "r5-xml",
        "string_operations",
        "testSplit"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testEquality18": {
      "name": "testEquality18",
      "expression": "@2012-04-15 = @2012-04-16",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testEquality"
      ],
      "description": "Test equality operator with unequal dates",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testDecimalLiteralConvertsToString": {
      "name": "testDecimalLiteralConvertsToString",
      "expression": "1.0.convertsToString()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testGreaterThan2": {
      "name": "testGreaterThan2",
      "expression": "1.0 > 1.2",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreaterThan"
      ],
      "description": "Test greater than operator with decimals where first operand is less than second",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testExclude4": {
      "name": "testExclude4",
      "expression": "1.combine(1).exclude(2).count() = 2",
      "category": "collection",
      "subcategory": "set_operations",
      "tags": [
        "r5-xml",
        "testExclude"
      ],
      "description": "exclude with combine operation",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testEquivalent3": {
      "name": "testEquivalent3",
      "expression": "1 ~ {}",
      "category": "comparison",
      "subcategory": "equivalence",
      "tags": [
        "r5-xml",
        "testEquivalent"
      ],
      "description": "Test equivalence operator with value compared to empty collection",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testEquivalent22": {
      "name": "testEquivalent22",
      "expression": "Observation.value ~ 185 '[lb_av]'",
      "category": "comparison",
      "subcategory": "equivalence",
      "tags": [
        "r5-xml",
        "testEquivalent"
      ],
      "description": "Test equivalence operator with quantity values",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testResolveBundle": {
      "name": "testResolveBundle",
      "expression": "Bundle.entry.resource.where(resourceType='MedicationRequest').medicationReference.resolve().count()",
      "category": "other",
      "subcategory": "navigation",
      "tags": [
        "resolve"
      ],
      "description": "Resolve() function with bundle resources count",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testEquality25": {
      "name": "testEquality25",
      "expression": "name = name",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testEquality"
      ],
      "description": "Test equality operator with identical path expressions",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testExp1": {
      "name": "testExp1",
      "expression": "0.exp() = 1",
      "category": "math",
      "subcategory": "advanced",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testMonthOfDateTimeWithTimezone": {
      "name": "testMonthOfDateTimeWithTimezone",
      "expression": "@2023-03-01T00:00:00-05:00.monthOf()",
      "category": "dates",
      "subcategory": "extraction",
      "tags": [
        "date_time_operations",
        "fhirpath-lab",
        "testMonthOf"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testLessOrEqualEmpty1": {
      "name": "testLessOrEqualEmpty1",
      "expression": "1 <= {}",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessOrEqual"
      ],
      "description": "Test less than or equal operator with value compared to empty collection",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testLessOrEqual16": {
      "name": "testLessOrEqual16",
      "expression": "1.1 <= 1.0",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessOrEqual"
      ],
      "description": "Test less than or equal operator with decimals where first operand is greater than second",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testEquivalent24": {
      "name": "testEquivalent24",
      "expression": "(1 | 2 | 3) ~ (3 | 2 | 1)",
      "category": "comparison",
      "subcategory": "equivalence",
      "tags": [
        "r5-xml",
        "testEquivalent"
      ],
      "description": "Test equivalence operator with reordered collections",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testType20": {
      "name": "testType20",
      "expression": "Patient.ofType(Patient).type().name",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testType",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testSubSetOf3": {
      "name": "testSubSetOf3",
      "expression": "supportingInfo.where(category.coding.code = 'additionalbodysite').sequence.subsetOf($this.item.informationSequence)",
      "category": "collection",
      "subcategory": "set_operations",
      "tags": [
        "r5-xml",
        "testSubSetOf"
      ],
      "description": "subsetOf function with complex path",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testDateNotEqualTimezoneOffsetBefore": {
      "name": "testDateNotEqualTimezoneOffsetBefore",
      "expression": "Patient.birthDate != @1974-12-25T12:34:00-10:00",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testEquivalent14": {
      "name": "testEquivalent14",
      "expression": "@2012-04-15 ~ @2012-04-15",
      "category": "comparison",
      "subcategory": "equivalence",
      "tags": [
        "r5-xml",
        "testEquivalent"
      ],
      "description": "Test equivalence operator with equal dates",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "Comparable1": {
      "name": "Comparable1",
      "expression": "1 'cm'.comparable(1 '[in_i]')",
      "category": "math",
      "subcategory": "quantities",
      "tags": [
        "r5-xml",
        "Comparable"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testMinus6": {
      "name": "testMinus6",
      "expression": "@1974-12-25 - 1 'cm'",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testMinus",
        "other_operations"
      ],
      "description": null,
      "expect_error": true,
      "invalid_kind": "execution",
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testStartsWith10": {
      "name": "testStartsWith10",
      "expression": "''.startsWith('') = true",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testStartsWith"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testGreatorOrEqual18": {
      "name": "testGreatorOrEqual18",
      "expression": "'B' >= 'A'",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreatorOrEqual"
      ],
      "description": "Test greater than or equal operator with uppercase strings where first is greater than second",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testBooleanImplies8": {
      "name": "testBooleanImplies8",
      "expression": "({} implies false).empty()",
      "category": "boolean",
      "subcategory": "logical_implies",
      "tags": [
        "r5-xml",
        "testBooleanImplies"
      ],
      "description": "Boolean IMPLIES with empty collection and false",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/boolean/boolean_operations.json",
      "suite_name": "boolean_operations"
    },
    "testStartsWith9": {
      "name": "testStartsWith9",
      "expression": "{}.startsWith('').empty() = true",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testStartsWith"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testGreatorOrEqual22": {
      "name": "testGreatorOrEqual22",
      "expression": "Observation.value >= 100 '[lb_av]'",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreatorOrEqual"
      ],
      "description": "Test greater than or equal operator with quantity values",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testMatchesFullWithinUrl2": {
      "name": "testMatchesFullWithinUrl2",
      "expression": "'http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1'.matchesFull('Measure')",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testMatches"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testStringLiteralConvertsToInteger": {
      "name": "testStringLiteralConvertsToInteger",
      "expression": "'1'.convertsToInteger()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testTake4": {
      "name": "testTake4",
      "expression": "Patient.name.take(2).given = 'Peter' | 'James' | 'Jim'",
      "category": "collection",
      "subcategory": "filtering",
      "tags": [
        "r5-xml",
        "testTake"
      ],
      "description": "take function with two elements",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testToChars1": {
      "name": "testToChars1",
      "expression": "'t2'.toChars() = 't' | '2'",
      "category": "string",
      "subcategory": "conversion",
      "tags": [
        "r5-xml",
        "string_operations",
        "testToChars"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testIntegerLiteralIsNotQuantity": {
      "name": "testIntegerLiteralIsNotQuantity",
      "expression": "1.is(Quantity).not()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testIntegerLiteralToDeciamlEquivalent": {
      "name": "testIntegerLiteralToDeciamlEquivalent",
      "expression": "1.toDecimal() ~ 1.0",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testStringYearConvertsToDate": {
      "name": "testStringYearConvertsToDate",
      "expression": "'2015'.convertsToDate()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testLogEmpty2": {
      "name": "testLogEmpty2",
      "expression": "{}.log({}).empty()",
      "category": "math",
      "subcategory": "advanced",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testPower3": {
      "name": "testPower3",
      "expression": "(-1).power(0.5)",
      "category": "math",
      "subcategory": "advanced",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testLessOrEqual8": {
      "name": "testLessOrEqual8",
      "expression": "1 <= 1",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessOrEqual"
      ],
      "description": "Test less than or equal operator with equal integers",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testBooleanLogicOr1": {
      "name": "testBooleanLogicOr1",
      "expression": "(true or true) = true",
      "category": "boolean",
      "subcategory": "logical_or",
      "tags": [
        "r5-xml",
        "testBooleanLogicOr"
      ],
      "description": "Boolean OR with both true",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/boolean/boolean_operations.json",
      "suite_name": "boolean_operations"
    },
    "testDiv1": {
      "name": "testDiv1",
      "expression": "1 div 1 = 1",
      "category": "math",
      "subcategory": "arithmetic",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testLiteralQuantityDay": {
      "name": "testLiteralQuantityDay",
      "expression": "4 days.convertsToQuantity()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testLiteralDecimalMax": {
      "name": "testLiteralDecimalMax",
      "expression": "1234567890987654321.0.convertsToDecimal()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testDayOfDateTime": {
      "name": "testDayOfDateTime",
      "expression": "@2023-12-25T14:30:00.dayOf()",
      "category": "dates",
      "subcategory": "extraction",
      "tags": [
        "date_time_operations",
        "fhirpath-lab",
        "testDayOf"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testLength2": {
      "name": "testLength2",
      "expression": "'12345'.length() = 5",
      "category": "string",
      "subcategory": "conversion",
      "tags": [
        "r5-xml",
        "string_operations",
        "testLength"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testDecimalLiteralConvertsToBoolean": {
      "name": "testDecimalLiteralConvertsToBoolean",
      "expression": "1.0.convertsToBoolean()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testPolymorphismAsBFunction": {
      "name": "testPolymorphismAsBFunction",
      "expression": "Observation.value.as(Period).start",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testObservations",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testBooleanImplies4": {
      "name": "testBooleanImplies4",
      "expression": "(false implies true) = true",
      "category": "boolean",
      "subcategory": "logical_implies",
      "tags": [
        "r5-xml",
        "testBooleanImplies"
      ],
      "description": "Boolean IMPLIES with false and true",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/boolean/boolean_operations.json",
      "suite_name": "boolean_operations"
    },
    "testRepeatAllIncompatibleArithmetic": {
      "name": "testRepeatAllIncompatibleArithmetic",
      "expression": "'test'.repeatAll($this * 2)",
      "category": "collection",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "repeatAll-safety"
      ],
      "description": "RepeatAll function with incompatible arithmetic",
      "expect_error": true,
      "invalid_kind": "execution",
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testPlusDate15": {
      "name": "testPlusDate15",
      "expression": "@1973-12-25 + 1 'wk'",
      "category": "dates",
      "subcategory": "periods",
      "tags": [
        "date_time_operations",
        "r5-xml",
        "testPlus"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testLessThan5": {
      "name": "testLessThan5",
      "expression": "@2014-12-12 < @2014-12-13",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessThan"
      ],
      "description": "Test less than operator with dates where first date is earlier than second",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testDivide1": {
      "name": "testDivide1",
      "expression": "1 / 1 = 1",
      "category": "math",
      "subcategory": "arithmetic",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "defineVariable5": {
      "name": "defineVariable5",
      "expression": "defineVariable('n1', name.first()).where(active.not()) | defineVariable('n1', name.skip(1).first()).select(%n1.given)",
      "category": "other",
      "subcategory": "variables",
      "tags": [
        "r5-xml",
        "defineVariable"
      ],
      "description": "use of a variable in separate contexts defined in 2 but used in 1",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testEquivalent20": {
      "name": "testEquivalent20",
      "expression": "name.take(2).given ~ name.take(2).first().given | name.take(2).last().given",
      "category": "comparison",
      "subcategory": "equivalence",
      "tags": [
        "r5-xml",
        "testEquivalent"
      ],
      "description": "Test equivalence operator with collection and its reconstructed equivalent",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testGreaterThan1": {
      "name": "testGreaterThan1",
      "expression": "1 > 2",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreaterThan"
      ],
      "description": "Test greater than operator with integers where first operand is less than second",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testNegativeIntegerLiteralConvertsToString": {
      "name": "testNegativeIntegerLiteralConvertsToString",
      "expression": "(-1).convertsToString()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testMatchesWithinUrl1": {
      "name": "testMatchesWithinUrl1",
      "expression": "'http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1'.matches('library')",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testMatches"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testRepeatAllFiniteSequence": {
      "name": "testRepeatAllFiniteSequence",
      "expression": "10.repeatAll(iif($this > 1, $this - 2, {})).count() = 6",
      "category": "collection",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "repeatAll-finite"
      ],
      "description": "RepeatAll function with finite sequence",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testGreatorOrEqual6": {
      "name": "testGreatorOrEqual6",
      "expression": "@2014-12-13T12:00:00 >= @2014-12-13T12:00:01",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreatorOrEqual"
      ],
      "description": "Test greater than or equal operator with datetime values where first is earlier than second",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testDecimalLiteralToDecimal": {
      "name": "testDecimalLiteralToDecimal",
      "expression": "1.0.toDecimal() = 1.0",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testEquality7": {
      "name": "testEquality7",
      "expression": "(1 | 1) = (1 | 2 | {})",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testEquality"
      ],
      "description": "Test equality operator with different collections including empty element",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testNotEquivalent5": {
      "name": "testNotEquivalent5",
      "expression": "'a' !~ 'a'",
      "category": "comparison",
      "subcategory": "equivalence",
      "tags": [
        "r5-xml",
        "testNotEquivalent"
      ],
      "description": "Test not equivalent operator with equal strings",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testCeiling3": {
      "name": "testCeiling3",
      "expression": "1.1.ceiling() = 2",
      "category": "math",
      "subcategory": "rounding",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testNEquality19": {
      "name": "testNEquality19",
      "expression": "name != name",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testNEquality"
      ],
      "description": "Test not equal operator with identical path expressions",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testLessOrEqualEmpty2": {
      "name": "testLessOrEqualEmpty2",
      "expression": "{} <= 1",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessOrEqual"
      ],
      "description": "Test less than or equal operator with empty collection compared to value",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testQuantity2": {
      "name": "testQuantity2",
      "expression": "4 'g' ~ 4000 'mg'",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testQuantity",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testSubSetOf1": {
      "name": "testSubSetOf1",
      "expression": "Patient.name.first().subsetOf($this.name)",
      "category": "collection",
      "subcategory": "set_operations",
      "tags": [
        "r5-xml",
        "testSubSetOf"
      ],
      "description": "subsetOf function basic usage",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testDistinct3": {
      "name": "testDistinct3",
      "expression": "Questionnaire.descendants().linkId.select(substring(0,1)).isDistinct().not()",
      "category": "collection",
      "subcategory": "set_operations",
      "tags": [
        "r5-xml",
        "testDistinct"
      ],
      "description": "isDistinct with non-distinct values",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testReplace1": {
      "name": "testReplace1",
      "expression": "'123456'.replace('234', 'X')",
      "category": "string",
      "subcategory": "manipulation",
      "tags": [
        "r5-xml",
        "string_operations",
        "testReplace"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testNEquality8": {
      "name": "testNEquality8",
      "expression": "1.10 != 1.1",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testNEquality"
      ],
      "description": "Test not equal operator with equivalent decimals of different precision",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testEquivalent16": {
      "name": "testEquivalent16",
      "expression": "@2012-04-15 ~ @2012-04-15T10:00:00",
      "category": "comparison",
      "subcategory": "equivalence",
      "tags": [
        "r5-xml",
        "testEquivalent"
      ],
      "description": "Test equivalence operator with date and datetime of different precision",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testIndexOf1": {
      "name": "testIndexOf1",
      "expression": "'LogicalModel-Person'.indexOf('-')",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testIndexOf"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "dvUsageOutsideScopeThrows": {
      "name": "dvUsageOutsideScopeThrows",
      "expression": "defineVariable('n1', 'v1').active | defineVariable('n2', 'v2').select(%n1)",
      "category": "analyzer",
      "subcategory": null,
      "tags": [
        "r5-xml",
        "analyzer"
      ],
      "description": "use of a variable outside context throws error",
      "expect_error": true,
      "invalid_kind": "semantic",
      "file_path": "groups/analyzer/analyzer.json",
      "suite_name": "analyzer"
    },
    "testLessOrEqual5": {
      "name": "testLessOrEqual5",
      "expression": "@2014-12-12 <= @2014-12-13",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessOrEqual"
      ],
      "description": "Test less than or equal operator with dates where first date is earlier than second",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testStringQuantityWeekConvertsToQuantityFalse": {
      "name": "testStringQuantityWeekConvertsToQuantityFalse",
      "expression": "'1 wk'.convertsToQuantity().not()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testLessThan13": {
      "name": "testLessThan13",
      "expression": "@2014-12-13T12:00:00 < @2014-12-13T12:00:00",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessThan"
      ],
      "description": "Test less than operator with equal datetime values",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testNEquality17": {
      "name": "testNEquality17",
      "expression": "@2012-04-15T15:00:00Z != @2012-04-15T10:00:00",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testNEquality"
      ],
      "description": "Test not equal operator with timezone datetime comparison",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testMatchesEmpty2": {
      "name": "testMatchesEmpty2",
      "expression": "{}.matches('FHIR').empty() = true",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testMatches"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testPlus5": {
      "name": "testPlus5",
      "expression": "'a'+{}",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testPlus",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "PrecisionYear": {
      "name": "PrecisionYear",
      "expression": "@2014.precision()",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "Precision"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testFHIRPathAsFunction17": {
      "name": "testFHIRPathAsFunction17",
      "expression": "Patient.gender.ofType(code)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testInheritance",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testToString1": {
      "name": "testToString1",
      "expression": "1.toString() = '1'",
      "category": "conversion",
      "subcategory": "conversion",
      "tags": [
        "type_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/conversion/type_operations.json",
      "suite_name": "type_operations"
    },
    "testToInteger1": {
      "name": "testToInteger1",
      "expression": "'123'.toInteger() = 123",
      "category": "conversion",
      "subcategory": "conversion",
      "tags": [
        "type_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/conversion/type_operations.json",
      "suite_name": "type_operations"
    },
    "testSplit3": {
      "name": "testSplit3",
      "expression": "'[stop]ONE[stop][stop]TWO[stop][stop][stop]THREE[stop][stop]'.split('[stop]').trace('n').count() = 9",
      "category": "string",
      "subcategory": "manipulation",
      "tags": [
        "r5-xml",
        "string_operations",
        "testSplit"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testLessThan11": {
      "name": "testLessThan11",
      "expression": "'A' < 'A'",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessThan"
      ],
      "description": "Test less than operator with equal uppercase strings",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testComment6": {
      "name": "testComment6",
      "expression": "2 // comment\n/ 2",
      "category": "analyzer",
      "subcategory": "syntax",
      "tags": [
        "r5-xml",
        "comments"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/analyzer/analyzer.json",
      "suite_name": "analyzer"
    },
    "testToDateTimeInvalid": {
      "name": "testToDateTimeInvalid",
      "expression": "'invalid-datetime'.toDateTime()",
      "category": "dates",
      "subcategory": "conversion",
      "tags": [
        "date_time_operations",
        "testToDateTime"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testPlus6": {
      "name": "testPlus6",
      "expression": "@1974-12-25 + 7",
      "category": "analyzer",
      "subcategory": null,
      "tags": [
        "r5-xml",
        "analyzer"
      ],
      "description": null,
      "expect_error": true,
      "invalid_kind": "semantic",
      "file_path": "groups/analyzer/analyzer.json",
      "suite_name": "analyzer"
    },
    "PrecisionDecimal": {
      "name": "PrecisionDecimal",
      "expression": "1.58700.precision()",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "Precision"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testBooleanLiteralIsNotSystemQuantity": {
      "name": "testBooleanLiteralIsNotSystemQuantity",
      "expression": "true.is(System.Quantity).not()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testToString4": {
      "name": "testToString4",
      "expression": "0.0.toString() = '0.0'",
      "category": "conversion",
      "subcategory": "type_conversion",
      "tags": [
        "r5-xml",
        "testToString"
      ],
      "description": "Convert decimal to string",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/conversion/conversion_operations.json",
      "suite_name": "conversion_operations"
    },
    "testReplace4": {
      "name": "testReplace4",
      "expression": "{}.replace('234', 'X').empty() = true",
      "category": "string",
      "subcategory": "manipulation",
      "tags": [
        "r5-xml",
        "string_operations",
        "testReplace"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "defineVariable8": {
      "name": "defineVariable8",
      "expression": "defineVariable('v1', 'value1').select(%v1).trace('data').defineVariable('v2', 'value2').select($this & ':' & %v1 & '-' & %v2) | defineVariable('v3', 'value3').select(%v3)",
      "category": "other",
      "subcategory": "variables",
      "tags": [
        "r5-xml",
        "defineVariable"
      ],
      "description": "CompositeVariableUse",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testNEquality6": {
      "name": "testNEquality6",
      "expression": "1.1 != 1.1",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testNEquality"
      ],
      "description": "Test not equal operator with equal decimals",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testGreatorOrEqual12": {
      "name": "testGreatorOrEqual12",
      "expression": "@2014-12-12 >= @2014-12-12",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreatorOrEqual"
      ],
      "description": "Test greater than or equal operator with equal dates",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testType6": {
      "name": "testType6",
      "expression": "true.is(System.Boolean)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testType",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testRepeatInfiniteLoop": {
      "name": "testRepeatInfiniteLoop",
      "expression": "1.repeat($this + 1)",
      "category": "collection",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "repeat-infinite"
      ],
      "description": "Repeat function with infinite loop",
      "expect_error": true,
      "invalid_kind": "execution",
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testPatientName": {
      "name": "testPatientName",
      "expression": "Patient.name.given",
      "category": "other",
      "subcategory": "fhir_resources",
      "tags": [
        "integration_tests"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/integration_tests.json",
      "suite_name": "integration_tests"
    },
    "testType12": {
      "name": "testType12",
      "expression": "Patient.active.is(Boolean).not()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testType",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testStringLiteralConvertsToDecimalFalse": {
      "name": "testStringLiteralConvertsToDecimalFalse",
      "expression": "'1.a'.convertsToDecimal().not()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testLength6": {
      "name": "testLength6",
      "expression": "{}.length().empty() = true",
      "category": "string",
      "subcategory": "conversion",
      "tags": [
        "r5-xml",
        "string_operations",
        "testLength"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testConcatenate3": {
      "name": "testConcatenate3",
      "expression": "{} & 'b' = 'b'",
      "category": "string",
      "subcategory": "manipulation",
      "tags": [
        "r5-xml",
        "string_operations",
        "testConcatenate"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testIndexOf2": {
      "name": "testIndexOf2",
      "expression": "'LogicalModel-Person'.indexOf('z')",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testIndexOf"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testType15": {
      "name": "testType15",
      "expression": "Patient.type().namespace = 'FHIR'",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testType",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testReplaceMatches2": {
      "name": "testReplaceMatches2",
      "expression": "'abc'.replaceMatches('', 'x')",
      "category": "string",
      "subcategory": "manipulation",
      "tags": [
        "r5-xml",
        "string_operations",
        "testReplaceMatches"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testGreatorOrEqualEmpty3": {
      "name": "testGreatorOrEqualEmpty3",
      "expression": "{} >= {}",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreatorOrEqual"
      ],
      "description": "Test greater than or equal operator with empty collections",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testGreaterThan18": {
      "name": "testGreaterThan18",
      "expression": "'B' > 'A'",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreaterThan"
      ],
      "description": "Test greater than operator with uppercase strings where first is greater than second",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testContainsCollectionEmptyDateTime": {
      "name": "testContainsCollectionEmptyDateTime",
      "expression": "{} contains @2023-01-01",
      "category": "collection",
      "subcategory": "set_operations",
      "tags": [
        "r5-xml",
        "testContainsCollection"
      ],
      "description": "contains function with empty collection and date",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testNEquality3": {
      "name": "testNEquality3",
      "expression": "1 != 2",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testNEquality"
      ],
      "description": "Test not equal operator with unequal integers",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testPlusDate13": {
      "name": "testPlusDate13",
      "expression": "@1973-12-25 + 1 'd'",
      "category": "dates",
      "subcategory": "periods",
      "tags": [
        "date_time_operations",
        "r5-xml",
        "testPlus"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testEquality10": {
      "name": "testEquality10",
      "expression": "'a' = 'A'",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testEquality"
      ],
      "description": "Test equality operator with case-sensitive string comparison",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testGreaterThan16": {
      "name": "testGreaterThan16",
      "expression": "1.1 > 1.0",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreaterThan"
      ],
      "description": "Test greater than operator with decimals where first operand is greater than second",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testCase1": {
      "name": "testCase1",
      "expression": "'t'.upper() = 'T'",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testCase",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testType8": {
      "name": "testType8",
      "expression": "true is System.Boolean",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testType",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testToInteger5": {
      "name": "testToInteger5",
      "expression": "'st'.toInteger().empty()",
      "category": "conversion",
      "subcategory": "type_conversion",
      "tags": [
        "r5-xml",
        "testToInteger"
      ],
      "description": "Convert invalid string to integer (empty result)",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/conversion/conversion_operations.json",
      "suite_name": "conversion_operations"
    },
    "testStringLiteralConvertsToString": {
      "name": "testStringLiteralConvertsToString",
      "expression": "'true'.convertsToString()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testLiteralTimeMinute": {
      "name": "testLiteralTimeMinute",
      "expression": "@T14:34.is(Time)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "LowBoundaryDecimal14": {
      "name": "LowBoundaryDecimal14",
      "expression": "0.0034.lowBoundary(1)",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "LowBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testQuantity3": {
      "name": "testQuantity3",
      "expression": "4 'g' != 4040 'mg'",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testQuantity",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testPlus4": {
      "name": "testPlus4",
      "expression": "'a'+'b' = 'ab'",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testPlus",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testLessThan2": {
      "name": "testLessThan2",
      "expression": "1.0 < 1.2",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessThan"
      ],
      "description": "Test less than operator with decimals where first operand is less than second",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testIif1": {
      "name": "testIif1",
      "expression": "iif(Patient.name.exists(), 'named', 'unnamed') = 'named'",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testIif",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testLiteralDecimalLessThanInteger": {
      "name": "testLiteralDecimalLessThanInteger",
      "expression": "Observation.value.value < 190",
      "category": "other",
      "subcategory": "navigation",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testMultiply3": {
      "name": "testMultiply3",
      "expression": "1.2 * 1.8 = 2.16",
      "category": "math",
      "subcategory": "arithmetic",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testBooleanLogicXOr7": {
      "name": "testBooleanLogicXOr7",
      "expression": "({} xor true).empty()",
      "category": "boolean",
      "subcategory": "logical_xor",
      "tags": [
        "r5-xml",
        "testBooleanLogicXOr"
      ],
      "description": "Boolean XOR with empty collection and true",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/boolean/boolean_operations.json",
      "suite_name": "boolean_operations"
    },
    "testIndexer1": {
      "name": "testIndexer1",
      "expression": "Patient.name[0].given = 'Peter' | 'James'",
      "category": "collection",
      "subcategory": "filtering",
      "tags": [
        "r5-xml",
        "testIndexer"
      ],
      "description": "indexer function with first element",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testBooleanLogicOr6": {
      "name": "testBooleanLogicOr6",
      "expression": "(false or {}).empty()",
      "category": "boolean",
      "subcategory": "logical_or",
      "tags": [
        "r5-xml",
        "testBooleanLogicOr"
      ],
      "description": "Boolean OR with false and empty collection",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/boolean/boolean_operations.json",
      "suite_name": "boolean_operations"
    },
    "testDivideEmpty2": {
      "name": "testDivideEmpty2",
      "expression": "{} / 1",
      "category": "math",
      "subcategory": "arithmetic",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testFirstLast1": {
      "name": "testFirstLast1",
      "expression": "Patient.name.first().given = 'Peter' | 'James'",
      "category": "collection",
      "subcategory": "filtering",
      "tags": [
        "r5-xml",
        "testFirstLast"
      ],
      "description": "first function usage",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testGreaterThan6": {
      "name": "testGreaterThan6",
      "expression": "@2014-12-13T12:00:00 > @2014-12-13T12:00:01",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreaterThan"
      ],
      "description": "Test greater than operator with datetime values where first is earlier than second",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testDivide2": {
      "name": "testDivide2",
      "expression": "4 / 2 = 2",
      "category": "math",
      "subcategory": "arithmetic",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testRepeatDeduplication": {
      "name": "testRepeatDeduplication",
      "expression": "Patient.name.repeat('duplicate').count() <= Patient.name.repeatAll('duplicate').count()",
      "category": "collection",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "repeat-deduplication"
      ],
      "description": "Repeat deduplication comparison test",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testMultiplyEmpty1": {
      "name": "testMultiplyEmpty1",
      "expression": "1 * {}",
      "category": "math",
      "subcategory": "arithmetic",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testEscapeHtmlBasic": {
      "name": "testEscapeHtmlBasic",
      "expression": "'Hello <world>'.escape('html')",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "custom",
        "testEscapeHtmlCustom",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testStringLiteralToString": {
      "name": "testStringLiteralToString",
      "expression": "'true'.toString()",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testEscapeHtml": {
      "name": "testEscapeHtml",
      "expression": "'\"1&lt;2\"'.escape('html')",
      "category": "conversion",
      "subcategory": "escaping",
      "tags": [
        "r5-xml",
        "testEscapeUnescape"
      ],
      "description": "Escape HTML entities",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/conversion/conversion_operations.json",
      "suite_name": "conversion_operations"
    },
    "testStartsWith12a": {
      "name": "testStartsWith12a",
      "expression": "'987654321'.startsWith(length().toString())",
      "category": "analyzer",
      "subcategory": null,
      "tags": [
        "r5-xml",
        "analyzer"
      ],
      "description": "Invalid context for string function call",
      "expect_error": true,
      "invalid_kind": "semantic",
      "file_path": "groups/analyzer/analyzer.json",
      "suite_name": "analyzer"
    },
    "testBooleanLogicAnd6": {
      "name": "testBooleanLogicAnd6",
      "expression": "(false and {}) = false",
      "category": "boolean",
      "subcategory": "logical_and",
      "tags": [
        "r5-xml",
        "testBooleanLogicAnd"
      ],
      "description": "Boolean AND with false and empty collection",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/boolean/boolean_operations.json",
      "suite_name": "boolean_operations"
    },
    "testStringIntegerLiteralIsNotDecimal": {
      "name": "testStringIntegerLiteralIsNotDecimal",
      "expression": "'1'.is(Decimal).not()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testJoin": {
      "name": "testJoin",
      "expression": "name.given.join(',')",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testJoin",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testQuantity4": {
      "name": "testQuantity4",
      "expression": "4 'g' ~ 4040 'mg'",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testQuantity",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testQuantity5": {
      "name": "testQuantity5",
      "expression": "7 days = 1 week",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testQuantity",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testBooleanLiteralConvertsToInteger": {
      "name": "testBooleanLiteralConvertsToInteger",
      "expression": "true.convertsToInteger()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testEquality16": {
      "name": "testEquality16",
      "expression": "0.0 = 0",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testEquality"
      ],
      "description": "Test equality operator with decimal zero and integer zero",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testDecodeBase64B": {
      "name": "testDecodeBase64B",
      "expression": "'c3ViamVjdHM/X2Q='.decode('base64')",
      "category": "conversion",
      "subcategory": "encoding",
      "tags": [
        "r5-xml",
        "testEncodeDecode"
      ],
      "description": "Decode complex base64 to string",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/conversion/conversion_operations.json",
      "suite_name": "conversion_operations"
    },
    "yearOfCollectionOfDates": {
      "name": "yearOfCollectionOfDates",
      "expression": "(@2023-01-01 | @2024-01-01).yearOf()",
      "category": "dates",
      "subcategory": "extraction",
      "tags": [
        "date_time_operations",
        "yearOf"
      ],
      "description": null,
      "expect_error": true,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testPrecedence6": {
      "name": "testPrecedence6",
      "expression": "category.exists(coding.exists(system = 'http://terminology.hl7.org/CodeSystem/observation-category' and code.trace('c') in ('vital-signs' | 'vital-signs2').trace('codes')))",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testPrecedence",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testMatchesSingleLineMode1": {
      "name": "testMatchesSingleLineMode1",
      "expression": "'A\n\t\t\tB'.matches('A.*B')",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testMatches"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "LowBoundaryDateTimeMillisecond2": {
      "name": "LowBoundaryDateTimeMillisecond2",
      "expression": "@2014-01-01T08:05+08:00.lowBoundary(17)",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "LowBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testDateTimeGreaterThanDate2": {
      "name": "testDateTimeGreaterThanDate2",
      "expression": "now() > today()",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testUnion8": {
      "name": "testUnion8",
      "expression": "1.combine(1).union(2).count() = 2",
      "category": "collection",
      "subcategory": "set_operations",
      "tags": [
        "r5-xml",
        "testUnion"
      ],
      "description": "combine then union operation",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/collection/collection_operations.json",
      "suite_name": "collection_operations"
    },
    "testNegativeIntegerLiteralConvertsToBooleanFalse": {
      "name": "testNegativeIntegerLiteralConvertsToBooleanFalse",
      "expression": "(-1).convertsToBoolean()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testReplaceMatches7": {
      "name": "testReplaceMatches7",
      "expression": "'abc123'.replaceMatches('[0-9]', '-')",
      "category": "string",
      "subcategory": "manipulation",
      "tags": [
        "r5-xml",
        "string_operations",
        "testReplaceMatches"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testEquivalent13": {
      "name": "testEquivalent13",
      "expression": "0.0 ~ 0",
      "category": "comparison",
      "subcategory": "equivalence",
      "tags": [
        "r5-xml",
        "testEquivalent"
      ],
      "description": "Test equivalence operator with decimal zero and integer zero",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testDollarOrderAllowedA": {
      "name": "testDollarOrderAllowedA",
      "expression": "Patient.name.skip(3).given",
      "category": "other",
      "subcategory": "navigation",
      "tags": [
        "r5-xml",
        "testDollar",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testLiteralDecimalGreaterThanNonZeroTrue": {
      "name": "testLiteralDecimalGreaterThanNonZeroTrue",
      "expression": "Observation.value.value > 180.0",
      "category": "other",
      "subcategory": "navigation",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testExtension1": {
      "name": "testExtension1",
      "expression": "Patient.birthDate.extension('http://hl7.org/fhir/StructureDefinition/patient-birthTime').exists()",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testExtension",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "LowBoundaryDecimal8": {
      "name": "LowBoundaryDecimal8",
      "expression": "1.lowBoundary(0)",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "LowBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testType13": {
      "name": "testType13",
      "expression": "Patient.active.is(FHIR.boolean)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testType",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testReplaceMatches5": {
      "name": "testReplaceMatches5",
      "expression": "'123'.replaceMatches({}, 'X').empty() = true",
      "category": "string",
      "subcategory": "manipulation",
      "tags": [
        "r5-xml",
        "string_operations",
        "testReplaceMatches"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testEndsWith3": {
      "name": "testEndsWith3",
      "expression": "'12345'.endsWith('45') = true",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testEndsWith"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testSecondOfCollectionOfDateTimes": {
      "name": "testSecondOfCollectionOfDateTimes",
      "expression": "(@2023-05-15T14:30:15 | @2023-05-15T14:30:30 | @2023-05-15T14:30:45).secondOf()",
      "category": "dates",
      "subcategory": "extraction",
      "tags": [
        "date_time_operations",
        "fhirpath-lab",
        "testSecondOf"
      ],
      "description": null,
      "expect_error": true,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testNEquality20": {
      "name": "testNEquality20",
      "expression": "name.take(2) != name.take(2).first() | name.take(2).last()",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testNEquality"
      ],
      "description": "Test not equal operator with collection and its reconstructed equivalent",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testMonthOfDateDecember": {
      "name": "testMonthOfDateDecember",
      "expression": "@2023-12-25.monthOf()",
      "category": "dates",
      "subcategory": "extraction",
      "tags": [
        "date_time_operations",
        "fhirpath-lab",
        "testMonthOf"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "testEquality26": {
      "name": "testEquality26",
      "expression": "name.take(2) = name.take(2).first() | name.take(2).last()",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testEquality"
      ],
      "description": "Test equality operator with collection and its reconstructed equivalent",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testType21": {
      "name": "testType21",
      "expression": "Patient.ofType(FHIR.Patient).type().name",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testType",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testEquality20": {
      "name": "testEquality20",
      "expression": "@2012-04-15T15:00:00 = @2012-04-15T10:00:00",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testEquality"
      ],
      "description": "Test equality operator with unequal datetime values",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testStringHourConvertsToTime": {
      "name": "testStringHourConvertsToTime",
      "expression": "'14'.convertsToTime()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testStringQuantityDayLiteralToQuantity": {
      "name": "testStringQuantityDayLiteralToQuantity",
      "expression": "'1 day'.toQuantity() = 1 'd'",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": "Contested: calendar day units are not equal to ucum day units",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testQuantity8": {
      "name": "testQuantity8",
      "expression": "8 days > 1 week",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testQuantity",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "defineVariable7": {
      "name": "defineVariable7",
      "expression": "defineVariable('n1', name.first()).active | defineVariable('n2', name.skip(1).first()).select(%n2.given)",
      "category": "other",
      "subcategory": "variables",
      "tags": [
        "r5-xml",
        "defineVariable"
      ],
      "description": "2 vars, one unused",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testPlus2": {
      "name": "testPlus2",
      "expression": "1 + 0 = 1",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testPlus",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testMatchesEmpty": {
      "name": "testMatchesEmpty",
      "expression": "'FHIR'.matches({}).empty() = true",
      "category": "string",
      "subcategory": "search",
      "tags": [
        "r5-xml",
        "string_operations",
        "testMatches"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testAbs2": {
      "name": "testAbs2",
      "expression": "(-5.5).abs() = 5.5",
      "category": "math",
      "subcategory": "advanced",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "LowBoundaryDecimal1": {
      "name": "LowBoundaryDecimal1",
      "expression": "1.587.lowBoundary(6)",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "LowBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testNotEquivalent14": {
      "name": "testNotEquivalent14",
      "expression": "@2012-04-15 !~ @2012-04-15",
      "category": "comparison",
      "subcategory": "equivalence",
      "tags": [
        "r5-xml",
        "testNotEquivalent"
      ],
      "description": "Test not equivalent operator with equal dates",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testBooleanLiteralToString": {
      "name": "testBooleanLiteralToString",
      "expression": "true.toString()",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testGreaterThan13": {
      "name": "testGreaterThan13",
      "expression": "@2014-12-13T12:00:00 > @2014-12-13T12:00:00",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreaterThan"
      ],
      "description": "Test greater than operator with equal datetime values",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testNotEquivalent19": {
      "name": "testNotEquivalent19",
      "expression": "name !~ name",
      "category": "comparison",
      "subcategory": "equivalence",
      "tags": [
        "r5-xml",
        "testNotEquivalent"
      ],
      "description": "Test not equivalent operator with identical path expressions",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testLiteralDecimalStep": {
      "name": "testLiteralDecimalStep",
      "expression": "0.00000001.convertsToDecimal()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testComment7": {
      "name": "testComment7",
      "expression": "2 + 2 /",
      "category": "analyzer",
      "subcategory": "syntax",
      "tags": [
        "r5-xml",
        "comments"
      ],
      "description": null,
      "expect_error": true,
      "invalid_kind": "syntax",
      "file_path": "groups/analyzer/analyzer.json",
      "suite_name": "analyzer"
    },
    "testStringQuantityMonthLiteralToQuantity": {
      "name": "testStringQuantityMonthLiteralToQuantity",
      "expression": "'1 \\'mo\\''.toQuantity() = 1 month",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testLessOrEqual19": {
      "name": "testLessOrEqual19",
      "expression": "@2014-12-13 <= @2014-12-12",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessOrEqual"
      ],
      "description": "Test less than or equal operator with dates where first date is later than second",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testLessOrEqual24": {
      "name": "testLessOrEqual24",
      "expression": "@2018-03-01T10:30 <= @2018-03-01T10:30:00",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessOrEqual"
      ],
      "description": "Test less than or equal operator with different precision datetime values resulting in empty collection",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testNEquality23": {
      "name": "testNEquality23",
      "expression": "(1.2 / 1.8).round(2) != 0.67",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testNEquality"
      ],
      "description": "Test not equal operator with rounded calculation result and equal value",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testFHIRPathAsFunction21": {
      "name": "testFHIRPathAsFunction21",
      "expression": "Patient.name.as(HumanName).use",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testInheritance",
        "other_operations"
      ],
      "description": null,
      "expect_error": true,
      "invalid_kind": "execution",
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testLiteralDateTimeSecond": {
      "name": "testLiteralDateTimeSecond",
      "expression": "@2015-02-04T14:34:28.is(DateTime)",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testRepeat2": {
      "name": "testRepeat2",
      "expression": "Questionnaire.repeat(item).code.count() = 11",
      "category": "other",
      "subcategory": "control_flow",
      "tags": [
        "r5-xml",
        "testRepeat",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testNotEquivalent2": {
      "name": "testNotEquivalent2",
      "expression": "{} !~ {}",
      "category": "comparison",
      "subcategory": "equivalence",
      "tags": [
        "r5-xml",
        "testNotEquivalent"
      ],
      "description": "Test not equivalent operator with empty collections",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testEquality15": {
      "name": "testEquality15",
      "expression": "0 = 0",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testEquality"
      ],
      "description": "Test equality operator with zero values",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testBooleanLogicAnd8": {
      "name": "testBooleanLogicAnd8",
      "expression": "({} and false) = false",
      "category": "boolean",
      "subcategory": "logical_and",
      "tags": [
        "r5-xml",
        "testBooleanLogicAnd"
      ],
      "description": "Boolean AND with empty collection and false",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/boolean/boolean_operations.json",
      "suite_name": "boolean_operations"
    },
    "testGreatorOrEqual9": {
      "name": "testGreatorOrEqual9",
      "expression": "1.0 >= 1.0",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreatorOrEqual"
      ],
      "description": "Test greater than or equal operator with equal decimals",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testSubstring1": {
      "name": "testSubstring1",
      "expression": "'12345'.substring(2) = '345'",
      "category": "string",
      "subcategory": "manipulation",
      "tags": [
        "r5-xml",
        "string_operations",
        "testSubstring"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testReplace2": {
      "name": "testReplace2",
      "expression": "'abc'.replace('', 'x')",
      "category": "string",
      "subcategory": "manipulation",
      "tags": [
        "r5-xml",
        "string_operations",
        "testReplace"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/string/string_operations.json",
      "suite_name": "string_operations"
    },
    "testGreatorOrEqual5": {
      "name": "testGreatorOrEqual5",
      "expression": "@2014-12-12 >= @2014-12-13",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreatorOrEqual"
      ],
      "description": "Test greater than or equal operator with dates where first date is earlier than second",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testEquality13": {
      "name": "testEquality13",
      "expression": "1.1 = 1.2",
      "category": "comparison",
      "subcategory": "equality",
      "tags": [
        "r5-xml",
        "testEquality"
      ],
      "description": "Test equality operator with unequal decimals",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testLessOrEqual23": {
      "name": "testLessOrEqual23",
      "expression": "@2018-03 <= @2018-03-01",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testLessOrEqual"
      ],
      "description": "Test less than or equal operator with different precision dates resulting in empty collection",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testVariables3": {
      "name": "testVariables3",
      "expression": "%ucum = 'http://unitsofmeasure.org'",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testVariables",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testGreatorOrEqual23": {
      "name": "testGreatorOrEqual23",
      "expression": "@2018-03 >= @2018-03-01",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreatorOrEqual"
      ],
      "description": "Test greater than or equal operator with different precision dates resulting in empty collection",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testMonthOfLeapYearFebruary": {
      "name": "testMonthOfLeapYearFebruary",
      "expression": "@2024-02-29.monthOf()",
      "category": "dates",
      "subcategory": "extraction",
      "tags": [
        "date_time_operations",
        "fhirpath-lab",
        "testMonthOf"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/dates/date_time_operations.json",
      "suite_name": "date_time_operations"
    },
    "dvCantOverwriteSystemVar": {
      "name": "dvCantOverwriteSystemVar",
      "expression": "defineVariable('context', 'oops')",
      "category": "analyzer",
      "subcategory": null,
      "tags": [
        "r5-xml",
        "analyzer"
      ],
      "description": "Attempting to overwrite system variable",
      "expect_error": true,
      "invalid_kind": "semantic",
      "file_path": "groups/analyzer/analyzer.json",
      "suite_name": "analyzer"
    },
    "testLiteralDecimal00": {
      "name": "testLiteralDecimal00",
      "expression": "0.0.convertsToDecimal()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "HighBoundaryDecimal12": {
      "name": "HighBoundaryDecimal12",
      "expression": "12.500.highBoundary(4)",
      "category": "math",
      "subcategory": "precision",
      "tags": [
        "r5-xml",
        "HighBoundary"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testLiteralNotFalse": {
      "name": "testLiteralNotFalse",
      "expression": "false.not() = true",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testDivEmpty2": {
      "name": "testDivEmpty2",
      "expression": "{} div 1",
      "category": "math",
      "subcategory": "arithmetic",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testLiteralIntegerNegative1": {
      "name": "testLiteralIntegerNegative1",
      "expression": "(-1).convertsToInteger()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testGreatorOrEqual20": {
      "name": "testGreatorOrEqual20",
      "expression": "@2014-12-13T12:00:01 >= @2014-12-13T12:00:00",
      "category": "comparison",
      "subcategory": "relational",
      "tags": [
        "r5-xml",
        "testGreatorOrEqual"
      ],
      "description": "Test greater than or equal operator with datetime values where first is later than second",
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/comparison/comparison_operations.json",
      "suite_name": "comparison_operations"
    },
    "testStringHourConvertsToDateTime": {
      "name": "testStringHourConvertsToDateTime",
      "expression": "'2015-02-04T14'.convertsToDateTime()",
      "category": "other",
      "subcategory": "type_checking",
      "tags": [
        "r5-xml",
        "testTypes",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testIntegerBooleanNotTrue": {
      "name": "testIntegerBooleanNotTrue",
      "expression": "(0).not() = false",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    },
    "testComment4": {
      "name": "testComment4",
      "expression": "2 + 2 \n      /*\nThis is a multi-line comment\nAny text enclosed within is ignored\n*/\n+2",
      "category": "analyzer",
      "subcategory": "syntax",
      "tags": [
        "r5-xml",
        "comments"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/analyzer/analyzer.json",
      "suite_name": "analyzer"
    },
    "testMod5": {
      "name": "testMod5",
      "expression": "5 mod 0",
      "category": "math",
      "subcategory": "arithmetic",
      "tags": [
        "r5-xml",
        "math_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/math/math_operations.json",
      "suite_name": "math_operations"
    },
    "testLiteralFalse": {
      "name": "testLiteralFalse",
      "expression": "Patient.name.empty() = false",
      "category": "other",
      "subcategory": "literals",
      "tags": [
        "r5-xml",
        "testLiterals",
        "other_operations"
      ],
      "description": null,
      "expect_error": null,
      "invalid_kind": null,
      "file_path": "groups/other/other_operations.json",
      "suite_name": "other_operations"
    }
  },
  "categories": {
    "comparison": [
      "comparison_operations"
    ],
    "collection": [
      "collection_operations"
    ],
    "analyzer": [
      "analyzer"
    ],
    "dates": [
      "date_time_operations"
    ],
    "math": [
      "math_operations"
    ],
    "string": [
      "string_operations"
    ],
    "conversion": [
      "conversion_operations",
      "type_operations"
    ],
    "boolean": [
      "boolean_logic",
      "boolean_operations"
    ],
    "other": [
      "advanced_features",
      "integration_tests",
      "other_operations"
    ]
  },
  "file_index": {
    "advanced_features": "groups/other/advanced_features.json",
    "type_operations": "groups/conversion/type_operations.json",
    "integration_tests": "groups/other/integration_tests.json",
    "collection_operations.json": "groups/collection/collection_operations.json",
    "conversion_operations.json": "groups/conversion/conversion_operations.json",
    "other_operations.json": "groups/other/other_operations.json",
    "string_operations.json": "groups/string/string_operations.json",
    "conversion_operations": "groups/conversion/conversion_operations.json",
    "boolean_logic.json": "groups/boolean/boolean_logic.json",
    "boolean_logic": "groups/boolean/boolean_logic.json",
    "collection_operations": "groups/collection/collection_operations.json",
    "analyzer": "groups/analyzer/analyzer.json",
    "boolean_operations": "groups/boolean/boolean_operations.json",
    "math_operations.json": "groups/math/math_operations.json",
    "advanced_features.json": "groups/other/advanced_features.json",
    "integration_tests.json": "groups/other/integration_tests.json",
    "comparison_operations.json": "groups/comparison/comparison_operations.json",
    "comparison_operations": "groups/comparison/comparison_operations.json",
    "boolean_operations.json": "groups/boolean/boolean_operations.json",
    "analyzer.json": "groups/analyzer/analyzer.json",
    "date_time_operations.json": "groups/dates/date_time_operations.json",
    "other_operations": "groups/other/other_operations.json",
    "string_operations": "groups/string/string_operations.json",
    "type_operations.json": "groups/conversion/type_operations.json",
    "date_time_operations": "groups/dates/date_time_operations.json",
    "math_operations": "groups/math/math_operations.json"
  },
  "name_index": {
    "defineVariable15": "other_operations",
    "testLessThan7": "comparison_operations",
    "testEquivalent10": "comparison_operations",
    "testContainsString1": "string_operations",
    "testReplace1": "string_operations",
    "testAllTrue3": "collection_operations",
    "testTake5": "collection_operations",
    "testLessThan24": "comparison_operations",
    "testTruncate1": "math_operations",
    "testLiteralIntegerNotEqual": "other_operations",
    "testTrim5": "string_operations",
    "testContainsString9": "string_operations",
    "testConformsTo3": "other_operations",
    "testTrim6": "string_operations",
    "testPolarityPrecedence": "other_operations",
    "testFHIRPathAsFunction22": "other_operations",
    "testNotEquivalent16": "comparison_operations",
    "testLiteralDecimalNegative01Invalid": "other_operations",
    "testFHIRPathIsFunction4": "other_operations",
    "testSkip4": "collection_operations",
    "testIntegerLiteralToBooleanFalse": "other_operations",
    "testStringLiteralConvertsToDecimalFalse": "other_operations",
    "testPowerEmpty": "math_operations",
    "testIndexOf5": "string_operations",
    "testGreaterThan13": "comparison_operations",
    "testMinusEmpty3": "other_operations",
    "testIntegerLiteralToDeciamlEquivalent": "other_operations",
    "testLiteralDateTimeUTC": "other_operations",
    "testMatchesFullWithinUrl4": "string_operations",
    "testCollectionBoolean1": "boolean_operations",
    "testEndsWith9": "string_operations",
    "testIif2": "other_operations",
    "testLiteralDateTimeTZGreater": "other_operations",
    "testLiteralTimeTimezoneOffset": "other_operations",
    "testMinusEmpty2": "other_operations",
    "testPolymorphismIsA2": "other_operations",
    "testRound1": "math_operations",
    "testLiteralIntegerCountNotEqual": "other_operations",
    "testMatchesFullWithinUrl1": "string_operations",
    "defineVariable10": "analyzer",
    "testReplace3": "string_operations",
    "testLessOrEqual5": "comparison_operations",
    "testEndsWith6": "string_operations",
    "testDivide6": "math_operations",
    "testDateEqual": "other_operations",
    "testResolveBundleFirst": "other_operations",
    "testTail1": "collection_operations",
    "yearOfPatientBirthDate": "date_time_operations",
    "testEquality12": "comparison_operations",
    "testBooleanLogicOr9": "boolean_operations",
    "testEscapeHtmlQuotes": "other_operations",
    "testBooleanLogicAnd7": "boolean_operations",
    "testSort4": "collection_operations",
    "testToInteger5": "conversion_operations",
    "testPolymorphismAsA": "other_operations",
    "testLength3": "string_operations",
    "testLessThan15": "comparison_operations",
    "testLiteralDecimalLessThanInvalid": "other_operations",
    "testGreaterThan2": "comparison_operations",
    "testLessThan3": "comparison_operations",
    "testNotEmpty": "other_operations",
    "testBooleanLogicXOr5": "boolean_operations",
    "testStringTrueLiteralConvertsToBoolean": "other_operations",
    "testEscapedIdentifier": "other_operations",
    "testBooleanLiteralIsNotSystemQuantity": "other_operations",
    "testMatchesWithinUrl2": "string_operations",
    "testMatchesSingleLineMode1": "string_operations",
    "testSplit4": "string_operations",
    "testBooleanLogicOr2": "boolean_operations",
    "testVariables4": "other_operations",
    "testGreatorOrEqual3": "comparison_operations",
    "LowBoundaryDecimal8": "math_operations",
    "testType17": "other_operations",
    "testStringLiteralIsNotInteger": "other_operations",
    "testDistinct4": "collection_operations",
    "testIntegerLiteralIsNotString": "other_operations",
    "testFHIRPathAsFunction14": "other_operations",
    "testReplaceMatches7": "string_operations",
    "testNEquality24": "comparison_operations",
    "testStringYearConvertsToDateTime": "other_operations",
    "testNotEquivalent3": "comparison_operations",
    "testRepeatAllNoArguments": "collection_operations",
    "testMonthOfObservationDate": "date_time_operations",
    "testExclude2": "collection_operations",
    "testNEquality11": "comparison_operations",
    "testTimezoneOffsetOfDateTimePositive": "date_time_operations",
    "testPolymorphismAsAFunction": "other_operations",
    "testRepeat4": "other_operations",
    "testCollectionBoolean5": "boolean_operations",
    "testType7": "other_operations",
    "testDecodeBase64B": "conversion_operations",
    "testDivideEmpty1": "math_operations",
    "testLessThan13": "comparison_operations",
    "testBooleanImplies8": "boolean_operations",
    "testExp2": "math_operations",
    "testTrueLiteralConvertsToBoolean": "other_operations",
    "testLiteralDecimalStep": "other_operations",
    "testNotEquivalent13": "comparison_operations",
    "testFHIRPathAsFunction15": "other_operations",
    "testConcatenate1": "string_operations",
    "testRepeatEmpty": "collection_operations",
    "testLessOrEqual22": "comparison_operations",
    "testEquality7": "comparison_operations",
    "testDistinct1": "collection_operations",
    "testContainsCollectionEmpty2": "collection_operations",
    "testGreatorOrEqual26": "comparison_operations",
    "HighBoundaryQuantity": "math_operations",
    "testFHIRPathIsFunction2": "other_operations",
    "testGreaterThan26": "comparison_operations",
    "testCeiling2": "math_operations",
    "testIntegerLiteralIsNotDecimal": "other_operations",
    "testType9": "other_operations",
    "testGreaterThan5": "comparison_operations",
    "testBooleanLogicXOr8": "boolean_operations",
    "testStringTZConvertsToDateTime": "other_operations",
    "testGreatorOrEqual6": "comparison_operations",
    "testIndex": "other_operations",
    "testExclude1": "collection_operations",
    "testEquivalent8": "comparison_operations",
    "testNow2": "date_time_operations",
    "testPower1": "math_operations",
    "testStringFalseLiteralConvertsToBoolean": "other_operations",
    "testToChars1": "string_operations",
    "testStringFalseToBoolean": "other_operations",
    "testGreatorOrEqual5": "comparison_operations",
    "testIif5": "other_operations",
    "testDecodeHex": "conversion_operations",
    "testTypeA": "other_operations",
    "testDayOfPatientBirthDate": "date_time_operations",
    "testLiteralQuantityInteger": "other_operations",
    "testLessOrEqual1": "comparison_operations",
    "yearOfOldDate": "date_time_operations",
    "defineVariable2": "other_operations",
    "testEquality1": "comparison_operations",
    "testLiteralDateTimeDay": "other_operations",
    "testLiteralDateTimeTZEqualFalse": "other_operations",
    "testIntegerLiteralToString": "other_operations",
    "testPolymorphismB": "analyzer",
    "testFHIRPathAsFunction11": "other_operations",
    "testQuantity9": "other_operations",
    "testEquivalent13": "comparison_operations",
    "testExists3": "collection_operations",
    "testToDateInvalid": "date_time_operations",
    "Comparable2": "math_operations",
    "testLiteralIntegerMax": "other_operations",
    "testNEquality20": "comparison_operations",
    "testMonthOfCollectionOfDates": "date_time_operations",
    "testEscapeHtmlBasic": "other_operations",
    "testEquivalent15": "comparison_operations",
    "testNEquality2": "comparison_operations",
    "testIndexer1": "collection_operations",
    "testExtension2": "other_operations",
    "testEquivalent11": "comparison_operations",
    "testNotEquivalent19": "comparison_operations",
    "testToDateFromString": "date_time_operations",
    "testLessThan16": "comparison_operations",
    "testComment1": "analyzer",
    "testSecondOfDateTime": "date_time_operations",
    "testLogEmpty3": "math_operations",
    "testUnescapeHtmlQuotes": "other_operations",
    "testSplit1": "string_operations",
    "testLessOrEqual4": "comparison_operations",
    "testContainsCollection3": "collection_operations",
    "testContainsString6": "string_operations",
    "testLiteralDateTimeMillisecond": "other_operations",
    "testSelect2": "collection_operations",
    "testPlusDate13": "date_time_operations",
    "testStringQuantityLiteralToQuantity": "other_operations",
    "testStringSecondConvertsToTime": "other_operations",
    "testVariables2": "other_operations",
    "testLogEmpty": "math_operations",
    "testFHIRPathAsFunction20": "other_operations",
    "testContainsCollection1": "collection_operations",
    "testMinus6": "other_operations",
    "HighBoundaryDecimal9": "math_operations",
    "testStringDecimalLiteralIsNotSystemQuantity": "other_operations",
    "testStartsWith9": "string_operations",
    "testMatchesFullWithinUrl1a": "string_operations",
    "testGreatorOrEqualEmpty3": "comparison_operations",
    "LowBoundaryDecimal3": "math_operations",
    "testLessOrEqualEmpty2": "comparison_operations",
    "testMinus2": "other_operations",
    "testMultipleResolve": "other_operations",
    "testNotEquivalent9": "comparison_operations",
    "testType5": "other_operations",
    "testQuantityLiteralWeekToString": "other_operations",
    "testPolymorphismAsBFunction": "other_operations",
    "testRepeatFiniteSequence": "collection_operations",
    "testRoundEmpty": "math_operations",
    "HighBoundaryDecimal": "math_operations",
    "testReplaceMatches6": "string_operations",
    "testConcatenate2": "string_operations",
    "testStringMinuteConvertsToTime": "other_operations",
    "testStringIntegerLiteralToQuantity": "other_operations",
    "testPrecedence3": "other_operations",
    "testSingle2": "collection_operations",
    "testPeriodInvariantOld": "date_time_operations",
    "testGreatorOrEqual18": "comparison_operations",
    "testPlusDate21": "date_time_operations",
    "testMonthOfDateDecember": "date_time_operations",
    "testObservation1": "integration_tests",
    "testAllTrue1": "collection_operations",
    "testUnescapeHtmlAmpersand": "other_operations",
    "testLiteralNotOnEmpty": "other_operations",
    "testPowerEmpty2": "math_operations",
    "testType19": "other_operations",
    "testEquivalent22": "comparison_operations",
    "testRepeatIncompatibleArithmetic": "collection_operations",
    "testExpressions": "other_operations",
    "testCount1": "collection_operations",
    "testIif12": "other_operations",
    "yearOfDateTime": "date_time_operations",
    "testStringHourConvertsToDateTime": "other_operations",
    "testStartsWith2": "string_operations",
    "testTrim1": "string_operations",
    "testLiteralDecimalMax": "other_operations",
    "testMinus7": "date_time_operations",
    "testLessOrEqual7": "comparison_operations",
    "testStringLiteralConvertsToIntegerFalse": "other_operations",
    "testPatientTelecomTypes": "other_operations",
    "testEquivalent1": "comparison_operations",
    "testToDateTimeFromString": "date_time_operations",
    "testMonthOfLeapYearFebruary": "date_time_operations",
    "testPlusDate9": "date_time_operations",
    "testGreaterThan23": "comparison_operations",
    "testIntersect1": "collection_operations",
    "testSkip1": "collection_operations",
    "HighBoundaryDecimal3": "math_operations",
    "testStringTrueToBoolean": "other_operations",
    "testContainsString7": "string_operations",
    "testEquivalent6": "comparison_operations",
    "testPlus6": "analyzer",
    "testNotInvalid": "other_operations",
    "testReplace5": "string_operations",
    "testFHIRPathAsFunction23": "other_operations",
    "testPolymorphismAsB": "analyzer",
    "testEquality22": "comparison_operations",
    "testBooleanLogicXOr9": "boolean_operations",
    "testIntegerLiteralFalseConvertsToBoolean": "other_operations",
    "testLiteralInteger0": "other_operations",
    "testEscapeJson": "conversion_operations",
    "testToDecimal5": "conversion_operations",
    "testMultiply2": "math_operations",
    "testStringDayConvertsToDate": "other_operations",
    "testUnion6": "collection_operations",
    "testStartsWith4": "string_operations",
    "PrecisionEmpty": "math_operations",
    "testDecimalLiteralConvertsToString": "other_operations",
    "toDateFullDateTimString": "date_time_operations",
    "testHourOfDateTimeNoon": "date_time_operations",
    "testModEmpty2": "math_operations",
    "testContainsString4": "string_operations",
    "testLiteralFalse": "other_operations",
    "testToString1": "type_operations",
    "testAggregate4": "collection_operations",
    "testPlusDate3": "date_time_operations",
    "testToInteger1": "type_operations",
    "testLessThan18": "comparison_operations",
    "testComment4": "analyzer",
    "testFirstLast2": "collection_operations",
    "testNotEquivalent5": "comparison_operations",
    "testDivide2": "math_operations",
    "testEndsWith3": "string_operations",
    "testLiteralIntegerLessThanPolarityTrue": "other_operations",
    "testGreatorOrEqual25": "comparison_operations",
    "defineVariable1": "other_operations",
    "yearOfDateTimeWithTimezone": "date_time_operations",
    "testTypeA4": "other_operations",
    "testStringDecimalLiteralConvertsToQuantity": "other_operations",
    "testToday1": "date_time_operations",
    "testGreatorOrEqualEmpty2": "comparison_operations",
    "Comparable1": "math_operations",
    "testNegativeIntegerLiteralToString": "other_operations",
    "testType10": "other_operations",
    "testExtractBirthDate": "other_operations",
    "testDivide1": "math_operations",
    "testPrecedence6": "other_operations",
    "testContainedId": "other_operations",
    "testType18": "other_operations",
    "testLiteralDecimal10": "other_operations",
    "testMonthOfDateTimeWithTimezone": "date_time_operations",
    "testComment2": "analyzer",
    "testUnion12": "collection_operations",
    "testEscapeHtml": "conversion_operations",
    "testLiteralNotTrue": "other_operations",
    "testNEquality15": "comparison_operations",
    "testIntegerLiteralToDecimal": "other_operations",
    "testLiteralDecimalGreaterThanIntegerTrue": "other_operations",
    "testStringLiteralConvertsToString": "other_operations",
    "testMatchesWithinUrl1a": "string_operations",
    "testSubstring4": "string_operations",
    "testSubstring5": "string_operations",
    "testTrim2": "string_operations",
    "testEncodeBase64B": "conversion_operations",
    "testMultiplyEmpty3": "math_operations",
    "testEquality13": "comparison_operations",
    "testExtension1": "other_operations",
    "LowBoundaryDecimal1": "math_operations",
    "testType1a": "other_operations",
    "testLiteralBooleanTrue": "other_operations",
    "testLessOrEqual19": "comparison_operations",
    "testGreaterThan12": "comparison_operations",
    "testEquality10": "comparison_operations",
    "testNEquality6": "comparison_operations",
    "testLessThanEmpty2": "comparison_operations",
    "testExists5": "collection_operations",
    "testEquivalent12": "comparison_operations",
    "testIntegerLiteralConvertsToInteger": "other_operations",
    "testBooleanLogicOr6": "boolean_operations",
    "testGreatorOrEqual24": "comparison_operations",
    "testLessThan11": "comparison_operations",
    "testStringDecimalLiteralIsNotDecimal": "other_operations",
    "testLiteralTimeUTC": "other_operations",
    "testFHIRPathIsFunction10": "other_operations",
    "testLength4": "string_operations",
    "testDecimalLiteralToInteger": "other_operations",
    "testDecimalLiteralIsDecimal": "other_operations",
    "testSelect1": "collection_operations",
    "testLiteralDecimalNegative01": "other_operations",
    "testNotEquivalent2": "comparison_operations",
    "yearOfEmptyCollection": "date_time_operations",
    "testGreatorOrEqual1": "comparison_operations",
    "testTimezoneOffsetOfDateTimeUTC": "date_time_operations",
    "testStartsWith5": "string_operations",
    "testToDateTimeEmpty": "date_time_operations",
    "testToDecimal4": "conversion_operations",
    "testPrecedence4": "other_operations",
    "testStartsWith8": "string_operations",
    "testPowerEmpty3": "math_operations",
    "testPlus4": "other_operations",
    "testContainsString2": "string_operations",
    "testLessThanEmpty3": "comparison_operations",
    "testEquality26": "comparison_operations",
    "testMultiply1": "math_operations",
    "testUnion1": "collection_operations",
    "testPolymorphismIsB": "other_operations",
    "testEquality5": "comparison_operations",
    "defineVariable4": "other_operations",
    "testType13": "other_operations",
    "testLiteralIntegerLessThanFalse": "other_operations",
    "testMonthOfDateJanuary": "date_time_operations",
    "testLessThan17": "comparison_operations",
    "testFloor3": "math_operations",
    "testExp1": "math_operations",
    "testEscapeHtmlComplex": "other_operations",
    "testLiteralQuantityDay": "other_operations",
    "HighBoundaryDecimal12": "math_operations",
    "testModEmpty3": "math_operations",
    "LowBoundaryDecimal10": "math_operations",
    "testIn1": "other_operations",
    "testIn4": "other_operations",
    "testUnion2": "collection_operations",
    "testGreatorOrEqual15": "comparison_operations",
    "testMinuteOfDateTimeMax": "date_time_operations",
    "testFHIRPathIsFunction7": "other_operations",
    "testCeiling3": "math_operations",
    "testLength2": "string_operations",
    "testMinusEmpty1": "other_operations",
    "testIndexOf6": "string_operations",
    "testPlusTime3": "date_time_operations",
    "testNotEquivalent15": "comparison_operations",
    "testDiv2": "math_operations",
    "testMatchesEmpty": "string_operations",
    "testEquality11": "comparison_operations",
    "testType21": "other_operations",
    "testLessThan23": "comparison_operations",
    "testType16": "other_operations",
    "testHourOfCollectionOfDateTimes": "date_time_operations",
    "testSubstring9": "string_operations",
    "testLessOrEqual13": "comparison_operations",
    "testLessOrEqual17": "comparison_operations",
    "testIntegerLiteralIsInteger": "other_operations",
    "testTake3": "collection_operations",
    "testBooleanLogicAnd3": "boolean_operations",
    "HighBoundaryDecimal13": "math_operations",
    "testSimpleWithContext": "other_operations",
    "testHasTemplateId2": "other_operations",
    "testGreatorOrEqual8": "comparison_operations",
    "testSubstring10": "string_operations",
    "testCeiling1": "math_operations",
    "testStartsWith11": "string_operations",
    "testPlus1": "other_operations",
    "testLn2": "math_operations",
    "LowBoundaryNegDecimalDefault": "math_operations",
    "LowBoundaryDecimal11": "math_operations",
    "testDecimalLiteralToDecimal": "other_operations",
    "testBooleanLogicXOr7": "boolean_operations",
    "testEmpty": "other_operations",
    "testPower3": "math_operations",
    "testLogEmpty2": "math_operations",
    "HighBoundaryDecimal8": "math_operations",
    "testEquivalent24": "comparison_operations",
    "testEquality25": "comparison_operations",
    "testType15": "other_operations",
    "testEquivalent5": "comparison_operations",
    "testPlus2": "other_operations",
    "testNotEquivalent6": "comparison_operations",
    "testLiteralBooleanFalse": "other_operations",
    "testContainsCollection4": "collection_operations",
    "testBooleanLogicOr1": "boolean_operations",
    "testNEquality21": "comparison_operations",
    "testEndsWith2": "string_operations",
    "testLessOrEqual18": "comparison_operations",
    "defineVariable9": "analyzer",
    "testSubstring7": "string_operations",
    "testNEquality12": "comparison_operations",
    "testDateTimeGreaterThanDate1": "other_operations",
    "testExclude3": "collection_operations",
    "testPlusDate19": "date_time_operations",
    "testEquivalent23": "comparison_operations",
    "testTypeA2": "other_operations",
    "testBooleanLogicAnd1": "boolean_operations",
    "testBooleanLogicXOr6": "boolean_operations",
    "testLessThan4": "comparison_operations",
    "testNEquality19": "comparison_operations",
    "PrecisionTimeMinutes": "math_operations",
    "testBooleanLogicOr5": "boolean_operations",
    "testQuantity4": "other_operations",
    "testRound2": "math_operations",
    "testDivide5": "math_operations",
    "testDayOfDateEndOfMonth": "date_time_operations",
    "testSort3": "collection_operations",
    "testBooleanImplies4": "boolean_operations",
    "testHourOfDateTimeMidnight": "date_time_operations",
    "testPlusDate11": "date_time_operations",
    "testQuantity3": "other_operations",
    "testStartsWith12": "string_operations",
    "testToDateTimeFromDate": "date_time_operations",
    "testMinus4": "other_operations",
    "testEquality20": "comparison_operations",
    "testType1": "other_operations",
    "testLiteralNotFalse": "other_operations",
    "testSplit3": "string_operations",
    "testDateNotEqual": "other_operations",
    "testToDecimal3": "conversion_operations",
    "defineVariable19": "other_operations",
    "testSqrt1": "math_operations",
    "testNEquality10": "comparison_operations",
    "testTimezoneOffsetOfCollectionOfDateTimes": "date_time_operations",
    "testGreatorOrEqual4": "comparison_operations",
    "defineVariable13": "other_operations",
    "testStringDecimalLiteralToQuantity": "other_operations",
    "testTake2": "collection_operations",
    "testLessOrEqual16": "comparison_operations",
    "defineVariable14": "other_operations",
    "testDayOfDateTime": "date_time_operations",
    "testGreaterThan27": "comparison_operations",
    "testFHIRPathAsFunction16": "other_operations",
    "HighBoundaryDecimal6": "math_operations",
    "testLessThan14": "comparison_operations",
    "testBooleanImplies6": "boolean_operations",
    "testIntegerBooleanNotTrue": "other_operations",
    "testCeilingEmpty": "math_operations",
    "testNow1": "date_time_operations",
    "testCollectionBoolean3": "boolean_operations",
    "testVariables3": "other_operations",
    "testDecimalLiteralConvertsToDecimal": "other_operations",
    "dvParametersDontColide": "other_operations",
    "testStringQuantityWeekConvertsToQuantity": "other_operations",
    "testStartsWith10": "string_operations",
    "testSort10": "collection_operations",
    "testEquality18": "comparison_operations",
    "testContainsString10": "string_operations",
    "testContainsCollectionEmpty3": "collection_operations",
    "testNEquality3": "comparison_operations",
    "testLessOrEqual9": "comparison_operations",
    "testRepeatAllEmpty": "collection_operations",
    "testStringIntegerLiteralConvertsToQuantity": "other_operations",
    "testExists2": "collection_operations",
    "testLessOrEqual8": "comparison_operations",
    "testIn2": "other_operations",
    "testDateNotEqualTimezoneOffsetAfter": "other_operations",
    "testStartsWith6": "string_operations",
    "testEquivalent20": "comparison_operations",
    "testNotEquivalent4": "comparison_operations",
    "testDecimalLiteralToIntegerIsEmpty": "other_operations",
    "testEscapeHtmlAmpersand": "other_operations",
    "testUnion5": "collection_operations",
    "testReplace2": "string_operations",
    "testInEmptyCollection": "other_operations",
    "testRepeatAllSingleArgument": "collection_operations",
    "testGreaterThan18": "comparison_operations",
    "testBooleanLogicOr3": "boolean_operations",
    "testCollectionBoolean2": "boolean_operations",
    "testEndsWith7": "string_operations",
    "testNegativeIntegerLiteralConvertsToBooleanFalse": "other_operations",
    "testIif3": "other_operations",
    "testNotEquivalent12": "comparison_operations",
    "testType3": "other_operations",
    "testStringFalseLiteralAlsoConvertsToBoolean": "other_operations",
    "testLiteralDateTimeSecond": "other_operations",
    "testToInteger2": "conversion_operations",
    "testGreatorOrEqual11": "comparison_operations",
    "testStringUTCConvertsToDateTime": "other_operations",
    "testConformsTo2": "other_operations",
    "testEndsWith5": "string_operations",
    "txTest02": "other_operations",
    "testIntegerBooleanNotFalse": "other_operations",
    "testEndsWith8": "string_operations",
    "testEquivalent21": "comparison_operations",
    "testCollectionBoolean6": "boolean_operations",
    "testLiteralDecimalGreaterThanZeroTrue": "other_operations",
    "testPlusDate5": "date_time_operations",
    "testNotEquivalent10": "comparison_operations",
    "testWhere4": "collection_operations",
    "testSubstring8": "string_operations",
    "testFHIRPathAsFunction18": "other_operations",
    "testIif10": "other_operations",
    "testIif8": "other_operations",
    "testType14": "other_operations",
    "testHasTemplateId1": "other_operations",
    "testSecondOfDateTimeWithTimezone": "date_time_operations",
    "testStringQuantityMonthLiteralToQuantity": "other_operations",
    "testRepeatBasic": "collection_operations",
    "HighBoundaryDateTimeMillisecond2": "math_operations",
    "testDiv5": "math_operations",
    "testTake7": "collection_operations",
    "testCount2": "collection_operations",
    "testEndsWith10": "string_operations",
    "testStringDecimalLiteralConvertsToDecimal": "other_operations",
    "testDistinct5": "collection_operations",
    "testFirstLast1": "collection_operations",
    "testToday2": "date_time_operations",
    "testLessThan5": "comparison_operations",
    "testLessOrEqual20": "comparison_operations",
    "testToString3": "conversion_operations",
    "testTrace2": "other_operations",
    "testDiv3": "math_operations",
    "testFloor1": "math_operations",
    "testRepeatAllInfiniteConstant": "collection_operations",
    "PrecisionDecimal": "math_operations",
    "testFloorEmpty": "math_operations",
    "testStringIntegerLiteralToInteger": "other_operations",
    "testPlusDate6": "date_time_operations",
    "testFHIRPathIsFunction8": "other_operations",
    "testEquality21": "comparison_operations",
    "testPeriodInvariantNew": "date_time_operations",
    "HighBoundaryDateTimeMillisecond3": "math_operations",
    "testBooleanLiteralConvertsToInteger": "other_operations",
    "txTest01": "other_operations",
    "testStringMillisecondConvertsToTime": "other_operations",
    "testReplaceMatches2": "string_operations",
    "testRepeat5": "other_operations",
    "testEncodeBase64A": "conversion_operations",
    "yearOfLeapYear": "date_time_operations",
    "testSubSetOf2": "collection_operations",
    "testMod4": "math_operations",
    "testQuantity10": "other_operations",
    "testBooleanLogicOr7": "boolean_operations",
    "testToDateFromDate": "date_time_operations",
    "testUnion3": "collection_operations",
    "testNEquality16": "comparison_operations",
    "testGreatorOrEqual22": "comparison_operations",
    "testMod5": "math_operations",
    "LowBoundaryDecimal7": "math_operations",
    "testLiteralDecimal01": "other_operations",
    "testDollarThis2": "other_operations",
    "testLiteralDateDay": "other_operations",
    "testSubstring12": "string_operations",
    "testGreaterThan14": "comparison_operations",
    "testNEquality23": "comparison_operations",
    "LowBoundaryTimeMillisecond": "math_operations",
    "testGreatorOrEqual14": "comparison_operations",
    "testGreaterThan9": "comparison_operations",
    "testType8": "other_operations",
    "testType23": "other_operations",
    "testStringLiteralConvertsToInteger": "other_operations",
    "testGreaterThan4": "comparison_operations",
    "testEquality6": "comparison_operations",
    "testLessOrEqual21": "comparison_operations",
    "testEquivalent19": "comparison_operations",
    "testSkip2": "collection_operations",
    "testMinus3": "other_operations",
    "testStringDayConvertsToDateTime": "other_operations",
    "testFHIRPathAsFunction21": "other_operations",
    "defineVariable7": "other_operations",
    "testStringQuantityLiteralConvertsToQuantity": "other_operations",
    "txTest03": "other_operations",
    "testMatchesCaseSensitive2": "string_operations",
    "HighBoundaryDecimal14": "math_operations",
    "testNegativeIntegerLiteralConvertsToString": "other_operations",
    "testStringMinuteConvertsToDateTime": "other_operations",
    "testLiteralIntegerGreaterThan": "other_operations",
    "testGreatorOrEqual17": "comparison_operations",
    "testToInteger3": "conversion_operations",
    "testMatchesWithinUrl3": "string_operations",
    "testBooleanLiteralIsNotDecimal": "other_operations",
    "testIndexOf2": "string_operations",
    "testEncodeHex": "conversion_operations",
    "testDecimalLiteralToString": "other_operations",
    "LowBoundaryDateMonth": "math_operations",
    "testCount4": "collection_operations",
    "dvCantOverwriteSystemVar": "analyzer",
    "testComment5": "analyzer",
    "testGreaterThan24": "comparison_operations",
    "testMinus5": "date_time_operations",
    "testMultiplyEmpty1": "math_operations",
    "testDecimalLiteralToQuantity": "other_operations",
    "testPolymorphicsB": "analyzer",
    "testGreatorOrEqual7": "comparison_operations",
    "testToDecimal2": "conversion_operations",
    "testWhere1": "collection_operations",
    "testTruncate3": "math_operations",
    "testFalseLiteralConvertsToBoolean": "other_operations",
    "testPatientName": "integration_tests",
    "testDiv4": "math_operations",
    "testSecondOfDateTimeZero": "date_time_operations",
    "testUnion7": "collection_operations",
    "testDayOfCollectionOfDates": "date_time_operations",
    "testPrecedence2": "other_operations",
    "LowBoundaryDateTimeMillisecond3": "math_operations",
    "testSort8": "collection_operations",
    "from-zulip-1": "boolean_operations",
    "testBooleanLogicOr4": "boolean_operations",
    "testComment7": "analyzer",
    "testGreatorOrEqual23": "comparison_operations",
    "testLessOrEqual3": "comparison_operations",
    "testRepeat3": "other_operations",
    "testLiteralDecimal00": "other_operations",
    "testUnion8": "collection_operations",
    "testBooleanLogicXOr1": "boolean_operations",
    "testIntegerLiteralToBooleanEmpty": "other_operations",
    "testStringMonthConvertsToDate": "other_operations",
    "testSort1": "collection_operations",
    "testLessThan10": "comparison_operations",
    "testMultiply3": "math_operations",
    "testQuantity1": "other_operations",
    "testNotEquivalent7": "comparison_operations",
    "testPlusEmpty1": "other_operations",
    "testSort5": "collection_operations",
    "testIndexer2": "collection_operations",
    "testType12": "other_operations",
    "testGreaterThan1": "comparison_operations",
    "LowBoundaryNegDecimal3": "math_operations",
    "testToDateTimeInvalid": "date_time_operations",
    "testTake4": "collection_operations",
    "testSqrtEmpty": "math_operations",
    "testIntegerLiteralToQuantity": "other_operations",
    "testIntegerLiteralIsSystemInteger": "other_operations",
    "testTimezoneOffsetOfDateTimeNegative": "date_time_operations",
    "testBooleanLogicXOr4": "boolean_operations",
    "testUnion11": "collection_operations",
    "testTake1": "collection_operations",
    "HighBoundaryDateMonth": "math_operations",
    "testDecimalLiteralConvertsToQuantity": "other_operations",
    "testIntegerLiteralConvertsToBooleanFalse": "other_operations",
    "testIn3": "other_operations",
    "testDollarOrderAllowed": "other_operations",
    "testEquality4": "comparison_operations",
    "testLessOrEqualEmpty1": "comparison_operations",
    "testEquality15": "comparison_operations",
    "testEquivalent9": "comparison_operations",
    "testComment9": "analyzer",
    "PrecisionTimeMilliseconds": "math_operations",
    "testGreatorOrEqual2": "comparison_operations",
    "testStringLiteralToString": "other_operations",
    "testReplace4": "string_operations",
    "testType20": "other_operations",
    "testNEquality17": "comparison_operations",
    "testEquivalent3": "comparison_operations",
    "testPolymorphicsA": "analyzer",
    "testReplaceMatches3": "string_operations",
    "testContainsString5": "string_operations",
    "PrecisionDateTimeMilliseconds": "math_operations",
    "testInEmptyValue": "other_operations",
    "testStringIntegerLiteralIsNotQuantity": "other_operations",
    "testHasTemplateId3": "other_operations",
    "testSuperSetOf1": "collection_operations",
    "testAbs3": "math_operations",
    "testType6": "other_operations",
    "testDecimalLiteralIsNotQuantity": "other_operations",
    "testLiteralStringEscapes": "other_operations",
    "testLiteralDecimalLessThanInteger": "other_operations",
    "testSubstring1": "string_operations",
    "testUnescapeHtml": "conversion_operations",
    "testGreaterThan7": "comparison_operations",
    "testStringDecimalLiteralConvertsToQuantityFalse": "other_operations",
    "testNEquality5": "comparison_operations",
    "testFHIRPathIsFunction3": "other_operations",
    "testPlusDate10": "date_time_operations",
    "testSort9": "collection_operations",
    "testWhere3": "collection_operations",
    "testExists4": "collection_operations",
    "testCase1": "other_operations",
    "testAggregate1": "collection_operations",
    "testPlusDate20": "date_time_operations",
    "testFHIRPathAsFunction17": "other_operations",
    "testDistinct6": "collection_operations",
    "testDollarThis1": "other_operations",
    "testRepeatInfiniteConstant": "collection_operations",
    "testUnescapeJson": "conversion_operations",
    "testIndexOf1": "string_operations",
    "testNEquality22": "comparison_operations",
    "testRepeat2": "other_operations",
    "testLiteralDateTimeTZLess": "other_operations",
    "LowBoundaryDecimal6": "math_operations",
    "testPlusDate4": "date_time_operations",
    "testEquality2": "comparison_operations",
    "LowBoundaryDecimal2": "math_operations",
    "testToDateFromStringPartial": "date_time_operations",
    "LowBoundaryDecimal14": "math_operations",
    "testLiteralDateTimeYear": "other_operations",
    "HighBoundaryDecimal1": "math_operations",
    "defineVariable5": "other_operations",
    "testIndexOf4": "string_operations",
    "testDollarOrderNotAllowed": "analyzer",
    "testNEquality7": "comparison_operations",
    "testSubSetOf3": "collection_operations",
    "testMatchesWithinUrl4": "string_operations",
    "testDayOfDateFirstOfMonth": "date_time_operations",
    "testNotEquivalent20": "comparison_operations",
    "testBooleanLogicOr8": "boolean_operations",
    "testGreatorOrEqual20": "comparison_operations",
    "Comparable3": "math_operations",
    "testDateIsNotInteger": "other_operations",
    "testVariables1": "other_operations",
    "testLessThan21": "comparison_operations",
    "testResolveContained": "other_operations",
    "testSubstring3": "string_operations",
    "LowBoundaryNegDecimal2": "math_operations",
    "testEquality16": "comparison_operations",
    "testQuantityLiteralWkToString": "other_operations",
    "testTrace1": "other_operations",
    "testQuantity8": "other_operations",
    "testStartsWith12a": "analyzer",
    "testLessThan19": "comparison_operations",
    "testFHIRPathIsFunction6": "other_operations",
    "testWhere2": "collection_operations",
    "testStartsWithNonString1": "analyzer",
    "LowBoundaryDecimal9": "math_operations",
    "testIntegerLiteralIsNotQuantity": "other_operations",
    "testDivEmpty1": "math_operations",
    "testTypeA1": "other_operations",
    "testToDecimal1": "conversion_operations",
    "testSubSetOf1": "collection_operations",
    "testSkip3": "collection_operations",
    "testLessOrEqual26": "comparison_operations",
    "yearOfDate": "date_time_operations",
    "testDivEmpty2": "math_operations",
    "testMatchesWithinUrl1": "string_operations",
    "testDateTimeGreaterThanDate2": "other_operations",
    "testLn1": "math_operations",
    "testToInteger4": "conversion_operations",
    "testMonthOfDateTime": "date_time_operations",
    "testCount3": "collection_operations",
    "testLessThan1": "comparison_operations",
    "testLiteralTimeSecond": "other_operations",
    "testBooleanLiteralConvertsToQuantity": "other_operations",
    "testLessOrEqual14": "comparison_operations",
    "testGreatorOrEqual12": "comparison_operations",
    "HighBoundaryDecimal7": "math_operations",
    "testToDateFromStringYear": "date_time_operations",
    "LowBoundaryDecimal12": "math_operations",
    "testPlusDate1": "date_time_operations",
    "testPatientHasBirthDate": "other_operations",
    "testBooleanLiteralToString": "other_operations",
    "testNEquality14": "comparison_operations",
    "testDateNotEqualTimeMinute": "other_operations",
    "testMod2": "math_operations",
    "testPolymorphismA": "other_operations",
    "testQuantity2": "other_operations",
    "testGreatorOrEqualEmpty1": "comparison_operations",
    "testBooleanLogicXOr2": "boolean_operations",
    "testTypeA3": "other_operations",
    "yearOfFutureDate": "date_time_operations",
    "testContainsCollectionEmpty4": "collection_operations",
    "testEncodeUrlBase64": "conversion_operations",
    "testToString4": "conversion_operations",
    "testBooleanLiteralToDecimal": "other_operations",
    "testStringQuantityDayLiteralToQuantity": "other_operations",
    "testRepeatNoArguments": "collection_operations",
    "testDivide3": "math_operations",
    "testDecimalLiteralConvertsToBoolean": "other_operations",
    "testDollarOrderAllowedA": "other_operations",
    "testMultiplyEmpty2": "math_operations",
    "testStringIntegerLiteralIsNotDecimal": "other_operations",
    "testStringMillisecondConvertsToDateTime": "other_operations",
    "testDistinct2": "collection_operations",
    "testEquality24": "comparison_operations",
    "testBooleanLiteralConvertsToDecimal": "other_operations",
    "testConformsTo1": "other_operations",
    "testToString2": "type_operations",
    "testType4": "other_operations",
    "testStringDecimalConvertsToIntegerFalse": "other_operations",
    "testNotEquivalent11": "comparison_operations",
    "testSuperSetOf2": "collection_operations",
    "testLiteralDateTimeMinute": "other_operations",
    "testQuantity11": "other_operations",
    "LowBoundaryDecimal13": "math_operations",
    "testContainsString8": "string_operations",
    "testUnescapeHtmlBasic": "other_operations",
    "testIntersect4": "collection_operations",
    "testEquivalent14": "comparison_operations",
    "testFHIRPathAsFunction12": "other_operations",
    "testEquivalent16": "comparison_operations",
    "testNotEquivalent14": "comparison_operations",
    "testFHIRPathAsFunction13": "other_operations",
    "testGreaterThan10": "comparison_operations",
    "dvUsageOutsideScopeThrows": "analyzer",
    "testBooleanLogicAnd4": "boolean_operations",
    "testIif11": "other_operations",
    "testDivideEmpty3": "math_operations",
    "testExp3": "math_operations",
    "testLessOrEqual27": "comparison_operations",
    "testLiteralTrue": "other_operations",
    "testTimezoneOffsetOfDateTimePositiveMinutes": "date_time_operations",
    "testGreatorOrEqual16": "comparison_operations",
    "testSecondOfDateTimeMax": "date_time_operations",
    "testSimpleFail": "analyzer",
    "testQuantityLiteralConvertsToString": "other_operations",
    "testPower2": "math_operations",
    "testSecondOfCollectionOfDateTimes": "date_time_operations",
    "testLiteralDateTimeTimezoneOffset": "other_operations",
    "testMinuteOfDateTimeWithTimezone": "date_time_operations",
    "testUnion10": "collection_operations",
    "testAbs1": "math_operations",
    "testRepeatInfiniteLoop": "collection_operations",
    "testAbsEmpty": "math_operations",
    "testCase2": "other_operations",
    "testGreaterThanEmpty2": "comparison_operations",
    "testHourOfDateTime": "date_time_operations",
    "LowBoundaryQuantity": "math_operations",
    "testType2a": "other_operations",
    "testIntegerLiteralToInteger": "other_operations",
    "testRepeat1": "other_operations",
    "testLiteralTimeMinute": "other_operations",
    "defineVariable8": "other_operations",
    "testContainsString3": "string_operations",
    "testSubstring2": "string_operations",
    "testDayOfLeapYear": "date_time_operations",
    "testStringMonthConvertsToDateTime": "other_operations",
    "testTrim3": "string_operations",
    "testGreaterThan21": "comparison_operations",
    "testBooleanLogicAnd6": "boolean_operations",
    "testCombine3": "other_operations",
    "testEquality28": "comparison_operations",
    "testTruncateEmpty": "math_operations",
    "testStringHourConvertsToTime": "other_operations",
    "testDateNotEqualTimeSecond": "other_operations",
    "testBooleanImplies3": "boolean_operations",
    "defineVariable12": "analyzer",
    "testEquality27": "comparison_operations",
    "dvRedefiningVariableThrowsError": "analyzer",
    "HighBoundaryDecimal2": "math_operations",
    "testNEquality8": "comparison_operations",
    "testLessOrEqual12": "comparison_operations",
    "testCase4": "other_operations",
    "testSplit2": "string_operations",
    "LowBoundaryDecimal4": "math_operations",
    "testLessThan2": "comparison_operations",
    "testLessOrEqual10": "comparison_operations",
    "testNotEquivalent18": "comparison_operations",
    "testNEquality4": "comparison_operations",
    "testRepeatDeduplication": "collection_operations",
    "testNotEquivalent21": "comparison_operations",
    "testIntegerLiteralConvertsToDecimal": "other_operations",
    "testAggregate2": "collection_operations",
    "testRepeatSingleArgument": "collection_operations",
    "HighBoundaryDecimal15": "math_operations",
    "testGreaterThan25": "comparison_operations",
    "testContainsCollection2": "collection_operations",
    "testPlusDate15": "date_time_operations",
    "testLiteralDateTimeMonth": "other_operations",
    "testDiv1": "math_operations",
    "trivial": "math_operations",
    "testMatchesEmpty3": "string_operations",
    "testBooleanLiteralConvertsToString": "other_operations",
    "testResolveBundle": "other_operations",
    "testExists1": "collection_operations",
    "testSubstring11": "string_operations",
    "testReplace6": "string_operations",
    "testGreaterThan17": "comparison_operations",
    "testIntersect3": "collection_operations",
    "testGreatorOrEqual13": "comparison_operations",
    "testNEquality9": "comparison_operations",
    "testEquality23": "comparison_operations",
    "testEscapeUnescapeRoundTrip": "other_operations",
    "LowBoundaryNegDecimal4": "math_operations",
    "testDivEmpty3": "math_operations",
    "testRepeatAllIncompatibleArithmetic": "collection_operations",
    "testContainsCollectionEmptyDateTime": "collection_operations",
    "dvConceptMapExample": "other_operations",
    "testReplaceMatches4": "string_operations",
    "testCollectionBoolean4": "boolean_operations",
    "testLessThan6": "comparison_operations",
    "testLiteralIntegerLessThanPolarityFalse": "other_operations",
    "testSimpleWithWrongContext": "analyzer",
    "LowBoundaryNegDecimal1": "math_operations",
    "testSort2": "collection_operations",
    "testGreatorOrEqual21": "comparison_operations",
    "testFHIRPathIsFunction5": "other_operations",
    "testMod3": "math_operations",
    "testBooleanLogicAnd8": "boolean_operations",
    "testLiteralQuantityDecimal": "other_operations",
    "testGreaterThan6": "comparison_operations",
    "testDayOfDateMiddleOfMonth": "date_time_operations",
    "testRepeatAllFiniteSequence": "collection_operations",
    "testLiteralIntegerEqual": "other_operations",
    "testDecimalLiteralToDecimalEqual": "other_operations",
    "testLog1": "math_operations",
    "testRepeatAllBasic": "collection_operations",
    "testLiteralDateTimeTZEqualTrue": "other_operations",
    "testGreatorOrEqual27": "comparison_operations",
    "testBooleanLiteralToInteger": "other_operations",
    "testQuantity6": "other_operations",
    "testMatchesEmpty2": "string_operations",
    "testInEmptyBoth": "other_operations",
    "testPlusEmpty2": "other_operations",
    "testGreaterThan16": "comparison_operations",
    "testMatchesCaseSensitive1": "string_operations",
    "LowBoundaryNegDecimal5": "math_operations",
    "testMatchesFullWithinUrl3": "string_operations",
    "HighBoundaryDecimal11": "math_operations",
    "testGreaterThan15": "comparison_operations",
    "testLiteralString2": "other_operations",
    "testComment3": "analyzer",
    "LowBoundaryDecimal15": "math_operations",
    "testSqrt2": "math_operations",
    "testGreaterThan8": "comparison_operations",
    "testGreaterThanEmpty1": "comparison_operations",
    "testLiteralIntegerNegative1": "other_operations",
    "testBooleanImplies7": "boolean_operations",
    "testMinuteOfCollectionOfDateTimes": "date_time_operations",
    "testPlusEmpty3": "other_operations",
    "testGreatorOrEqual10": "comparison_operations",
    "HighBoundaryDecimal4": "math_operations",
    "testGreaterThan20": "comparison_operations",
    "testStringSecondConvertsToDateTime": "other_operations",
    "testLessOrEqual2": "comparison_operations",
    "testLessOrEqualEmpty3": "comparison_operations",
    "testPolymorphismIsA3": "other_operations",
    "testTrim4": "string_operations",
    "testLessThan27": "comparison_operations",
    "testGreaterThan22": "comparison_operations",
    "testEquivalent17": "comparison_operations",
    "testSort7": "collection_operations",
    "testTail2": "collection_operations",
    "testEquivalent4": "comparison_operations",
    "testNotEquivalent1": "comparison_operations",
    "testEquality9": "comparison_operations",
    "testPlusDate18": "date_time_operations",
    "HighBoundaryDateTimeMillisecond1": "math_operations",
    "defineVariable16": "analyzer",
    "defineVariable6": "other_operations",
    "testGreaterThan3": "comparison_operations",
    "testReplaceMatches1": "string_operations",
    "testLessThan20": "comparison_operations",
    "testLessOrEqual15": "comparison_operations",
    "testBooleanImplies9": "boolean_operations",
    "testIif9": "other_operations",
    "testExclude4": "collection_operations",
    "testGreatorOrEqual19": "comparison_operations",
    "testStartsWith1": "string_operations",
    "testIntegerLiteralConvertsToString": "other_operations",
    "testDecodeBase64A": "conversion_operations",
    "testMinus1": "other_operations",
    "testAbs2": "math_operations",
    "defineVariable3": "other_operations",
    "testContainsCollectionEmpty1": "collection_operations",
    "testFHIRPathAsFunction24": "other_operations",
    "testIif7": "other_operations",
    "testLessThan26": "comparison_operations",
    "testComment6": "analyzer",
    "testFloor2": "math_operations",
    "testFHIRPathAsFunction19": "other_operations",
    "testSelect3": "collection_operations",
    "testGreaterThanEmpty3": "comparison_operations",
    "testStringQuantityYearLiteralToQuantity": "other_operations",
    "testGreaterThan19": "comparison_operations",
    "testDistinct3": "collection_operations",
    "testAllTrue4": "collection_operations",
    "testIntegerLiteralConvertsToBoolean": "other_operations",
    "yearOfCollectionOfDates": "date_time_operations",
    "testBooleanLogicXOr3": "boolean_operations",
    "testLessThanEmpty1": "comparison_operations",
    "testHourOfDateTimeWithTimezone": "date_time_operations",
    "testSingle1": "collection_operations",
    "testMinus8": "date_time_operations",
    "HighBoundaryTimeMillisecond": "math_operations",
    "testGreatorOrEqual9": "comparison_operations",
    "testRepeatAllSimpleProjection": "collection_operations",
    "testCombine2": "other_operations",
    "testDateNotEqualTimezoneOffsetBefore": "other_operations",
    "testEndsWith4": "string_operations",
    "testPlusDate7": "date_time_operations",
    "testAggregate3": "collection_operations",
    "testLiteralIntegerNegative1Invalid": "other_operations",
    "testDecodeUrlBase64": "conversion_operations",
    "testPlusTime1": "date_time_operations",
    "testPlus3": "other_operations",
    "testLiteralString1": "other_operations",
    "testLessOrEqual6": "comparison_operations",
    "testPlusDate2": "date_time_operations",
    "testLiteralIntegerLessThanTrue": "other_operations",
    "testSimpleBackTick1": "other_operations",
    "testBooleanImplies5": "boolean_operations",
    "testLiteralTimeHour": "other_operations",
    "testIif1": "other_operations",
    "testIntegerLiteralToBoolean": "other_operations",
    "testLessThan8": "comparison_operations",
    "testNotEquivalent17": "comparison_operations",
    "testIndexOf3": "string_operations",
    "testDivideEmpty2": "math_operations",
    "testQuantity5": "other_operations",
    "testBooleanImplies2": "boolean_operations",
    "testCollectionNotEqualEmpty": "other_operations",
    "testType2": "other_operations",
    "testSort6": "collection_operations",
    "testExtension3": "other_operations",
    "testCombine1": "other_operations",
    "testDivide4": "math_operations",
    "testIif4": "other_operations",
    "PrecisionYear": "math_operations",
    "testBooleanImplies1": "boolean_operations",
    "testStringYearConvertsToDate": "other_operations",
    "testIntegerLiteralConvertsToQuantity": "other_operations",
    "testStringQuantityWeekLiteralToQuantity": "other_operations",
    "testDateGreaterThanDate": "other_operations",
    "testLiteralDateMonth": "other_operations",
    "testEquality8": "comparison_operations",
    "testPrecedence5": "other_operations",
    "testLessThan22": "comparison_operations",
    "testEquality3": "comparison_operations",
    "testStartsWith7": "string_operations",
    "testRepeatAllInfiniteLoop": "collection_operations",
    "testToString5": "conversion_operations",
    "LowBoundaryDecimal5": "math_operations",
    "testCollectionNotEmpty": "other_operations",
    "testPolymorphismIsA1": "other_operations",
    "testIn5": "other_operations",
    "testLessThan9": "comparison_operations",
    "testStringQuantityWeekConvertsToQuantityFalse": "other_operations",
    "testModEmpty1": "math_operations",
    "testAllTrue2": "collection_operations",
    "testGreaterThan11": "comparison_operations",
    "testEquality19": "comparison_operations",
    "testType11": "other_operations",
    "testLiteralUnicode": "other_operations",
    "LowBoundaryDecimalDefault": "math_operations",
    "testStringIntegerLiteralConvertsToDecimal": "other_operations",
    "testNEquality13": "comparison_operations",
    "testBooleanLogicAnd9": "boolean_operations",
    "testEndsWith1": "string_operations",
    "testSimple": "other_operations",
    "testNEquality18": "comparison_operations",
    "testLength1": "string_operations",
    "testPlus5": "other_operations",
    "testLnEmpty": "math_operations",
    "testEquivalent2": "comparison_operations",
    "testEquality14": "comparison_operations",
    "testRepeatSimpleProjection": "collection_operations",
    "testLessOrEqual23": "comparison_operations",
    "from-zulip-2": "boolean_operations",
    "testPlusDate22": "date_time_operations",
    "testIntersect2": "collection_operations",
    "testEquivalent18": "comparison_operations",
    "testLessOrEqual11": "comparison_operations",
    "testPlusTime2": "date_time_operations",
    "testLessOrEqual25": "comparison_operations",
    "testDateNotEqualUTC": "other_operations",
    "testLessThan25": "comparison_operations",
    "testQuantity7": "other_operations",
    "testLiteralInteger1": "other_operations",
    "testIif6": "analyzer",
    "testNEquality1": "comparison_operations",
    "testLiteralDateTimeHour": "other_operations",
    "testMinuteOfDateTime": "date_time_operations",
    "testFHIRPathIsFunction9": "other_operations",
    "HighBoundaryDecimal16": "math_operations",
    "testPrecedence1": "other_operations",
    "testUnion9": "collection_operations",
    "testLog2": "math_operations",
    "testReplaceMatches5": "string_operations",
    "testEquivalent7": "comparison_operations",
    "testToDateTimeFromDateTime": "date_time_operations",
    "testPlusDate12": "date_time_operations",
    "testBooleanLogicAnd5": "boolean_operations",
    "testExpressionsEqual": "other_operations",
    "testMinuteOfDateTimeZero": "date_time_operations",
    "testTruncate2": "math_operations",
    "LowBoundaryDateTimeMillisecond2": "math_operations",
    "testBooleanLiteralIsNotInteger": "other_operations",
    "testLessOrEqual24": "comparison_operations",
    "testNotEquivalent22": "comparison_operations",
    "testMod1": "math_operations",
    "HighBoundaryDecimal10": "math_operations",
    "HighBoundaryDecimal5": "math_operations",
    "testMatchesFullWithinUrl2": "string_operations",
    "testPlusDate8": "date_time_operations",
    "testLiteralDecimalGreaterThanNonZeroTrue": "other_operations",
    "testComment8": "analyzer",
    "testCase3": "other_operations",
    "testDateNotEqualToday": "other_operations",
    "testBooleanLogicAnd2": "boolean_operations",
    "testJoin": "other_operations",
    "testLiteralDateYear": "other_operations",
    "testLength5": "string_operations",
    "testNotEquivalent8": "comparison_operations",
    "HighBoundaryDecimalDefault": "math_operations",
    "testStartsWith3": "string_operations",
    "testType22": "other_operations",
    "testLiteralTimeMillisecond": "other_operations",
    "LowBoundaryDateTimeMillisecond1": "math_operations",
    "testTake6": "collection_operations",
    "testEquality17": "comparison_operations",
    "testUnion4": "collection_operations",
    "testSimpleNone": "other_operations",
    "testLength6": "string_operations",
    "testConcatenate3": "string_operations",
    "testLessThan12": "comparison_operations",
    "testFHIRPathIsFunction1": "other_operations"
  }
}