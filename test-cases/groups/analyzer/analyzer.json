{
  "name": "analyzer",
  "category": "analyzer",
  "subcategory": "semantic_errors",
  "description": "Test cases for semantic analysis and validation failures",
  "source": "fhir-test-cases r5",
  "tests": [
    {
      "name": "testPlus6",
      "expression": "@1974-12-25 + 7",
      "input": {},
      "inputfile": null,
      "expected": [],
      "tags": [
        "r5-xml",
        "analyzer"
      ],
      "expectError": true,
      "invalidKind": "semantic",
      "description": "Invalid date arithmetic operation"
    },
    {
      "name": "testStartsWith12a",
      "expression": "'987654321'.startsWith(length().toString())",
      "input": {},
      "inputfile": null,
      "expected": [],
      "tags": [
        "r5-xml",
        "analyzer"
      ],
      "expectError": true,
      "invalidKind": "semantic",
      "description": "Invalid context for string function call"
    },
    {
      "name": "testStartsWithNonString1",
      "expression": "Appointment.identifier.startsWith('rand')",
      "input": null,
      "inputfile": "appointment-examplereq.json",
      "expected": [],
      "tags": [
        "r5-xml",
        "analyzer"
      ],
      "expectError": true,
      "invalidKind": "semantic",
      "description": "String function called on non-string type"
    },
    {
      "name": "defineVariable9",
      "expression": "defineVariable('n1', name.first()).active | defineVariable('n2', name.skip(1).first()).select(%n1.given)",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [],
      "tags": [
        "r5-xml",
        "analyzer"
      ],
      "description": "use of a variable outside context throws error",
      "expectError": true,
      "invalidKind": "semantic"
    },
    {
      "name": "defineVariable10",
      "expression": "select(%fam.given)",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [],
      "tags": [
        "r5-xml",
        "analyzer"
      ],
      "description": "use undefined variable throws error",
      "expectError": true,
      "invalidKind": "semantic"
    },
    {
      "name": "dvRedefiningVariableThrowsError",
      "expression": "defineVariable('v1').defineVariable('v1').select(%v1)",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [],
      "tags": [
        "r5-xml",
        "analyzer"
      ],
      "expectError": true,
      "invalidKind": "semantic",
      "description": "Attempting to redefine an already defined variable"
    },
    {
      "name": "defineVariable12",
      "expression": "Patient.name.defineVariable('n1', first()).active | Patient.name.defineVariable('n2', skip(1).first()).select(%n1.given)",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [],
      "tags": [
        "r5-xml",
        "analyzer"
      ],
      "description": "defineVariable() could not be the first child",
      "expectError": true,
      "invalidKind": "semantic"
    },
    {
      "name": "defineVariable16",
      "expression": "defineVariable('root', 'r1-').select(defineVariable('v1', 'v1').defineVariable('v2', 'v2').select(%v1 | %v2)).select(%root & $this & %v1)",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [],
      "tags": [
        "r5-xml",
        "analyzer"
      ],
      "description": "multi-tree vars exception",
      "expectError": true,
      "invalidKind": "semantic"
    },
    {
      "name": "dvCantOverwriteSystemVar",
      "expression": "defineVariable('context', 'oops')",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [],
      "tags": [
        "r5-xml",
        "analyzer"
      ],
      "expectError": true,
      "invalidKind": "semantic",
      "description": "Attempting to overwrite system variable"
    },
    {
      "name": "dvUsageOutsideScopeThrows",
      "expression": "defineVariable('n1', 'v1').active | defineVariable('n2', 'v2').select(%n1)",
      "input": {},
      "inputfile": null,
      "expected": [],
      "tags": [
        "r5-xml",
        "analyzer"
      ],
      "description": "use of a variable outside context throws error",
      "expectError": true,
      "invalidKind": "semantic"
    },
    {
      "name": "testIif6",
      "expression": "iif('non boolean criteria', 'true-result', 'false-result')",
      "input": {},
      "inputfile": null,
      "expected": [
        "true-result"
      ],
      "tags": [
        "r5-xml",
        "analyzer"
      ],
      "description": "Contested: nothing in the spec about what to do with non-boolean criteria - mixed results from engines",
      "expectError": true,
      "invalidKind": "semantic",
      "mode": "strict",
      "outputTypes": [
        "string"
      ]
    },
    {
      "name": "testSimpleFail",
      "expression": "name.given1",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [],
      "tags": [
        "r5-xml",
        "analyzer"
      ],
      "expectError": true,
      "invalidKind": "semantic"
    },
    {
      "name": "testSimpleWithWrongContext",
      "expression": "Encounter.name.given",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [],
      "tags": [
        "r5-xml",
        "analyzer"
      ],
      "expectError": true,
      "invalidKind": "semantic"
    },
    {
      "name": "testPolymorphismB",
      "expression": "Observation.valueQuantity.unit",
      "input": null,
      "inputfile": "observation-example.json",
      "expected": [
        "lbs"
      ],
      "tags": [
        "r5-xml",
        "analyzer"
      ],
      "expectError": true,
      "invalidKind": "semantic",
      "outputTypes": [
        "string"
      ]
    },
    {
      "name": "testPolymorphismAsB",
      "expression": "(Observation.value as Period).unit",
      "input": null,
      "inputfile": "observation-example.json",
      "expected": [],
      "tags": [
        "r5-xml",
        "analyzer"
      ],
      "expectError": true,
      "invalidKind": "semantic"
    },
    {
      "name": "testDollarOrderNotAllowed",
      "expression": "Patient.children().skip(1)",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [],
      "tags": [
        "r5-xml",
        "analyzer"
      ],
      "expectError": true,
      "invalidKind": "semantic"
    },
    {
      "name": "testPlus6",
      "expression": "@1974-12-25 + 7",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [],
      "tags": [
        "r5-xml",
        "analyzer"
      ],
      "expectError": true,
      "invalidKind": "semantic"
    },
    {
      "name": "testComment1",
      "expression": "2 + 2 // This is a single-line comment + 4",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        4
      ],
      "tags": [
        "r5-xml",
        "comments"
      ],
      "outputTypes": [
        "integer"
      ],
      "category": "analyzer",
      "subcategory": "syntax"
    },
    {
      "name": "testComment2",
      "expression": "// This is a multi line comment using // that\n  // should not fail during parsing\n  2+2",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        4
      ],
      "tags": [
        "r5-xml",
        "comments"
      ],
      "outputTypes": [
        "integer"
      ],
      "category": "analyzer",
      "subcategory": "syntax"
    },
    {
      "name": "testComment3",
      "expression": "2 + 2 \n      /*\nThis is a multi-line comment\nAny text enclosed within is ignored\n+2\n*/",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        4
      ],
      "tags": [
        "r5-xml",
        "comments"
      ],
      "outputTypes": [
        "integer"
      ],
      "category": "analyzer",
      "subcategory": "syntax"
    },
    {
      "name": "testComment4",
      "expression": "2 + 2 \n      /*\nThis is a multi-line comment\nAny text enclosed within is ignored\n*/\n+2",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        6
      ],
      "tags": [
        "r5-xml",
        "comments"
      ],
      "outputTypes": [
        "integer"
      ],
      "category": "analyzer",
      "subcategory": "syntax"
    },
    {
      "name": "testComment5",
      "expression": "/*\nThis is a multi-line comment\nAny text enclosed within is ignored\n*/\n2+2",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        4
      ],
      "tags": [
        "r5-xml",
        "comments"
      ],
      "outputTypes": [
        "integer"
      ],
      "category": "analyzer",
      "subcategory": "syntax"
    },
    {
      "name": "testComment6",
      "expression": "2 // comment\n/ 2",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        1.0
      ],
      "tags": [
        "r5-xml",
        "comments"
      ],
      "outputTypes": [
        "decimal"
      ],
      "category": "analyzer",
      "subcategory": "syntax"
    },
    {
      "name": "testComment7",
      "expression": "2 + 2 /",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [],
      "tags": [
        "r5-xml",
        "comments"
      ],
      "expectError": true,
      "invalidKind": "syntax",
      "category": "analyzer",
      "subcategory": "syntax"
    },
    {
      "name": "testComment8",
      "expression": "2 + 2 /* not finished",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [],
      "tags": [
        "r5-xml",
        "comments"
      ],
      "expectError": true,
      "invalidKind": "syntax",
      "category": "analyzer",
      "subcategory": "syntax"
    },
    {
      "name": "testComment9",
      "expression": "2 + /* inline $@%^+ * */ 2 = 4",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "comments"
      ],
      "outputTypes": [
        "boolean"
      ],
      "category": "analyzer",
      "subcategory": "syntax"
    },
    {
      "name": "testPolymorphicsA",
      "expression": "Observation.value.exists()",
      "input": null,
      "inputfile": "observation-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "polymorphics"
      ],
      "outputTypes": [
        "boolean"
      ],
      "category": "analyzer",
      "subcategory": "semantic",
      "description": "Polymorphic field access (valid case)"
    },
    {
      "name": "testPolymorphicsB",
      "expression": "Observation.valueQuantity.exists()",
      "input": null,
      "inputfile": "observation-example.json",
      "expected": [
        false
      ],
      "tags": [
        "r5-xml",
        "polymorphics"
      ],
      "expectError": true,
      "invalidKind": "semantic",
      "outputTypes": [
        "boolean"
      ],
      "category": "analyzer",
      "subcategory": "semantic",
      "description": "Polymorphic field access (semantic error)"
    }
  ]
}