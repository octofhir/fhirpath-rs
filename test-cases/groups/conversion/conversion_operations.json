{
  "name": "conversion_operations",
  "description": "Type conversion and encoding/decoding operation tests",
  "source": "fhir-test-cases r5",
  "category": "conversion",
  "tests": [
    {
      "name": "testToDecimal1",
      "expression": "'1'.toDecimal() = 1",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testToDecimal"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "type_conversion",
      "description": "Convert string to decimal basic case"
    },
    {
      "name": "testToDecimal2",
      "expression": "'-1'.toInteger() = -1",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testToDecimal"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "type_conversion",
      "description": "Convert negative string to integer"
    },
    {
      "name": "testToDecimal3",
      "expression": "'0'.toDecimal() = 0",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testToDecimal"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "type_conversion",
      "description": "Convert zero string to decimal"
    },
    {
      "name": "testToDecimal4",
      "expression": "'0.0'.toDecimal() = 0.0",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testToDecimal"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "type_conversion",
      "description": "Convert decimal string to decimal"
    },
    {
      "name": "testToDecimal5",
      "expression": "'st'.toDecimal().empty()",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testToDecimal"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "type_conversion",
      "description": "Convert invalid string to decimal (empty result)"
    },
    {
      "name": "testToString1",
      "expression": "1.toString() = '1'",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testToString"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "type_conversion",
      "description": "Convert integer to string"
    },
    {
      "name": "testToString2",
      "expression": "'-1'.toInteger() = -1",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testToString"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "type_conversion",
      "description": "Convert negative string to integer"
    },
    {
      "name": "testToString3",
      "expression": "0.toString() = '0'",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testToString"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "type_conversion",
      "description": "Convert zero to string"
    },
    {
      "name": "testToString4",
      "expression": "0.0.toString() = '0.0'",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testToString"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "type_conversion",
      "description": "Convert decimal to string"
    },
    {
      "name": "testToString5",
      "expression": "@2014-12-14.toString() = '2014-12-14'",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testToString"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "type_conversion",
      "description": "Convert date to string"
    },
    {
      "name": "testToInteger1",
      "expression": "'1'.toInteger() = 1",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testToInteger"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "type_conversion",
      "description": "Convert string to integer basic case"
    },
    {
      "name": "testToInteger2",
      "expression": "'-1'.toInteger() = -1",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testToInteger"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "type_conversion",
      "description": "Convert negative string to integer"
    },
    {
      "name": "testToInteger3",
      "expression": "'0'.toInteger() = 0",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testToInteger"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "type_conversion",
      "description": "Convert zero string to integer"
    },
    {
      "name": "testToInteger4",
      "expression": "'0.0'.toInteger().empty()",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testToInteger"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "type_conversion",
      "description": "Convert decimal string to integer (empty result)"
    },
    {
      "name": "testToInteger5",
      "expression": "'st'.toInteger().empty()",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testToInteger"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "type_conversion",
      "description": "Convert invalid string to integer (empty result)"
    },
    {
      "name": "testEncodeBase64A",
      "expression": "'test'.encode('base64')",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        "dGVzdA=="
      ],
      "tags": [
        "r5-xml",
        "testEncodeDecode"
      ],
      "outputTypes": [
        "string"
      ],
      "subcategory": "encoding",
      "description": "Encode string to base64"
    },
    {
      "name": "testEncodeHex",
      "expression": "'test'.encode('hex')",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        "74657374"
      ],
      "tags": [
        "r5-xml",
        "testEncodeDecode"
      ],
      "outputTypes": [
        "string"
      ],
      "subcategory": "encoding",
      "description": "Encode string to hexadecimal"
    },
    {
      "name": "testEncodeBase64B",
      "expression": "'subjects?_d'.encode('base64')",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        "c3ViamVjdHM/X2Q="
      ],
      "tags": [
        "r5-xml",
        "testEncodeDecode"
      ],
      "outputTypes": [
        "string"
      ],
      "subcategory": "encoding",
      "description": "Encode complex string to base64"
    },
    {
      "name": "testEncodeUrlBase64",
      "expression": "'subjects?_d'.encode('urlbase64')",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        "c3ViamVjdHM_X2Q="
      ],
      "tags": [
        "r5-xml",
        "testEncodeDecode"
      ],
      "outputTypes": [
        "string"
      ],
      "subcategory": "encoding",
      "description": "Encode string to URL-safe base64"
    },
    {
      "name": "testDecodeBase64A",
      "expression": "'dGVzdA=='.decode('base64')",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        "test"
      ],
      "tags": [
        "r5-xml",
        "testEncodeDecode"
      ],
      "outputTypes": [
        "string"
      ],
      "subcategory": "encoding",
      "description": "Decode base64 to string"
    },
    {
      "name": "testDecodeHex",
      "expression": "'74657374'.decode('hex')",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        "test"
      ],
      "tags": [
        "r5-xml",
        "testEncodeDecode"
      ],
      "outputTypes": [
        "string"
      ],
      "subcategory": "encoding",
      "description": "Decode hexadecimal to string"
    },
    {
      "name": "testDecodeBase64B",
      "expression": "'c3ViamVjdHM/X2Q='.decode('base64')",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        "subjects?_d"
      ],
      "tags": [
        "r5-xml",
        "testEncodeDecode"
      ],
      "outputTypes": [
        "string"
      ],
      "subcategory": "encoding",
      "description": "Decode complex base64 to string"
    },
    {
      "name": "testDecodeUrlBase64",
      "expression": "'c3ViamVjdHM_X2Q='.decode('urlbase64')",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        "subjects?_d"
      ],
      "tags": [
        "r5-xml",
        "testEncodeDecode"
      ],
      "outputTypes": [
        "string"
      ],
      "subcategory": "encoding",
      "description": "Decode URL-safe base64 to string"
    },
    {
      "name": "testEscapeHtml",
      "expression": "'\"1&lt;2\"'.escape('html')",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        "&quot;1&amp;lt;2&quot;"
      ],
      "tags": [
        "r5-xml",
        "testEscapeUnescape"
      ],
      "outputTypes": [
        "string"
      ],
      "subcategory": "escaping",
      "description": "Escape HTML entities"
    },
    {
      "name": "testEscapeJson",
      "expression": "'\"1&lt;2\"'.escape('json')",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        "\\\"1&lt;2\\\""
      ],
      "tags": [
        "r5-xml",
        "testEscapeUnescape"
      ],
      "outputTypes": [
        "string"
      ],
      "subcategory": "escaping",
      "description": "Escape JSON entities"
    },
    {
      "name": "testUnescapeHtml",
      "expression": "'&quot;1&lt;2&quot;'.unescape('html')",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        "\"1<2\""
      ],
      "tags": [
        "r5-xml",
        "testEscapeUnescape"
      ],
      "outputTypes": [
        "string"
      ],
      "subcategory": "escaping",
      "description": "Unescape HTML entities"
    },
    {
      "name": "testUnescapeJson",
      "expression": "'\\\"1&lt;2\\\"'.unescape('json')",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        "\"1&lt;2\""
      ],
      "tags": [
        "r5-xml",
        "testEscapeUnescape"
      ],
      "outputTypes": [
        "string"
      ],
      "subcategory": "escaping",
      "description": "Unescape JSON entities"
    }
  ]
}