{
  "name": "collection_operations",
  "description": "Collection operation tests including filtering, selection, aggregation, set operations, and ordering",
  "source": "fhir-test-cases r5",
  "category": "collection",
  "tests": [
    {
      "name": "testAllTrue1",
      "expression": "Patient.name.select(given.exists()).allTrue()",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testAll"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "aggregation",
      "description": "allTrue function with select operation"
    },
    {
      "name": "testAllTrue2",
      "expression": "Patient.name.select(period.exists()).allTrue()",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        false
      ],
      "tags": [
        "r5-xml",
        "testAll"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "aggregation",
      "description": "allTrue function returning false"
    },
    {
      "name": "testAllTrue3",
      "expression": "Patient.name.all(given.exists())",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testAll"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "aggregation",
      "description": "all function with condition"
    },
    {
      "name": "testAllTrue4",
      "expression": "Patient.name.all(period.exists())",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        false
      ],
      "tags": [
        "r5-xml",
        "testAll"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "aggregation",
      "description": "all function returning false"
    },
    {
      "name": "testSelect1",
      "expression": "Patient.name.select(given).count() = 5",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testSelect"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "filtering",
      "description": "select operation with count"
    },
    {
      "name": "testSelect2",
      "expression": "Patient.name.select(given | family).count() = 7",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testSelect"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "filtering",
      "description": "select operation with union"
    },
    {
      "name": "testSelect3",
      "expression": "name.select(use.contains('i')).count()",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        3
      ],
      "tags": [
        "r5-xml",
        "testSelect"
      ],
      "outputTypes": [
        "integer"
      ],
      "subcategory": "filtering",
      "description": "select with contains condition"
    },
    {
      "name": "testWhere1",
      "expression": "Patient.name.count() = 3",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testWhere"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "aggregation",
      "description": "count operation baseline"
    },
    {
      "name": "testWhere2",
      "expression": "Patient.name.where(given = 'Jim').count() = 1",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testWhere"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "filtering",
      "description": "where clause with equality condition"
    },
    {
      "name": "testWhere3",
      "expression": "Patient.name.where(given = 'X').count() = 0",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testWhere"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "filtering",
      "description": "where clause with no matches"
    },
    {
      "name": "testWhere4",
      "expression": "Patient.name.where($this.given = 'Jim').count() = 1",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testWhere"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "filtering",
      "description": "where clause with $this context"
    },
    {
      "name": "testDistinct1",
      "expression": "(1 | 2 | 3).isDistinct()",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testDistinct"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "set_operations",
      "description": "isDistinct with distinct values"
    },
    {
      "name": "testDistinct2",
      "expression": "Questionnaire.descendants().linkId.isDistinct()",
      "input": null,
      "inputfile": "questionnaire-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testDistinct"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "set_operations",
      "description": "isDistinct with complex path"
    },
    {
      "name": "testDistinct3",
      "expression": "Questionnaire.descendants().linkId.select(substring(0,1)).isDistinct().not()",
      "input": null,
      "inputfile": "questionnaire-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testDistinct"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "set_operations",
      "description": "isDistinct with non-distinct values"
    },
    {
      "name": "testDistinct4",
      "expression": "(1 | 2 | 3).distinct()",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        1,
        2,
        3
      ],
      "tags": [
        "r5-xml",
        "testDistinct"
      ],
      "outputTypes": [
        "integer",
        "integer",
        "integer"
      ],
      "subcategory": "set_operations",
      "description": "distinct function returning values"
    },
    {
      "name": "testDistinct5",
      "expression": "Questionnaire.descendants().linkId.distinct().count()",
      "input": null,
      "inputfile": "questionnaire-example.json",
      "expected": [
        10
      ],
      "tags": [
        "r5-xml",
        "testDistinct"
      ],
      "outputTypes": [
        "integer"
      ],
      "subcategory": "set_operations",
      "description": "distinct with count"
    },
    {
      "name": "testDistinct6",
      "expression": "Questionnaire.descendants().linkId.select(substring(0,1)).distinct().count()",
      "input": null,
      "inputfile": "questionnaire-example.json",
      "expected": [
        2
      ],
      "tags": [
        "r5-xml",
        "testDistinct"
      ],
      "outputTypes": [
        "integer"
      ],
      "subcategory": "set_operations",
      "description": "distinct with select and count"
    },
    {
      "name": "testUnion1",
      "expression": "(1 | 2 | 3).count() = 3",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testUnion"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "set_operations",
      "description": "union operator with distinct values"
    },
    {
      "name": "testUnion2",
      "expression": "(1 | 2 | 2).count() = 2",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testUnion"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "set_operations",
      "description": "union operator with duplicate values"
    },
    {
      "name": "testUnion3",
      "expression": "(1|1).count() = 1",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testUnion"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "set_operations",
      "description": "union operator with identical values"
    },
    {
      "name": "testUnion4",
      "expression": "1.union(2).union(3).count() = 3",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testUnion"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "set_operations",
      "description": "union function chaining"
    },
    {
      "name": "testUnion5",
      "expression": "1.union(2.union(3)).count() = 3",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testUnion"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "set_operations",
      "description": "union function nesting"
    },
    {
      "name": "testUnion6",
      "expression": "(1 | 2).combine(2).count() = 3",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testUnion"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "set_operations",
      "description": "combine function vs union"
    },
    {
      "name": "testUnion7",
      "expression": "1.combine(1).count() = 2",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testUnion"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "set_operations",
      "description": "combine function with duplicates"
    },
    {
      "name": "testUnion8",
      "expression": "1.combine(1).union(2).count() = 2",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testUnion"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "set_operations",
      "description": "combine then union operation"
    },
    {
      "name": "testUnion9",
      "expression": "name.select(use | given).count()",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        8
      ],
      "tags": [
        "r5-xml",
        "testUnion"
      ],
      "outputTypes": [
        "integer"
      ],
      "subcategory": "set_operations",
      "description": "union in select expression"
    },
    {
      "name": "testUnion10",
      "expression": "name.select(use.union($this.given)).count()",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        8
      ],
      "tags": [
        "r5-xml",
        "testUnion"
      ],
      "outputTypes": [
        "integer"
      ],
      "subcategory": "set_operations",
      "description": "union function with $this context"
    },
    {
      "name": "testUnion11",
      "expression": "name.select(use.union(given)).count()",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        8
      ],
      "tags": [
        "r5-xml",
        "testUnion"
      ],
      "outputTypes": [
        "integer"
      ],
      "subcategory": "set_operations",
      "description": "union function in select"
    },
    {
      "name": "testUnion12",
      "expression": "true | Patient.name.given.first()",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true,
        "Peter"
      ],
      "tags": [
        "r5-xml",
        "testUnion"
      ],
      "outputTypes": [
        "boolean",
        "string"
      ],
      "subcategory": "set_operations",
      "description": "union with different types"
    },
    {
      "name": "testIntersect1",
      "expression": "(1 | 2 | 3).intersect(2 | 4) = 2",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testIntersect"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "set_operations",
      "description": "intersect function with common element"
    },
    {
      "name": "testIntersect2",
      "expression": "(1 | 2).intersect(4).empty()",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testIntersect"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "set_operations",
      "description": "intersect function with no common elements"
    },
    {
      "name": "testIntersect3",
      "expression": "(1 | 2).intersect({}).empty()",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testIntersect"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "set_operations",
      "description": "intersect function with empty collection"
    },
    {
      "name": "testIntersect4",
      "expression": "1.combine(1).intersect(1).count() = 1",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testIntersect"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "set_operations",
      "description": "intersect with combine operation"
    },
    {
      "name": "testExclude1",
      "expression": "(1 | 2 | 3).exclude(2 | 4) = 1 | 3",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testExclude"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "set_operations",
      "description": "exclude function with common elements"
    },
    {
      "name": "testExclude2",
      "expression": "(1 | 2).exclude(4) = 1 | 2",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testExclude"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "set_operations",
      "description": "exclude function with no common elements"
    },
    {
      "name": "testExclude3",
      "expression": "(1 | 2).exclude({}) = 1 | 2",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testExclude"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "set_operations",
      "description": "exclude function with empty collection"
    },
    {
      "name": "testExclude4",
      "expression": "1.combine(1).exclude(2).count() = 2",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testExclude"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "set_operations",
      "description": "exclude with combine operation"
    },
    {
      "name": "testSort1",
      "expression": "(1 | 2 | 3).sort() = (1 | 2 | 3)",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testSort"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "ordering",
      "description": "sort function with already sorted values"
    },
    {
      "name": "testSort2",
      "expression": "(3 | 2 | 1).sort() = (1 | 2 | 3)",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testSort"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "ordering",
      "description": "sort function with unsorted values"
    },
    {
      "name": "testSort3",
      "expression": "(1 | 2 | 3).sort($this) = (1 | 2 | 3)",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testSort"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "ordering",
      "description": "sort function with $this expression"
    },
    {
      "name": "testSort4",
      "expression": "(3 | 2 | 1).sort($this) = (1 | 2 | 3)",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testSort"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "ordering",
      "description": "sort function with $this expression ascending"
    },
    {
      "name": "testSort5",
      "expression": "(1 | 2 | 3).sort(-$this) = (3 | 2 | 1)",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testSort"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "ordering",
      "description": "sort function with negative $this expression (descending)"
    },
    {
      "name": "testSort6",
      "expression": "('a' | 'b' | 'c').sort($this) = ('a' | 'b' | 'c')",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testSort"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "ordering",
      "description": "sort function with strings ascending"
    },
    {
      "name": "testSort7",
      "expression": "('c' | 'b' | 'a').sort($this) = ('a' | 'b' | 'c')",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testSort"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "ordering",
      "description": "sort function with unsorted strings"
    },
    {
      "name": "testSort8",
      "expression": "('a' | 'b' | 'c').sort(-$this) = ('c' | 'b' | 'a')",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testSort"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "ordering",
      "description": "sort function with strings descending"
    },
    {
      "name": "testSort9",
      "expression": "Patient.name[0].given.sort() = ('James' | 'Peter')",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testSort"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "ordering",
      "description": "sort function with real data"
    },
    {
      "name": "testSort10",
      "expression": "Patient.name.sort(-family, -given.first()).first().use = 'usual'",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testSort"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "ordering",
      "description": "sort function with multiple criteria"
    },
    {
      "name": "testCount1",
      "expression": "Patient.name.count()",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        3
      ],
      "tags": [
        "r5-xml",
        "testCount"
      ],
      "outputTypes": [
        "integer"
      ],
      "subcategory": "aggregation",
      "description": "count function basic usage"
    },
    {
      "name": "testCount2",
      "expression": "Patient.name.count() = 3",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testCount"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "aggregation",
      "description": "count function with equality check"
    },
    {
      "name": "testCount3",
      "expression": "Patient.name.first().count()",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        1
      ],
      "tags": [
        "r5-xml",
        "testCount"
      ],
      "outputTypes": [
        "integer"
      ],
      "subcategory": "aggregation",
      "description": "count function on single element"
    },
    {
      "name": "testCount4",
      "expression": "Patient.name.first().count() = 1",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testCount"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "aggregation",
      "description": "count function on single element with equality"
    },
    {
      "name": "testExists1",
      "expression": "Patient.name.exists()",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testExists"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "aggregation",
      "description": "exists function basic usage"
    },
    {
      "name": "testExists2",
      "expression": "Patient.name.exists(use = 'nickname')",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        false
      ],
      "tags": [
        "r5-xml",
        "testExists"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "aggregation",
      "description": "exists function with condition (no match)"
    },
    {
      "name": "testExists3",
      "expression": "Patient.name.exists(use = 'official')",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testExists"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "aggregation",
      "description": "exists function with condition (match)"
    },
    {
      "name": "testExists4",
      "expression": "Patient.maritalStatus.coding.exists(code = 'P' and system = 'http://terminology.hl7.org/CodeSystem/v3-MaritalStatus')\n\t\t\tor Patient.maritalStatus.coding.exists(code = 'A' and system = 'http://terminology.hl7.org/CodeSystem/v3-MaritalStatus')",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        false
      ],
      "tags": [
        "r5-xml",
        "testExists"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "aggregation",
      "description": "exists function with complex conditions"
    },
    {
      "name": "testExists5",
      "expression": "(1 | 2).exists()",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testExists"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "aggregation",
      "description": "exists function on collection"
    },
    {
      "name": "testFirstLast1",
      "expression": "Patient.name.first().given = 'Peter' | 'James'",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testFirstLast"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "filtering",
      "description": "first function usage"
    },
    {
      "name": "testFirstLast2",
      "expression": "Patient.name.last().given = 'Peter' | 'James'",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testFirstLast"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "filtering",
      "description": "last function usage"
    },
    {
      "name": "testTail1",
      "expression": "(0 | 1 | 2).tail() = 1 | 2",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testTail"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "filtering",
      "description": "tail function basic usage"
    },
    {
      "name": "testTail2",
      "expression": "Patient.name.tail().given = 'Jim' | 'Peter' | 'James'",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testTail"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "filtering",
      "description": "tail function with real data"
    },
    {
      "name": "testTake1",
      "expression": "(0 | 1 | 2).take(1) = 0",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testTake"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "filtering",
      "description": "take function with single element"
    },
    {
      "name": "testTake2",
      "expression": "(0 | 1 | 2).take(2) = 0 | 1",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testTake"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "filtering",
      "description": "take function with multiple elements"
    },
    {
      "name": "testTake3",
      "expression": "Patient.name.take(1).given = 'Peter' | 'James'",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testTake"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "filtering",
      "description": "take function with real data"
    },
    {
      "name": "testTake4",
      "expression": "Patient.name.take(2).given = 'Peter' | 'James' | 'Jim'",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testTake"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "filtering",
      "description": "take function with two elements"
    },
    {
      "name": "testTake5",
      "expression": "Patient.name.take(3).given.count() = 5",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testTake"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "filtering",
      "description": "take function with all elements"
    },
    {
      "name": "testTake6",
      "expression": "Patient.name.take(4).given.count() = 5",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testTake"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "filtering",
      "description": "take function with more than available"
    },
    {
      "name": "testTake7",
      "expression": "Patient.name.take(0).given.exists() = false",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testTake"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "filtering",
      "description": "take function with zero elements"
    },
    {
      "name": "testSkip1",
      "expression": "(0 | 1 | 2).skip(1) = 1 | 2",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testSkip"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "filtering",
      "description": "skip function basic usage"
    },
    {
      "name": "testSkip2",
      "expression": "(0 | 1 | 2).skip(2) = 2",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testSkip"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "filtering",
      "description": "skip function with multiple elements"
    },
    {
      "name": "testSkip3",
      "expression": "Patient.name.skip(1).given.trace('test') = 'Jim' | 'Peter' | 'James'",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testSkip"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "filtering",
      "description": "skip function with real data"
    },
    {
      "name": "testSkip4",
      "expression": "Patient.name.skip(3).given.exists() = false",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testSkip"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "filtering",
      "description": "skip function with more than available"
    },
    {
      "name": "testSingle1",
      "expression": "Patient.name.first().single().exists()",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testSingle"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "filtering",
      "description": "single function with single element"
    },
    {
      "name": "testSingle2",
      "expression": "Patient.name.single().exists()",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [],
      "tags": [
        "r5-xml",
        "testSingle"
      ],
      "expectError": true,
      "invalidKind": "execution",
      "subcategory": "filtering",
      "description": "single function with multiple elements (error)"
    },
    {
      "name": "testAggregate1",
      "expression": "(1|2|3|4|5|6|7|8|9).aggregate($this+$total, 0) = 45",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testAggregate"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "aggregation",
      "description": "aggregate function for sum"
    },
    {
      "name": "testAggregate2",
      "expression": "(1|2|3|4|5|6|7|8|9).aggregate($this+$total, 2) = 47",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testAggregate"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "aggregation",
      "description": "aggregate function with initial value"
    },
    {
      "name": "testAggregate3",
      "expression": "(1|2|3|4|5|6|7|8|9).aggregate(iif($total.empty(), $this, iif($this < $total, $this, $total))) = 1",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testAggregate"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "aggregation",
      "description": "aggregate function for minimum"
    },
    {
      "name": "testAggregate4",
      "expression": "(1|2|3|4|5|6|7|8|9).aggregate(iif($total.empty(), $this, iif($this > $total, $this, $total))) = 9",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testAggregate"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "aggregation",
      "description": "aggregate function for maximum"
    },
    {
      "name": "testSubSetOf1",
      "expression": "Patient.name.first().subsetOf($this.name)",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testSubSetOf"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "set_operations",
      "description": "subsetOf function basic usage"
    },
    {
      "name": "testSubSetOf2",
      "expression": "Patient.name.subsetOf($this.name.first()).not()",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testSubSetOf"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "set_operations",
      "description": "subsetOf function negative case"
    },
    {
      "name": "testSubSetOf3",
      "expression": "supportingInfo.where(category.coding.code = 'additionalbodysite').sequence.subsetOf($this.item.informationSequence)",
      "input": null,
      "inputfile": "explanationofbenefit-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testSubSetOf"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "set_operations",
      "description": "subsetOf function with complex path"
    },
    {
      "name": "testSuperSetOf1",
      "expression": "Patient.name.first().supersetOf($this.name).not()",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testSuperSetOf"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "set_operations",
      "description": "supersetOf function negative case"
    },
    {
      "name": "testSuperSetOf2",
      "expression": "Patient.name.supersetOf($this.name.first())",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testSuperSetOf"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "set_operations",
      "description": "supersetOf function basic usage"
    },
    {
      "name": "testContainsCollection1",
      "expression": "(1 | 2 | 3) contains 1",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testContainsCollection"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "set_operations",
      "description": "contains function with matching element"
    },
    {
      "name": "testContainsCollection2",
      "expression": "(2 | 3) contains 1",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        false
      ],
      "tags": [
        "r5-xml",
        "testContainsCollection"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "set_operations",
      "description": "contains function with non-matching element"
    },
    {
      "name": "testContainsCollection3",
      "expression": "('a' | 'c' | 'd') contains 'a'",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testContainsCollection"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "set_operations",
      "description": "contains function with string values"
    },
    {
      "name": "testContainsCollection4",
      "expression": "('a' | 'c' | 'd') contains 'b'",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        false
      ],
      "tags": [
        "r5-xml",
        "testContainsCollection"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "set_operations",
      "description": "contains function with non-matching string"
    },
    {
      "name": "testContainsCollectionEmpty1",
      "expression": "{} contains 1",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        false
      ],
      "tags": [
        "r5-xml",
        "testContainsCollection"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "set_operations",
      "description": "contains function with empty collection"
    },
    {
      "name": "testContainsCollectionEmpty2",
      "expression": "{} contains 'value'",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        false
      ],
      "tags": [
        "r5-xml",
        "testContainsCollection"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "set_operations",
      "description": "contains function with empty collection and string"
    },
    {
      "name": "testContainsCollectionEmpty3",
      "expression": "{} contains true",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        false
      ],
      "tags": [
        "r5-xml",
        "testContainsCollection"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "set_operations",
      "description": "contains function with empty collection and boolean"
    },
    {
      "name": "testContainsCollectionEmpty4",
      "expression": "{} contains {}",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [],
      "tags": [
        "r5-xml",
        "testContainsCollection"
      ],
      "subcategory": "set_operations",
      "description": "contains function with empty collections"
    },
    {
      "name": "testContainsCollectionEmptyDateTime",
      "expression": "{} contains @2023-01-01",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        false
      ],
      "tags": [
        "r5-xml",
        "testContainsCollection"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "set_operations",
      "description": "contains function with empty collection and date"
    },
    {
      "name": "testIndexer1",
      "expression": "Patient.name[0].given = 'Peter' | 'James'",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testIndexer"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "filtering",
      "description": "indexer function with first element"
    },
    {
      "name": "testIndexer2",
      "expression": "Patient.name[1].given = 'Jim'",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "testIndexer"
      ],
      "outputTypes": [
        "boolean"
      ],
      "subcategory": "filtering",
      "description": "indexer function with second element"
    },
    {
      "name": "testRepeatBasic",
      "expression": "Patient.name.repeat('test').first() = 'test'",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "repeat-basic"
      ],
      "category": "collection",
      "subcategory": "control_flow",
      "description": "Basic repeat function test"
    },
    {
      "name": "testRepeatAllBasic",
      "expression": "Patient.name.repeatAll('test').count() >= 1",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "repeatAll-basic"
      ],
      "category": "collection",
      "subcategory": "control_flow",
      "description": "Basic repeatAll function test"
    },
    {
      "name": "testRepeatDeduplication",
      "expression": "Patient.name.repeat('duplicate').count() <= Patient.name.repeatAll('duplicate').count()",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "repeat-deduplication"
      ],
      "category": "collection",
      "subcategory": "control_flow",
      "description": "Repeat deduplication comparison test"
    },
    {
      "name": "testRepeatEmpty",
      "expression": "{}.repeat($this + 1).empty()",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "repeat-empty"
      ],
      "category": "collection",
      "subcategory": "control_flow",
      "description": "Repeat function with empty input"
    },
    {
      "name": "testRepeatAllEmpty",
      "expression": "{}.repeatAll($this + 1).empty()",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "repeatAll-empty"
      ],
      "category": "collection",
      "subcategory": "control_flow",
      "description": "RepeatAll function with empty input"
    },
    {
      "name": "testRepeatIncompatibleArithmetic",
      "expression": "'1'.repeat($this + 1)",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [],
      "tags": [
        "r5-xml",
        "repeat-safety"
      ],
      "expectError": true,
      "invalidKind": "execution",
      "category": "collection",
      "subcategory": "control_flow",
      "description": "Repeat function with incompatible arithmetic"
    },
    {
      "name": "testRepeatAllIncompatibleArithmetic",
      "expression": "'test'.repeatAll($this * 2)",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [],
      "tags": [
        "r5-xml",
        "repeatAll-safety"
      ],
      "expectError": true,
      "invalidKind": "execution",
      "category": "collection",
      "subcategory": "control_flow",
      "description": "RepeatAll function with incompatible arithmetic"
    },
    {
      "name": "testRepeatSingleArgument",
      "expression": "1.repeat($this + 1, $this * 2)",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [],
      "tags": [
        "r5-xml",
        "repeat-args"
      ],
      "expectError": true,
      "invalidKind": "execution",
      "category": "collection",
      "subcategory": "control_flow",
      "description": "Repeat function with multiple arguments"
    },
    {
      "name": "testRepeatAllSingleArgument",
      "expression": "1.repeatAll($this + 1, $this * 2)",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [],
      "tags": [
        "r5-xml",
        "repeatAll-args"
      ],
      "expectError": true,
      "invalidKind": "execution",
      "category": "collection",
      "subcategory": "control_flow",
      "description": "RepeatAll function with multiple arguments"
    },
    {
      "name": "testRepeatNoArguments",
      "expression": "1.repeat()",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [],
      "tags": [
        "r5-xml",
        "repeat-noargs"
      ],
      "expectError": true,
      "invalidKind": "execution",
      "category": "collection",
      "subcategory": "control_flow",
      "description": "Repeat function with no arguments"
    },
    {
      "name": "testRepeatAllNoArguments",
      "expression": "1.repeatAll()",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [],
      "tags": [
        "r5-xml",
        "repeatAll-noargs"
      ],
      "expectError": true,
      "invalidKind": "execution",
      "category": "collection",
      "subcategory": "control_flow",
      "description": "RepeatAll function with no arguments"
    },
    {
      "name": "testRepeatSimpleProjection",
      "expression": "5.repeat(iif($this > 0, $this - 1, {})).where($this > 0) = (5|4|3|2|1)",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "repeat-projection"
      ],
      "category": "collection",
      "subcategory": "control_flow",
      "description": "Repeat function with simple projection"
    },
    {
      "name": "testRepeatAllSimpleProjection",
      "expression": "5.repeatAll(iif($this > 0, $this - 1, {})).where($this > 0).count() >= 5.repeat(iif($this > 0, $this - 1, {})).where($this > 0).count()",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "repeatAll-projection"
      ],
      "category": "collection",
      "subcategory": "control_flow",
      "description": "RepeatAll function with simple projection"
    },
    {
      "name": "testRepeatFiniteSequence",
      "expression": "10.repeat(iif($this > 1, $this - 2, {})).count() = 6",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "repeat-finite"
      ],
      "category": "collection",
      "subcategory": "control_flow",
      "description": "Repeat function with finite sequence"
    },
    {
      "name": "testRepeatAllFiniteSequence",
      "expression": "10.repeatAll(iif($this > 1, $this - 2, {})).count() = 6",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true
      ],
      "tags": [
        "r5-xml",
        "repeatAll-finite"
      ],
      "category": "collection",
      "subcategory": "control_flow",
      "description": "RepeatAll function with finite sequence"
    },
    {
      "name": "testRepeatInfiniteLoop",
      "expression": "1.repeat($this + 1)",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [],
      "tags": [
        "r5-xml",
        "repeat-infinite"
      ],
      "expectError": true,
      "invalidKind": "execution",
      "category": "collection",
      "subcategory": "control_flow",
      "description": "Repeat function with infinite loop"
    },
    {
      "name": "testRepeatAllInfiniteLoop",
      "expression": "1.repeatAll($this + 1)",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [],
      "tags": [
        "r5-xml",
        "repeatAll-infinite"
      ],
      "expectError": true,
      "invalidKind": "execution",
      "category": "collection",
      "subcategory": "control_flow",
      "description": "RepeatAll function with infinite loop"
    },
    {
      "name": "testRepeatInfiniteConstant",
      "expression": "1.repeat(1)",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [],
      "tags": [
        "r5-xml",
        "repeat-constant"
      ],
      "expectError": true,
      "invalidKind": "execution",
      "category": "collection",
      "subcategory": "control_flow",
      "description": "Repeat function with infinite constant"
    },
    {
      "name": "testRepeatAllInfiniteConstant",
      "expression": "1.repeatAll(1)",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [],
      "tags": [
        "r5-xml",
        "repeatAll-constant"
      ],
      "expectError": true,
      "invalidKind": "execution",
      "category": "collection",
      "subcategory": "control_flow",
      "description": "RepeatAll function with infinite constant"
    }
  ]
}