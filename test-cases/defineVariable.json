{
  "name": "defineVariable",
  "description": "defineVariable tests",
  "source": "fhir-test-cases r5",
  "tests": [
    {
      "name": "defineVariable1",
      "expression": "defineVariable('v1', 'value1').select(%v1)",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        "value1"
      ],
      "tags": [
        "r5-xml",
        "defineVariable"
      ],
      "description": "simplest variable"
    },
    {
      "name": "defineVariable2",
      "expression": "defineVariable('n1', name.first()).select(%n1.given)",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        "Peter",
        "James"
      ],
      "tags": [
        "r5-xml",
        "defineVariable"
      ],
      "description": "simple use of a variable"
    },
    {
      "name": "defineVariable3",
      "expression": "defineVariable('n1', name.first()).select(%n1.given).first()",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        "Peter"
      ],
      "tags": [
        "r5-xml",
        "defineVariable"
      ],
      "description": "simple use of a variable 2 selects"
    },
    {
      "name": "defineVariable4",
      "expression": "defineVariable('n1', name.first()).select(%n1.given) | defineVariable('n1', name.skip(1).first()).select(%n1.given)",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        "Peter",
        "James",
        "Jim"
      ],
      "tags": [
        "r5-xml",
        "defineVariable"
      ],
      "description": "use of a variable in separate contexts"
    },
    {
      "name": "defineVariable5",
      "expression": "defineVariable('n1', name.first()).where(active.not()) | defineVariable('n1', name.skip(1).first()).select(%n1.given)",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        "Jim"
      ],
      "tags": [
        "r5-xml",
        "defineVariable"
      ],
      "description": "use of a variable in separate contexts defined in 2 but used in 1"
    },
    {
      "name": "defineVariable6",
      "expression": "defineVariable('n1', name.first()).select(id & '-' & %n1.given.join('|')) | defineVariable('n2', name.skip(1).first()).select(%n2.given)",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        "example-Peter|James",
        "Jim"
      ],
      "tags": [
        "r5-xml",
        "defineVariable"
      ],
      "description": "use of different variables in different contexts"
    },
    {
      "name": "defineVariable7",
      "expression": "defineVariable('n1', name.first()).active | defineVariable('n2', name.skip(1).first()).select(%n2.given)",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true,
        "Jim"
      ],
      "tags": [
        "r5-xml",
        "defineVariable"
      ],
      "description": "2 vars, one unused"
    },
    {
      "name": "defineVariable8",
      "expression": "defineVariable('v1', 'value1').select(%v1).trace('data').defineVariable('v2', 'value2').select($this & ':' & %v1 & '-' & %v2) | defineVariable('v3', 'value3').select(%v3)",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        "value1:value1-value2",
        "value3"
      ],
      "tags": [
        "r5-xml",
        "defineVariable"
      ],
      "description": "CompositeVariableUse"
    },
    {
      "name": "defineVariable9",
      "expression": "defineVariable('n1', name.first()).active | defineVariable('n2', name.skip(1).first()).select(%n1.given)",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [],
      "tags": [
        "r5-xml",
        "defineVariable"
      ],
      "description": "use of a variable outside context throws error",
      "expectError": true,
      "invalidKind": "semantic"
    },
    {
      "name": "defineVariable10",
      "expression": "select(%fam.given)",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [],
      "tags": [
        "r5-xml",
        "defineVariable"
      ],
      "description": "use undefined variable throws error",
      "expectError": true,
      "invalidKind": "semantic"
    },
    {
      "name": "dvRedefiningVariableThrowsError",
      "expression": "defineVariable('v1').defineVariable('v1').select(%v1)",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [],
      "tags": [
        "r5-xml",
        "defineVariable"
      ],
      "expectError": true,
      "invalidKind": "semantic"
    },
    {
      "name": "defineVariable12",
      "expression": "Patient.name.defineVariable('n1', first()).active | Patient.name.defineVariable('n2', skip(1).first()).select(%n1.given)",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [],
      "tags": [
        "r5-xml",
        "defineVariable"
      ],
      "description": "defineVariable() could not be the first child",
      "expectError": true,
      "invalidKind": "semantic"
    },
    {
      "name": "defineVariable13",
      "expression": "Patient.name.defineVariable('n2', skip(1).first()).defineVariable('res', %n2.given+%n2.given).select(%res)",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        "JimJim",
        "JimJim",
        "JimJim"
      ],
      "tags": [
        "r5-xml",
        "defineVariable"
      ],
      "description": "sequence of variable definitions tweak"
    },
    {
      "name": "defineVariable14",
      "expression": "Patient.name.defineVariable('n1', first()).select(%n1).exists() | Patient.name.defineVariable('n2', skip(1).first()).defineVariable('res', %n2.given+%n2.given).select(%res)",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        true,
        "JimJim"
      ],
      "tags": [
        "r5-xml",
        "defineVariable"
      ],
      "description": "sequence of variable definitions original"
    },
    {
      "name": "defineVariable15",
      "expression": "defineVariable('root', 'r1-').select(defineVariable('v1', 'v1').defineVariable('v2', 'v2').select(%v1 | %v2)).select(%root & $this)",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        "r1-v1",
        "r1-v2"
      ],
      "tags": [
        "r5-xml",
        "defineVariable"
      ],
      "description": "multi-tree vars valid"
    },
    {
      "name": "defineVariable16",
      "expression": "defineVariable('root', 'r1-').select(defineVariable('v1', 'v1').defineVariable('v2', 'v2').select(%v1 | %v2)).select(%root & $this & %v1)",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [],
      "tags": [
        "r5-xml",
        "defineVariable"
      ],
      "description": "multi-tree vars exception",
      "expectError": true,
      "invalidKind": "semantic"
    },
    {
      "name": "dvCantOverwriteSystemVar",
      "expression": "defineVariable('context', 'oops')",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [],
      "tags": [
        "r5-xml",
        "defineVariable"
      ],
      "expectError": true,
      "invalidKind": "semantic"
    },
    {
      "name": "dvConceptMapExample",
      "expression": "group.select(\n\t\t\t\tdefineVariable('grp')\n\t\t\t\t.element\n\t\t\t\t.select(\n\t\t\t\t\tdefineVariable('ele')\n\t\t\t\t\t.target\n\t\t\t\t\t.select(%grp.source & '|' & %ele.code & ' ' & relationship & ' ' & %grp.target & '|' & code)\n\t\t\t\t)\n\t\t\t)\n\t\t\t.trace('all')\n\t\t\t.isDistinct()",
      "input": null,
      "inputfile": "conceptmap-example.json",
      "expected": [
        false
      ],
      "tags": [
        "r5-xml",
        "defineVariable"
      ],
      "description": "realistic example with conceptmap"
    },
    {
      "name": "defineVariable19",
      "expression": "defineVariable(defineVariable('param','ppp').select(%param), defineVariable('param','value').select(%param)).select(%ppp)",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        "value"
      ],
      "tags": [
        "r5-xml",
        "defineVariable"
      ],
      "description": "defineVariable in function parameters (1)",
      "skipStaticCheck": true
    },
    {
      "name": "dvParametersDontColide",
      "expression": "'aaa'.replace(defineVariable('param', 'aaa').select(%param), defineVariable('param','bbb').select(%param))",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [
        "bbb"
      ],
      "tags": [
        "r5-xml",
        "defineVariable"
      ],
      "description": "defineVariable in function parameters (2)"
    },
    {
      "name": "dvUsageOutsideScopeThrows",
      "expression": "defineVariable('n1', 'v1').active | defineVariable('n2', 'v2').select(%n1)",
      "input": null,
      "inputfile": "patient-example.json",
      "expected": [],
      "tags": [
        "r5-xml",
        "defineVariable"
      ],
      "description": "use of a variable outside context throws error",
      "expectError": true,
      "invalidKind": "semantic"
    }
  ]
}